{"version":3,"sources":["utils/colLookup.js","utils/dataFunction.js","utils/findDateIndices.js","utils/geojsonArrayBuffer.js","utils/getCartogramValues.js","utils/getCartogramCenter.js","utils/getCols.js","utils/getCSV.js","utils/getDataForBins.js","utils/getDataForCharts.js","utils/getDataForLisa.js","utils/getGeoidIndex.js","utils/getJson.js","utils/getJsonPure.js","utils/getCurrentWuuid.js","utils/getLisaValues.js","utils/getParseCSV.js","utils/getURLParams.js","utils/getVarId.js","utils/loadJson.js","utils/mapFunction.js","utils/mergeData.js","actions/index.js","config/index.js","components/bottomPanel.js","components/tooltip.js","components/twoWeekLineChart.js","config/svg.js","components/dataPanel.js","components/slider.js","components/dock.js","components/draggable.js","wiki/index.js","styled_components/index.js","components/infoBox.js","components/binsList.js","components/legend.js","components/mainLineChart.js","components/map.js","components/mapTooltipContent.js","components/navbar.js","components/notificationBox.js","config/variableTree.js","components/variablePanel.js","components/tooltipPopper.js","components/preloader.js","components/scaleable.js","components/topPanel.js","App.js","utils/getDateLists.js","constants/defaults.js","reducers/index.js","registerServiceWorker.js","index.js"],"names":["colLookup","columns","dataset","table","property","indexOf","dataFn","numeratorData","denominatorData","dataParams","nProperty","nIndex","nRange","dProperty","dIndex","dRange","nType","dType","scale","undefined","findDateIndices","dateList","columnList","validIndices","i","length","push","getDateIndices","data","names","rtn","geojsonArrayBuffer","a","arrayBuffer","getCartogramValues","gda_proxy","cartogramData","cartogram","tempObj","value","getCartogramCenter","x","y","keys","Object","dataLength","getColumns","url","fetch","then","response","ok","text","Promise","reject","status","d3","tempData","getCSV","getDataForBins","tableData","numerator","denominator","Array","n","tempIndex","tempDIndex","getDataForCharts","dateIndices","countCol","sumCol","name","features","j","sum","date","getDataForLisa","order","tempDict","tempNIndex","properties","GEOID","getGeoidIndex","geoidOrder","indexOrder","getJson","getJsonPure","responseFromJson","clone","abResponse","ab","getCurrentWuuid","selectedDataset","w","CreateQueenWeights","get_uid","getLisaValues","geoids","all_zeros","clusters","sig","lisa","local_moran","map_uuid","w_uuid","parseVecDouble","significances","joinCol","accumulate","selectedJoinColumn","forEach","colOption","hasOwnProperty","tempArr","values","getParseCSV","getURLParams","params","mapParams","coords","currentData","lastDateIndex","mapCoords","Math","round","latitude","longitude","zoom","source","split","variable","variableName","replace","method","mapType","prop","bin","binMode","slice","dateRange","overlay","resource","vizType","getVarId","loadJson","ReadGeojsonMap","json","geoidIndex","mapFn","val","bins","colors","maptype","column","includes","mergeData","featureCollection","featureCollectionJoinCol","joinData","joinDataNames","joinDataCol","dataDict","colNumCheck","parseInt","Number","isInteger","cols","merged","merge","setCurrentData","type","payload","setVariableParams","setMapParams","setSelectionData","appendSelectionData","setAnchorEl","anchorEl","setPanelState","setNotification","info","colorScales","fixedScales","breaks","pow","white","black","darkgray","gray","buttongray","lightgray","yellow","lightblue","pairedColors","count","qualtitiveScale","dataPresets","plainName","geojson","csvs","joinCols","tableNames","tooltipInfo","Choropleth","NaturalBreaksFixed","NaturalBreaks","BoxMap","Hotspot","LocalMoran","NotSig","HighHigh","LowLow","HighLow","LowHigh","PovChldPrc","IncRt","MedianHouseholdIncome","FdInsPrc","UnEmplyPrc","UnInPrc","PrmPhysRt","PrevHospRt","RsiSgrBlckRt","SvrHsngPrbRt","Over65YearsPrc","AdObPrc","AdDibPrc","SmkPrc","ExcDrkPrc","DrOverdMrtRt","LfExpRt","SlfHlthPrc","SeverityIndex","PredictedDeaths","PredictedDeathsInterval","healthfactor","healthcontext","healthlife","Hypersegregated","href","target","rel","BlackBelt","TestingCapacity","USCongress","BinModes","Clinics","Hospitals","ClinicsAndHospitals","variablePresets","scale3D","fixedScale","colorScale","BottomDrawer","styled","div","BottomPanel","panelState","useSelector","state","useState","bottomMargin","setBottomMargin","window","addEventListener","document","querySelector","offsetHeight","getChartHeight","bottom","chart","id","TooltipContainer","button","process","Tooltip","props","dispatch","useDispatch","onMouseEnter","event","currentTarget","onMouseLeave","LineContainer","CustomizedDot","cx","cy","index","color","angle","width","height","fill","viewBox","points","transform","TwoWeekLineChart","map","d","domain","range","schema","delta","lineColor","start","hide","dataKey","stroke","strokeWidth","isAnimationActive","dot","pctChange","calcAngle","settings","className","r","report","rx","selectRect","DataPanelContainer","otherPanels","ReportWrapper","ReportContainer","expanded","ReportSection","span","ExpandSelect","FormControl","DataPanel","storedData","currDateIndex","dates","selectionKeys","selectionIndex","setExpanded","cases","deaths","predictions","chr_health_factors","chr_life","chr_health_context","testing","vaccinesAdmin1","parsePredictedDate","list","performOperation","dataArray","operation","totalPopulation","reducer","accumulator","currentValue","reduce","aggregateProperty","specialCase","selection","selectionPop","aggregateTimeseries","aggregate2WeekTimeSeries","lookbackPeriod","day","aggregateDataFunction","variables","Select","labelId","onChange","MenuItem","key","toLocaleString","toFixed","dataObj","returnStr","aggregateQualitative","f","onClick","SliderContainer","PlayPauseContainer","Grid","PlayPauseButton","Button","LineSlider","Slider","RangeSlider","DateTitle","h3","InitialDate","p","EndDate","DateSelectorContainer","DateSlider","currentVariable","timerId","setTimerId","valuetext","container","spacing","style","display","padding","rangeType","item","xs","rawDate","Date","setDate","getDate","toLocaleDateString","year","month","formatDate","rate","interval","setInterval","o","clearInterval","handlePlayPause","newValue","min","max","marks","step","characteristic","valueLabelDisplay","rIndex","rRange","getAriaValueText","valueLabelFormat","aria-labelledby","DockContainer","DockButton","isActive","Dock","handlePanelButton","panel","title","lineChart","tutorial","DragContainer","DragButton","CollapseButton","Draggable","open","defaultX","X","setX","defaultY","Y","setY","isDragging","setIsDragging","listener","e","prevWidth","movementX","prevHeight","movementY","touchListener","targetTouches","clientX","clientY","removeListener","removeEventListener","removeTouchListener","useEffect","left","top","zIndex","z","content","onMouseDown","onTouchStart","HoverButton","selector","backup","getBoundingClientRect","innerWidth","classList","add","highlightFeature","remove","unhighlightFeature","pages","src","alt","StyledDropDown","component","BinsContainer","disabled","InfoContainer","active","Drawer","DrawerButton","BodyContainer","TutorialButton","PagesDropDown","tutorialInfo","InfoBox","panelOpen","currArticle","setCurrArticle","page","link","subtitle","BinsList","splice","LegendContainer","LegendTitle","BinLabels","binLength","firstBinZero","BinBars","Legend","backgroundColor","ChartContainer","StyledSwitch","ChartTitle","monthNames","millionFormatter","thousandFormatter","dateFormatter","tempDate","getMonth","CustomTick","labelFormatter","CustomTooltip","background","borderRadius","boxShadow","textShadow","fontWeight","floor","MainLineChart","chartData","logChart","setLogChart","strokeOpacities","setStrokeOpacities","handleChange","rangeIncrement","maximum","increment","returnArray","parsedData","summarizedData","tempSum","summarizeChartData","maximums","array","maxVals","tempVal","getMax","years","startDate","endDate","dateArray","getUTCFullYear","yearStr","dateString","getDateRange","margin","right","activeTooltipIndex","b","abs","ticks","tick","fontSize","fontFamily","yAxisId","allowDataOverflow","position","marginTop","orientation","x1","x2","fillOpacity","strokeOpacity","Switch","checked","prev","inputProps","bounds","fitBounds","innerHeight","ICON_MAPPING","hospital","clinic","MAPBOX_ACCESS_TOKEN","defaultMapStyle","fromJS","MAP_STYLE","MapContainer","HoverDiv","NavInlineButton","shareNotification","MapGeocoder","Geocoder","MapButtonContainer","infoPanel","ShareURL","input","IndicatorBox","Map","storedGeojson","storedLisaData","storedCartogramData","urlParams","mapLoaded","hoverInfo","setHoverInfo","highlightGeog","setHighlightGeog","mapStyle","setMapStyle","currLisaData","setCurrLisaData","lat","lon","bearing","pitch","viewState","setViewState","setCartogramData","currVarId","setCurrVarId","hospitalData","setHospitalData","clinicData","setClinicData","storedCenter","setStoredCenter","shared","setShared","multipleSelect","setMultipleSelect","choroplethInteractive","setChoroplethInteractive","boxSelect","setBoxSelect","boxSelectDims","setBoxSelectDims","SHARED_GEOID","localStorage","getItem","SHARED_VIEW","JSON","parse","prevView","transitionDuration","transitionInterpolator","FlyToInterpolator","setTimeout","select","arr","view","tempLayers","defaultLayers","get","layer","setIn","set","center","roundedCenter","mapRef","useRef","deckRef","handleShare","shareData","location","navigator","share","copyText","setSelectionRange","execCommand","handleMapHover","object","Layers","GeoJsonLayer","visible","pickable","stroked","filled","wireframe","extruded","opacity","material","getFillColor","GetFillColor","getElevation","GetHeight","updateTriggers","customScale","onHover","dataName","state_abbr","NAME","GeoidList","findIndex","setItem","stringify","current","tempArray","geogIndex","getLineColor","lineWidthScale","getLineWidth","lineWidthMinPixels","lineWidthMaxPixels","parameters","depthTest","IconLayer","iconAtlas","iconMapping","getIcon","getPosition","Longitude","Latitude","sizeUnits","getSize","sizeMinPixels","sizeMaxPixels","PolygonLayer","getPolygon","ScatterplotLayer","getRadius","radius","find","TextLayer","getTextAnchor","getAlignmentBaseline","maxWidth","wordBreak","getText","MapView","repeat","ox","oy","removeListeners","handleBoxSelect","pageX","pageY","pickObjects","layerIds","console","log","onKeyDown","selectionStart","ctrlKey","shiftKey","onKeyUp","onMouseUp","layers","ref","initialViewState","controller","dragRotate","dragPan","doubleClickZoom","touchZoom","touchRotate","keyboard","scrollZoom","views","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","onViewportChange","onLoad","loaded","onTransitionEnd","click","onClear","clearOnBlur","placeholder","countries","positionOptions","enableHighAccuracy","trackUserLocation","onGeolocate","handleGeolocate","marginBottom","transition","pointerEvents","MapTooltipContent","testing_tcap","testing_ccpt","testing_wk_pos","vaccinesAdmin2","vaccinesDist","caseN","deathN","testingN","criteria","population","state_name","Address","Address_2","City","State","Zipcode","testing_status","address","city","st_abbr","phone","NavItems","ul","NavBar","paddingRight","Notification","CloseTutorial","NotificationBox","notification","dangerouslySetInnerHTML","__html","variableTree","VariablePanelContainer","StyledButtonGroup","ButtonGroup","TwoUp","ControlsContainer","ListSubheader","VariablePanel","setBivariateZ","VariablePresets","handleVizTypeButton","datasetTree","urlParamsTree","geography","newVariable","setNewVariable","currentGeography","setCurrentGeography","currentDataset","setCurrentDataset","InputLabel","htmlFor","tempGeography","tempDataset","displayEmpty","datasetWithGeography","FormLabel","RadioGroup","aria-label","nBins","FormControlLabel","control","Radio","label","data-val","TooltipContentDiv","Popper","Popover","Boolean","disablePortal","modifiers","flip","enabled","preventOverflow","boundariesElement","PreloaderContainer","Preloader","isHidden","setIsHidden","ResizeButton","notScaleable","Scaleable","defaultWidth","setWidth","defaultHeight","setHeight","currXYPos","setCurrXYPos","minHeight","minWidth","parentNode","TopDrawer","TopPanel","App","dateLists","useMemo","stripLeadingZero","str","prototype","addDays","days","this","valueOf","todayDate","initialDate","isoDateList","usDateList","isoDate","toISOString","getDateLists","defaultXLong","defaultWidthLong","defaultHeightManual","defaultWidthManual","defaultXManual","defaultYManual","set_gda_proxy","loadData","csvPromises","csv","result","all","ColNames","DateIndices","denomIndices","lastIndex","binData","binIndex","nb","custom_breaks","load","storeData","columnNames","storeGeojson","variableParams","updateBins","useCallback","paramsDict","queryString","search","URLSearchParams","presets","setUrlParams","jsgeoda","geoda","newGeoda","tempId","storeCartogramData","INITIAL_STATE","geodaProxy","storedCSV","storedMobilityData","centroids","currDate","startDateIndex","currentZVariable","currentMethod","currentOverlay","currentResource","zAxisParams","storedRange","activeGeoid","currentGeoid","sidebarData","action","colDataObj","dateIndexObj","geoDataObj","mapParamsDataObj","variableParamsDataObj","panelsDataObj","variableParamsExDataObj","panelsExDataObj","binsVariableParams","binsMapParams","geoid","obj","geojsonObj","lisaObj","cartoObj","centroidsObj","proxy","currentDataFn","fn","colObj","binsObj","use3D","dateObj","currIndices","nextIndex","paramObj","storedIndex","dataMapParams","dataAndParamsObj","dataAndMapParamsObj","paramObjZ","mapParamObj","zAxisReset","zAxisVariableReset","panelsObj","appendedChartData","appendedSelectionNames","appendedSelectionIndex","removedSelectionNames","tempRemoveIndex","removedSelectionIndex","preset","var","urlMapParamsObj","dbin","mthd","ovr","res","viz","urlDataParamsObj","urlCoordObj","urlParamsSource","isLocalhost","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","catch","error","store","createStore","WebFont","google","families","ReactDOM","render","getElementById","URL","origin","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.049fc8ea.chunk.js","sourcesContent":["const colLookup = (columns, dataset, table, property) => {\r\n    try {\r\n        return columns[dataset][table].indexOf(property); \r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\nexport default colLookup;","// branchless variant\r\n// const dataFn = (numeratorData, numeratorProperty, index, range, denominatorData, denominatorProperty, denominatorIndex, denominatorRange, scale)  => {\r\n\r\n//     return (\r\n//       (\r\n//         (\r\n//           (\r\n//             (numeratorData[index]||numeratorData[numeratorProperty])\r\n//             -\r\n//             ((range!==null)&&(numeratorData[index-range]))\r\n//           )\r\n          \r\n//           /\r\n//           (range+(range===null))\r\n//         )\r\n//       /\r\n//         (\r\n//           (\r\n//             (\r\n//               (denominatorData[denominatorIndex]||denominatorData[denominatorProperty])\r\n//               -\r\n//               ((denominatorRange!==null)&&(denominatorData[denominatorIndex-denominatorRange]))\r\n//             )\r\n//             /\r\n//             (denominatorRange+(denominatorRange===null))\r\n//           )\r\n//           ||\r\n//             (denominatorData[denominatorProperty])\r\n//           || \r\n//           1\r\n//         )\r\n//       )\r\n//       *\r\n//       scale\r\n//     )\r\n// }\r\n\r\n// export default dataFn;\r\n\r\nconst dataFn = (numeratorData, denominatorData, dataParams)  => {\r\n  const { \r\n    nProperty, nIndex, nRange,\r\n    dProperty, dIndex, dRange, \r\n    nType, dType,\r\n    scale\r\n  } = dataParams;\r\n\r\n  if ( nIndex < nRange ) nRange = nIndex\r\n  \r\n  if (numeratorData === undefined) {\r\n    return null;\r\n  } else if ((nProperty !== null && numeratorData[nProperty] === undefined) && (nIndex !== null && numeratorData[nIndex] === undefined)){\r\n    return null;\r\n  } else if (nType ==='time-series' && dType === 'time-series') {\r\n    if (nRange === null & dRange === null) {\r\n      return (\r\n        (numeratorData[nIndex])\r\n        /\r\n        (denominatorData[dIndex])\r\n        *scale   \r\n      )\r\n\r\n    } else {\r\n      return (\r\n        ((numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange)\r\n        /\r\n        ((denominatorData[dIndex]-denominatorData[dIndex-dRange])/dRange)\r\n        *scale   \r\n      )\r\n    }\r\n  } else if (dProperty===null&&nRange===null){ // whole count or number -- no range, no normalization\r\n    return (numeratorData[nProperty]||numeratorData[nIndex])*scale\r\n  } else if (dProperty===null&&nRange!==null){ // range number, daily or weekly count -- no normalization\r\n    return (numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange*scale\r\n  } else if (dProperty!==null&&nRange===null){ // whole count or number normalized -- no range\r\n    return (numeratorData[nProperty]||numeratorData[nIndex])/(denominatorData[dProperty]||denominatorData[dIndex])*scale\r\n  } else if (dProperty!==null&&nRange!==null&&dRange===null){ // range number, daily or weekly count, normalized to a single value\r\n    return (\r\n      (numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange)/(denominatorData[dProperty]||denominatorData[dIndex]\r\n        )*scale\r\n  // } else if (dProperty!==null&&nRange!==null&&dRange!==null){ // range number, daily or weekly count, normalized to a range number, daily or weekly count\r\n  //   console.log('getting the right col')\r\n  //   return (\r\n  //     (numeratorData[nIndex]-numeratorData[nIndex-nRange])/nRange)\r\n  //     /\r\n  //     ((denominatorData[dIndex]-denominatorData[dIndex-dIndex])/dIndex)\r\n  //     *scale\r\n  } else {      \r\n    return 0;\r\n  }\r\n}\r\n\r\nexport default dataFn;","export const findDateIndices = ( dateList, columnList ) => {\r\n    let validIndices = []\r\n    for (let i=0; i<dateList.length; i++) {\r\n        if (columnList.indexOf(dateList[i]) !== -1) validIndices.push(i)\r\n    }\r\n    return validIndices\r\n}\r\n\r\nexport const getDateIndices = ( data, names ) => {\r\n    let rtn = {}\r\n    \r\n    for (let i=0; i < data.length; i++) {\r\n        rtn[names[i]] = data[i][2]\r\n    }\r\n\r\n    return rtn;\r\n}","const geojsonArrayBuffer = async (data) => {\r\n    const arrayBuffer = await data.arrayBuffer()\r\n\r\n    return arrayBuffer;\r\n}\r\n\r\nexport default geojsonArrayBuffer;","const getCartogramValues = (gda_proxy, dataset, data ) => {\r\n    let cartogramData = gda_proxy.cartogram(dataset, data)\r\n    let tempObj = {}\r\n    for (let i=0; i<cartogramData.length; i++){\r\n        cartogramData[i].value = data[i]\r\n        tempObj[i] = cartogramData[i]\r\n    }\r\n    return tempObj;\r\n}\r\n\r\nexport default getCartogramValues;","const getCartogramCenter = (cartogramData) => {\r\n    let x = 0;\r\n    let y = 0;\r\n    let keys = Object.keys(cartogramData)\r\n    let dataLength = keys.length\r\n\r\n    for (let i=0; i<dataLength; i++) {\r\n        x += cartogramData[keys[i]]['position'][0];\r\n        y += cartogramData[keys[i]]['position'][1];\r\n    };\r\n    return [x/dataLength, y/dataLength]\r\n}\r\n\r\nexport default getCartogramCenter;","const getColumns = (data, names) => {\r\n    let rtn = {};\r\n\r\n    for (let i=0; i < data.length; i++) {\r\n        rtn[names[i]] = data[i][1]\r\n    }\r\n\r\n    return rtn;\r\n}\r\n\r\nexport default getColumns;","import * as d3 from 'd3-dsv';\r\n\r\nasync function getCSV(url){\r\n    const tempData = await fetch(url)\r\n      .then(response => {\r\n        return response.ok ? response.text() : Promise.reject(response.status);\r\n      }).then(text => {\r\n        let data = d3.csvParse(text, d3.autoType)\r\n        \r\n        return data\r\n      })\r\n    \r\n      return tempData\r\n}\r\n\r\nexport default getCSV","import dataFn from './dataFunction';\r\n// this function loops through the current data set and provides data for GeodaJS to create custom breaks \r\nconst getDataForBins = (tableData, dataParams) => {\r\n\r\n    const { numerator, nProperty, nIndex, denominator, dType, dIndex} = dataParams;\r\n    if (tableData[0][denominator] === undefined) return;\r\n    // declare empty array for return variables\r\n    let rtn = new Array(tableData.length);\r\n    // let rtnIndex = {};\r\n\r\n    // length of data table to loop through\r\n    let n = tableData.length;\r\n\r\n    // this checks if the bins generated should be dynamic (generating for each date) or fixed (to the most recent date)\r\n    if (nIndex === null && nProperty === null) {\r\n        // if fixed, get the most recent date\r\n        let tempIndex = tableData[0][numerator].length-1;\r\n        // if the denominator is time series data (eg. deaths / cases this week), make the indices the same (most recent)\r\n        let tempDIndex = dType === 'time-series' ? tableData[0][denominator].length-1 : dIndex;\r\n        // loop through, do appropriate calculation. add returned value to rtn array\r\n        while (n>0) {\r\n            n--;\r\n            rtn[n] = dataFn(tableData[n][numerator], tableData[n][denominator], {...dataParams, nIndex:tempIndex, dIndex: tempDIndex})||0\r\n            // rtnIndex[tableData[n].properties.GEOID] = n \r\n        }\r\n    } else {\r\n       while (n>0) {\r\n            n--;\r\n            rtn[n] = dataFn(tableData[n][numerator], tableData[n][denominator], dataParams)||0\r\n            // rtnIndex[tableData[n].properties.GEOID] = n \r\n        }\r\n    }\r\n    return rtn;   \r\n}\r\nexport default getDataForBins","const getDataForCharts = (data, table, dateIndices, dateList, name=null) => {\r\n    // get list of all features (GEOIDs/FIPS)\r\n    let features = Object.keys(data);\r\n    // counter for days \r\n    let n = 0;\r\n    // return array\r\n    let rtn = new Array(dateList.length)\r\n    // 7 day average delay -- early data\r\n    let j = -7;\r\n\r\n    let countCol;\r\n    let sumCol;\r\n    // based on whether specific to geography, or all cases\r\n    if (name===null) {\r\n        countCol = 'count'\r\n        sumCol = 'sum'\r\n    } else {\r\n        countCol = name + ' Daily Count'\r\n        sumCol = name + ' Total Cases'\r\n    }\r\n    \r\n    while (n<dateList.length) {\r\n        let tempObj = {};\r\n        // if we are missing data for that date, skip it\r\n        if (dateIndices.indexOf(n)===-1){\r\n            tempObj[sumCol] = null;\r\n            tempObj[countCol] = null;\r\n            rtn[n] = tempObj;\r\n            n++;\r\n            j++;\r\n        } else {\r\n            // loop through features and sum values for index\r\n            let sum = 0;\r\n            let i = 0;\r\n            while (i<features.length) {\r\n                if (data[features[i]][table]!== undefined) sum += data[features[i]][table][n]||0\r\n                // tempObj[`n${i}`] = data[features[i]][table][n]\r\n                i++;\r\n            }\r\n            tempObj[sumCol] = sum\r\n            tempObj.date = dateList[n]\r\n            if (j<0) {\r\n                tempObj[countCol] = sum\r\n            } else {\r\n                tempObj[countCol] = (sum - rtn[j][sumCol])/7\r\n            }\r\n            rtn[n] = tempObj;\r\n            n++;\r\n            j++;\r\n        }\r\n    }\r\n    return rtn;\r\n}\r\n\r\nexport default getDataForCharts","import dataFn from './dataFunction';\r\n\r\n// this function loops through the current data set and provides data for GeodaJS to create custom breaks \r\nconst getDataForLisa = (tableData, dataParams, order) => {\r\n    \r\n    const { numerator, nProperty, nIndex, denominator, dType, dIndex} = dataParams;\r\n\r\n    // declare empty array for return variables\r\n    let tempDict = {};\r\n\r\n    // length of data table to loop through\r\n    let n = tableData.length;\r\n\r\n    // this checks if the bins generated should be dynamic (generating for each date) or fixed (to the most recent date)\r\n    if (nIndex === null && nProperty === null) {\r\n        // if fixed, get the most recent date\r\n        let tempNIndex = tableData[0][denominator].length-1;\r\n        \r\n        // if the denominator is time series data (eg. deaths / cases this week), make the indices the same (most recent)\r\n        let tempDIndex = dType === 'time-series' ? tableData[0][denominator].length-1 : dIndex;\r\n\r\n        // loop through, do appropriate calculation. add returned value to rtn array\r\n        while (n>0) {\r\n            n--;\r\n            tempDict[tableData[n].properties.GEOID] = dataFn(tableData[n][numerator], tableData[n][denominator], {...dataParams, nIndex:tempNIndex, dIndex: tempDIndex})||0\r\n        }\r\n    } else {\r\n       while (n>0) {\r\n            n--;\r\n            tempDict[tableData[n].properties.GEOID] = dataFn(tableData[n][numerator], tableData[n][denominator], dataParams)||0\r\n        }\r\n    }\r\n    \r\n    let rtn = [];\r\n\r\n    n = 0;\r\n    let keys = Object.keys(order)\r\n    while (n<keys.length) {\r\n        rtn.push(tempDict[order[keys[n]]]);\r\n        n++;\r\n    }\r\n\r\n    return rtn;\r\n    \r\n}\r\nexport default getDataForLisa","const getGeoidIndex = (features) => {\r\n    let geoidOrder = {};\r\n    let indexOrder = {};\r\n    let i = 0\r\n    while (i<features.length) {\r\n        geoidOrder[features[i].properties.GEOID] = i\r\n        indexOrder[i] = features[i].properties.GEOID\r\n        i++;\r\n    }\r\n\r\n    return {geoidOrder, indexOrder};\r\n}\r\nexport default getGeoidIndex","import { getJsonPure, geojsonArrayBuffer } from '../utils';\r\n\r\n// async function getJson(url, gda_proxy){\r\n//     const tempData = await fetch(url).then(response => {\r\n//       const responseFromJson = response.clone();        \r\n//       const data = loadGeojsonToGeoda(responseFromJson, url, gda_proxy).then(\r\n//         () =>\r\n//           {\r\n//             return response.json()\r\n//           }\r\n//       )\r\n//       return data;\r\n//     }).then(data => {\r\n//       console.log('loaded json')\r\n//       return {\r\n//         data: data,\r\n//         geoidIndex: getGeoidIndex(data.features)\r\n//       }\r\n//     });        \r\n//     return tempData;\r\n// }\r\n\r\nconst getJson = async (url) => {\r\n  const response = await getJsonPure(url)\r\n  const responseFromJson = response.clone();        \r\n  const abResponse = await geojsonArrayBuffer(responseFromJson);\r\n  return { response, ab: abResponse }\r\n}\r\n\r\nexport default getJson;\r\n","const getJsonPure = async (url) => {\r\n    const tempData = await fetch(url).then(response => {\r\n      return response //.json();\r\n    })      \r\n    return tempData;\r\n}\r\n\r\nexport default getJsonPure;","const getCurrentWuuid = (gda_proxy, selectedDataset) => {\r\n    var w = gda_proxy.CreateQueenWeights(selectedDataset, 1, 0, 0);\r\n\r\n    return {\r\n      'map_uuid': selectedDataset,\r\n      'w': w,\r\n      'w_uuid': w.get_uid()\r\n    };\r\n}\r\n\r\nexport default getCurrentWuuid","import getCurrentWuuid from './getCurrentWuuid.js';\r\n\r\nconst getLisaValues = (gda_proxy, dataset, data, geoids) => {\r\n  let w = getCurrentWuuid(gda_proxy, dataset);\r\n  let all_zeros = true;\r\n  for (let i=0; i<data.length; ++i) { \r\n    if (data[i] !== 0)\r\n      all_zeros = false;\r\n  }\r\n  let clusters = [];\r\n  let sig = [];\r\n\r\n  if (all_zeros) {\r\n    for (let i=0; i<data.length; ++i) { \r\n      clusters.push(0);\r\n      sig.push(0);\r\n    }\r\n  } else {\r\n    var lisa = gda_proxy.local_moran(w.map_uuid, w.w_uuid, data);\r\n    clusters = gda_proxy.parseVecDouble(lisa.clusters());\r\n    sig = gda_proxy.parseVecDouble(lisa.significances());\r\n  }\r\n  return clusters;\r\n}\r\n\r\nexport default getLisaValues;","import * as d3 from 'd3-dsv';\r\nimport { findDateIndices } from '../utils';\r\n\r\nasync function getParseCSV(url, joinCol, accumulate, dateList){\r\n\r\n  const tempData = await fetch(url)\r\n    .then(response => {\r\n      return response.ok ? response.text() : Promise.reject(response.status);\r\n    }).then(text => {\r\n      let data = d3.csvParse(text, d3.autoType);\r\n      let rtn = {};\r\n      let n = data.length;\r\n      let selectedJoinColumn;\r\n      let dateIndices = null; \r\n\r\n      joinCol.forEach(colOption => {\r\n        if (data[0].hasOwnProperty(colOption)) selectedJoinColumn = colOption;\r\n      })\r\n      if (dateList !== undefined) dateIndices = findDateIndices(dateList, Object.keys(data[0]))\r\n\r\n      if (accumulate) {\r\n        while (n>0){\r\n          n--;\r\n          let i = 0;\r\n          let tempArr = new Array(dateList.length);\r\n          while (i < dateList.length){\r\n            tempArr[i] = (data[n][dateList[i]]||0)+(tempArr[i-1]||0);\r\n            i++;\r\n          }\r\n          rtn[data[n][selectedJoinColumn]] = tempArr\r\n        }\r\n      } else if (dateList !== undefined){\r\n        while (n>0){\r\n          n--;\r\n          let i = 0;\r\n          let tempArr = new Array(dateList.length);\r\n          while (i < dateList.length){\r\n            tempArr[i] = (data[n][dateList[i]]||tempArr[i-1])\r\n            i++;\r\n          }\r\n          rtn[data[n][selectedJoinColumn]] = tempArr\r\n        }\r\n      } else {\r\n        while (n>0){\r\n          n--;\r\n          rtn[data[n][selectedJoinColumn]] = Object.values(data[n])\r\n        }\r\n      }\r\n      return [rtn, Object.keys(data[0]), dateIndices]\r\n    });\r\n  return tempData;\r\n}\r\n\r\nexport default getParseCSV","const getURLParams = (params) => {\r\n    const { dataParams, mapParams, coords, currentData, lastDateIndex } = params;\r\n\r\n    let mapCoords = `?lat=${Math.round(coords.latitude*1000)/1000}&lon=${Math.round(coords.longitude*1000)/1000}&z=${Math.round(coords.zoom*10)/10}`;\r\n    let source = `&src=${currentData.split('.geojson')[0]}`\r\n    let variable = dataParams.variableName !== 'Confirmed Count per 100K Population' ? `&var=${dataParams.variableName.replace(/ /g,\"_\")}` : ''\r\n    let method = mapParams.mapType !== 'natural_breaks' ? `&mthd=${mapParams.mapType}` : '';\r\n    let prop = dataParams.nProperty !== null ? `&propCol=${dataParams.nProperty}` : '';\r\n    let bin = mapParams.binMode !== '' ? '&dbin=True' : ''        \r\n    let date = lastDateIndex !== null && dataParams.nIndex !== lastDateIndex.slice(-1,)[0] ? `&date=${dataParams.nIndex}` : '';\r\n    let dateRange = dataParams.nRange !== 7 && dataParams.nType === 'time-series' ? `&range=${dataParams.nRange}` : ''\r\n    let overlay = mapParams.overlay ? `&ovr=${mapParams.overlay}` : '';\r\n    let resource = mapParams.resource ? `&res=${mapParams.resource}` : '';\r\n    let mapType = mapParams.vizType === \"cartogram\" ? `&viz=cartogram` : mapParams.vizType === '3D' ? '&viz=3D' : '';\r\n  \r\n    return `${mapCoords}${source}${variable}${method}${prop}${bin}${date}${dateRange}${overlay}${resource}${mapType}&v=2`\r\n}\r\n\r\nexport default getURLParams;","const getVarId = (currentData, dataParams) => {\r\n    return `${currentData}-${dataParams.numerator}-${dataParams.nIndex}-${dataParams.nRange}-${dataParams.denominator}-${dataParams.dProperty}-${dataParams.dIndex}-${dataParams.dRange}-${dataParams.scale}`\r\n}\r\n\r\nexport default getVarId;","import { getJson, getGeoidIndex } from '../utils';\r\n\r\nconst loadJson = async (url, gda_proxy) => {\r\nconst data = getJson(url).then(values => {\r\n    gda_proxy.ReadGeojsonMap(url.split('/').slice(-1,)[0], values.ab);\r\n    return values.response.json().then(\r\n    data => {\r\n        return {\r\n        data: data,\r\n        geoidIndex: getGeoidIndex(data.features)\r\n        }\r\n    })\r\n})\r\nreturn data;\r\n}\r\n\r\nexport default loadJson;","const mapFn = (val, bins, colors, maptype, column) => {\r\n  if (val === null) {\r\n    return null;\r\n  } else if (maptype === \"natural_breaks\") {\r\n    if (val === 0 || (val === -1 && column.includes('testing'))) return colors[0];\r\n\r\n    for (let i=1; i<bins.length; i++) {\r\n      if (val < bins[i]) {\r\n        return colors[i]\r\n      }\r\n    }\r\n    return colors[0];\r\n  } else if (maptype.includes(\"hinge\")) {\r\n    \r\n    if (val === null) return [0,0,0,0];\r\n    \r\n    for (let i=1; i<bins.length; i++) {\r\n      if (val < bins[i]) {\r\n        return colors[i-1]\r\n      }\r\n    }\r\n    return colors[0];\r\n  }\r\n}\r\n\r\nexport default mapFn","import { merge } from 'lodash';\r\n\r\nconst mergeData = (featureCollection, featureCollectionJoinCol, joinData, joinDataNames, joinDataCol) => {\r\n    // declare parent dictionaries\r\n    let features = {}\r\n    let dataDict = {}\r\n    \r\n    // declare and prep feature collection object\r\n    let i = featureCollection.features.length;\r\n    let colNumCheck = parseInt(featureCollection.features[0].properties[featureCollectionJoinCol])\r\n    if (Number.isInteger(colNumCheck)) {\r\n      while (i>0) {\r\n        i--;\r\n        features[parseInt(featureCollection.features[i].properties[featureCollectionJoinCol])] = featureCollection.features[i];\r\n        dataDict[parseInt(featureCollection.features[i].properties[featureCollectionJoinCol])] = {};\r\n      }\r\n    } else {\r\n      while (i>0) {\r\n        i--;\r\n        features[featureCollection.features[i].properties[featureCollectionJoinCol]] = featureCollection.features[i];\r\n        dataDict[featureCollection.features[i].properties[featureCollectionJoinCol]] = {};\r\n      }\r\n    }\r\n  \r\n    // // declare data objects\r\n    // for (let n=0; n < joinDataNames.length; n++) {\r\n    //   dataDict[`${joinDataNames[n]}`] = {}\r\n    // }\r\n  \r\n    // loop through data and add to dictionaries\r\n    let n = joinData.length;\r\n    while (n>0) {\r\n      n--;\r\n      let cols = Object.keys(joinData[n][0]);\r\n      i = cols.length;\r\n      while (i>0) {\r\n        i--;\r\n        try {\r\n          dataDict[cols[i]][joinDataNames[n]] = joinData[n][0][cols[i]]\r\n        } catch {}\r\n      }\r\n    }\r\n    \r\n    // // use lodash to merge data\r\n    let merged = merge(features, dataDict)\r\n    // for (let n=1; n < joinDataNames.length; n++){\r\n    //   merged = merge(merged, dataDict[joinDataNames[n]])\r\n    // }\r\n    \r\n    // clean data\r\n    let rtn = [];\r\n    let keys = Object.keys(merged)\r\n    \r\n    for (let i = 0; i < keys.length; i++) {\r\n      // if (Object.keys(merged[keys[i]]).length == (joinDataNames.length+baseColumnLength)) rtn.push(merged[keys[i]])\r\n      rtn.push(merged[keys[i]])\r\n    }\r\n\r\n    return rtn;\r\n}\r\n\r\nexport default mergeData;","// These actions are part of the verbose boilerplate of redux\r\n// As part of the Flux architecture, these connect the dispatch from a component to the reducers\r\n\r\n// set active GEOID \r\n// currently not used\r\nexport const setGeoid = (geoid) => {\r\n    return {\r\n        type: 'SET_GEOID',\r\n        payload: {\r\n            geoid\r\n        }\r\n    }\r\n}\r\n\r\nexport const dataLoad = ( load ) => {\r\n    return {\r\n        type: 'DATA_LOAD',\r\n        payload: {\r\n            load\r\n        }\r\n    }\r\n}\r\n\r\nexport const dataLoadExisting = ( load ) => {\r\n    return {\r\n        type: 'DATA_LOAD_EXISTING',\r\n        payload: {\r\n            load\r\n        }\r\n    }\r\n}\r\n\r\nexport const setNewBins = ( load ) => {\r\n    return {\r\n        type: 'SET_NEW_BINS',\r\n        payload: {\r\n            load\r\n        }\r\n    }\r\n}\r\n\r\n// main store for map and tabular data\r\nexport const storeData = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// store GEOJSON and pseudo-hash table\r\nexport const storeGeojson = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_GEOJSON',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\nexport const storeMobilityData = (data) => {\r\n    return {\r\n        type: 'SET_STORED_MOBILITY_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// store lisa values with specific variable combination\r\nexport const storeLisaValues = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_LISA_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// store cartogra data, just like lisa\r\nexport const storeCartogramData = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_CARTOGRAM_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// sets the name of the current data set, usually a geojson\r\nexport const setCurrentData = (data) => {\r\n    return {\r\n        type: 'SET_CURRENT_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- this stored the Geoda Proxy, but was a bad idea\r\nexport const setGeodaProxy = (proxy) => {\r\n    return {\r\n        type: 'SET_GEODA_PROXY',\r\n        payload: {\r\n            proxy\r\n        }\r\n    }\r\n}\r\n\r\n// stores parsed centroid data \r\nexport const setCentroids = (data, name) => {\r\n    return {\r\n        type: 'SET_CENTROIDS',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// stores valid dates in current data set\r\nexport const setDates = (data) => {\r\n    return {\r\n        type: 'SET_DATES',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- stores the current data parsing function in the store\r\nexport const setDataFunction = (fn) => {\r\n    return {\r\n        type: 'SET_DATA_FUNCTION',\r\n        payload: {\r\n            fn\r\n        }\r\n    }\r\n}\r\n\r\n// stores a pseudo-hash table or lookup table\r\n// the data attached to the geojson is stored in arrays / list,\r\n// so a lookup table is needed to find the key-value pairs\r\nexport const setColumnNames = (data, name) => {\r\n    return {\r\n        type: 'SET_COLUMN_NAMES',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// sets the current date as text\r\n// export const setDate = (date) => {\r\n//     return {\r\n//         type: 'SET_CURR_DATE',\r\n//         payload: {\r\n//             date\r\n//         }\r\n//     }\r\n// }\r\n\r\n// sets the index of the date within the current dataset(s)\r\nexport const setDateIndex = (index) => {\r\n    return {\r\n        type: 'SET_DATE_INDEX',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// the first valid date in the main data columns (cases, deaths, etc.)\r\nexport const setStartDateIndex = (index) => {\r\n    return {\r\n        type: 'SET_START_DATE_INDEX',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// stores the current bins (bin names / descriptions)\r\n// and breaks (numerical breaks)\r\nexport const setBins = (bins, breaks) => {\r\n    return {\r\n        type: 'SET_BINS',\r\n        payload: {\r\n            bins,\r\n            breaks\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- set map to 3d\r\nexport const set3D = () => {\r\n    return {\r\n        type: 'SET_3D'\r\n    }\r\n}\r\n\r\n// loads data for the data/info sidebar\r\nexport const setDataSidebar = ( data ) => {\r\n    return {\r\n        type: 'SET_DATA_SIDEBAR',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// increments the date by 1, for use with the animation\r\nexport const incrementDate = ( index ) => {\r\n    return {\r\n        type: 'INCREMENT_DATE',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// sets the variables parameters (index and range, numerator, denominator, etc.)\r\nexport const setVariableParams = ( params ) => {\r\n    return {\r\n        type: 'SET_VARIABLE_PARAMS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\nexport const setParametersAndData = ( params ) => {\r\n    return {\r\n        type: 'SET_VARIABLE_PARAMS_AND_DATASET',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// change the Z axis variable for bi-variate 3D views\r\nexport const variableChangeZ = ( variable, params ) => {\r\n    return {\r\n        type: 'SET_Z_VARIABLE_PARAMS',\r\n        payload: {\r\n            variable,\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\n// sets the map parameters (color mode, viz type, etc.)\r\nexport const setMapParams = ( params ) => {\r\n    return {\r\n        type: 'SET_MAP_PARAMS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\n// loads in chart data from current data\r\nexport const setSelectionData = ( data ) => {\r\n    return {\r\n        type: 'SET_SELECTION_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// adds to current chart data from current data\r\nexport const appendSelectionData = ( data ) => {\r\n    return {\r\n        type: 'APPEND_SELECTION_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// removes from current chart data from current data\r\nexport const removeSelectionData = ( data ) => {\r\n    return {\r\n        type: 'REMOVE_SELECTION_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// sets current text-based variable name (eg. Death Count)\r\nexport const setVariableName = ( name ) => {\r\n    return {\r\n        type: 'SET_VARIABLE_NAME',\r\n        payload: {\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// sets the anchor element for the inforational tooltip\r\nexport const setAnchorEl = ( anchorEl ) => {\r\n    return {\r\n        type: 'SET_ANCHOR_EL',\r\n        payload: {\r\n            anchorEl\r\n        }\r\n    }\r\n}\r\n\r\n// sets the left, right, and dock panel states\r\nexport const setPanelState = ( params ) => {\r\n    return {\r\n        type: 'SET_PANELS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\nexport const setMapLoaded = ( loaded ) => {\r\n    return {\r\n        type: 'SET_MAP_LOADED',\r\n        payload: {\r\n            loaded\r\n        }\r\n    }\r\n}\r\n\r\nexport const setNotification = ( info ) => {\r\n    return {\r\n        type: 'SET_NOTIFICATION',\r\n        payload: {\r\n            info\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUrlParams = ( urlParams, presets ) => {\r\n    return {\r\n        type: 'SET_URL_PARAMS',\r\n        payload: {\r\n            urlParams,\r\n            presets\r\n        }\r\n    }\r\n}","export const colorScales = {\r\n    'natural_breaks': [\r\n        [240,240,240],\r\n        [255,255,204],\r\n        [255,237,160],\r\n        [254,217,118],\r\n        [254,178,76],\r\n        [253,141,60],\r\n        [252,78,42],\r\n        [227,26,28],\r\n        [177,0,38],\r\n    ],\r\n    'lisa': [\r\n        [255,255,255],\r\n        [255,0,0],\r\n        [0,0,255],\r\n        [167, 173, 249],\r\n        [244, 173, 168],\r\n        // [70, 70, 70],\r\n        // [153, 153, 153]\r\n    ],\r\n    'hinge15_breaks': [\r\n        [1, 102, 94],\r\n        [90, 180, 172],\r\n        [199, 234, 229],\r\n        [246, 232, 195],\r\n        [216, 179, 101],\r\n        [140, 81, 10],\r\n    ],    \r\n    'uninsured':[\r\n        [240,240,240],\r\n        [247,252,253],\r\n        [224,236,244],\r\n        [191,211,230],\r\n        [158,188,218],\r\n        [140,150,198],\r\n        [140,107,177],\r\n        [136,65,157],\r\n        [129,15,124],\r\n        // [77,0,75],\r\n      ],\r\n    'over65':[\r\n        [240,240,240],\r\n        [247,252,240],\r\n        [224,243,219],\r\n        [204,235,197],\r\n        [168,221,181],\r\n        [123,204,196],\r\n        [78,179,211],\r\n        [43,140,190],\r\n        [8,104,172],\r\n        // [8,64,129],\r\n    ],\r\n    'lifeExp':[\r\n        [240,240,240],\r\n        [247,252,240],\r\n        [224,243,219],\r\n        [204,235,197],\r\n        [168,221,181],\r\n        [123,204,196],\r\n        [78,179,211],\r\n        [43,140,190],\r\n        [8,104,172],\r\n        // [8,64,129],\r\n    ],\r\n    'forecasting': [\r\n        [239, 239, 239],\r\n        [254,232,200],\r\n        [253,187,132],\r\n        [227,74,51],\r\n    ],\r\n    'testing' : [\r\n        [240,240,240],\r\n        [13,8,135],\r\n        [92,1,166],\r\n        [156,23,158],\r\n        [203,70,121],\r\n        [237,121,83],\r\n        [253,180,47],\r\n        [240,249,33],\r\n      ],\r\n      'testingCap':[\r\n        [240,240,240],\r\n        [247,251,255],\r\n        [222,235,247],\r\n        [198,219,239],\r\n        [158,202,225],\r\n        [107,174,214],\r\n        [66,146,198],\r\n        [33,113,181],\r\n        [8,81,156],\r\n        [8,48,107],\r\n      ],\r\n      'BuPu8':[\r\n        [247,252,253],\r\n        [224,236,244],\r\n        [191,211,230],\r\n        [158,188,218],\r\n        [140,150,198],\r\n        [140,107,177],\r\n        [136,65,157],\r\n        [110,1,107],\r\n      ],\r\n      'purpleSingleHue8':[\r\n        [240,240,240],\r\n        [252, 251, 253],\r\n        [238, 236, 245],\r\n        [217, 216, 234],\r\n        [188, 188, 219],\r\n        [158, 155, 201],\r\n        [129, 123, 185],\r\n        [106, 81, 164],\r\n        [84, 40, 143],\r\n      ],\r\n      'greenSingleHue8': [\r\n        [240,240,240],\r\n        [247,252,245],\r\n        [229,245,224],\r\n        [199,233,192],\r\n        [161,217,155],\r\n        [116,196,118],\r\n        [65,171,93],\r\n        [35,139,69],\r\n        [0,90,50],\r\n      ]\r\n}\r\n\r\nexport const fixedScales = {\r\n    'testing': {\r\n        bins: ['No Data','<3%','5%','10%','15%','20%','>25%'],\r\n        breaks:[0,.03,.05,.10,.15,.20,.25,Math.pow(10, 12)]\r\n    },\r\n    'testingCap': {\r\n        bins: ['No Data','<50','100','150','200','250','300','350','>400'],\r\n        breaks:[0,50,100,150,200,250,300,350,400,Math.pow(10, 12)]\r\n    },\r\n    'lisa':{\r\n        bins: [\"Not significant tooltip:NotSig\", \"High-High tooltip:HighHigh\", \"Low-Low tooltip:LowLow\", \"Low-High  tooltip:LowHigh\", \"High-Low  tooltip:HighLow\"] //\"Undefined\", \"Isolated\"\r\n    },\r\n    'forecasting': {\r\n        bins: ['N/A','Low', 'Medium', 'High'],\r\n        breaks:[1,2,3,4]\r\n\r\n    }\r\n}\r\n\r\nexport const colors = {\r\n    white: '#ffffff',\r\n    black: '#00000',\r\n    darkgray:'#1a1a1a',\r\n    gray:'#2b2b2b',\r\n    buttongray: '#f5f5f5',\r\n    lightgray: '#d8d8d8',\r\n    yellow: '#FFCE00',\r\n    lightblue: '#A1E1E3',\r\n    pairedColors: {\r\n        count: [\r\n            '#1f78b4',\r\n            '#33a02c',\r\n            '#e31a1c',\r\n            '#ff7f00',\r\n            '#6a3d9a',\r\n            '#b15928'\r\n        ],\r\n        sum: [\r\n            '#a6cee3',\r\n            '#b2df8a',\r\n            '#fb9a99',\r\n            '#fdbf6f',\r\n            '#cab2d6',\r\n            '#ffff99'\r\n        ]\r\n    },\r\n    qualtitiveScale: [\r\n        '#8dd3c7',\r\n        '#ffffb3',\r\n        '#bebada',\r\n        '#fb8072',\r\n        '#80b1d3',\r\n        '#fdb462',\r\n        '#b3de69',\r\n        '#fccde5',\r\n        '#d9d9d9',\r\n        '#bc80bd',\r\n        '#ccebc5',\r\n        '#ffed6f',\r\n    ]\r\n}\r\n\r\nexport const defaultData = 'county_usfacts.geojson';\r\n\r\nexport const dataPresets = {\r\n    'county_usfacts.geojson': {\r\n        plainName: 'USA Facts County',\r\n        geojson: 'county_usfacts.geojson', \r\n        csvs: ['covid_confirmed_usafacts','covid_deaths_usafacts', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS']], \r\n        tableNames: ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors',],\r\n        accumulate: [],\r\n        dateList: {'covid_confirmed_usafacts': 'usDateList', 'covid_deaths_usafacts': 'usDateList'}\r\n    },\r\n    'county_1p3a.geojson': {\r\n        plainName: '1Point3Acres County',\r\n        geojson: 'county_1p3a.geojson', \r\n        csvs: ['covid_confirmed_1p3a','covid_deaths_1p3a', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS', 'GEOID']], \r\n        tableNames: ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: ['covid_confirmed_1p3a','covid_deaths_1p3a'],\r\n        dateList: {'covid_confirmed_1p3a': 'isoDateList', 'covid_deaths_1p3a': 'isoDateList'}\r\n    },\r\n    'county_nyt.geojson': {\r\n        plainName: 'New York Times County',\r\n        geojson: 'county_nyt.geojson', \r\n        csvs: ['covid_confirmed_nyt', 'covid_deaths_nyt', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS']], \r\n        tableNames: ['cases', 'deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: [],\r\n        dateList: {'covid_confirmed_nyt': 'isoDateList', 'covid_deaths_nyt': 'isoDateList'}\r\n    },\r\n    'state_1p3a.geojson': {\r\n        plainName: '1Point3Acres State',\r\n        geojson: 'state_1p3a.geojson', \r\n        csvs: ['covid_confirmed_1p3a_state','covid_deaths_1p3a_state', 'chr_health_context_state', 'chr_life_state', 'chr_health_factors_state', 'covid_testing_1p3a_state', 'covid_wk_pos_1p3a_state', 'covid_tcap_1p3a_state', 'covid_ccpt_1p3a_state', 'vaccine_admin1_cdc', 'vaccine_admin2_cdc', 'vaccine_dist_cdc'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS', 'GEOID']], \r\n        tableNames: ['cases', 'deaths', 'chr_health_context', 'chr_life', 'chr_health_factors', 'testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt', 'vaccinesAdmin1', 'vaccinesAdmin2', 'vaccinesDist'],\r\n        accumulate: ['covid_confirmed_1p3a_state','covid_deaths_1p3a_state'],\r\n        dateList: {\r\n            'covid_confirmed_1p3a_state': 'isoDateList', \r\n            'covid_deaths_1p3a_state': 'isoDateList', \r\n            'covid_testing_1p3a_state': 'isoDateList', \r\n            'covid_wk_pos_1p3a_state': 'isoDateList', \r\n            'covid_tcap_1p3a_state': 'isoDateList', \r\n            'covid_ccpt_1p3a_state': 'isoDateList', \r\n            'vaccine_admin1_cdc': 'isoDateList', \r\n            'vaccine_admin2_cdc': 'isoDateList', \r\n            'vaccine_dist_cdc': 'isoDateList'\r\n        }\r\n    },\r\n    'state_usafacts.geojson': {\r\n        plainName: 'USA Facts State',\r\n        geojson: 'state_usafacts.geojson', \r\n        csvs: ['covid_confirmed_usafacts_state','covid_deaths_usafacts_state', 'chr_health_context_state', 'chr_life_state', 'chr_health_factors_state', 'covid_testing_usafacts_state', 'covid_wk_pos_usafacts_state', 'covid_tcap_usafacts_state', 'covid_ccpt_usafacts_state'], \r\n        joinCols: ['GEOID', ['FIPS','fips','stateFIPS']], \r\n        tableNames: ['cases', 'deaths', 'chr_health_context', 'chr_life', 'chr_health_factors', 'testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt'],\r\n        accumulate: [],\r\n        dateList: {'covid_confirmed_usafacts_state': 'usDateList', 'covid_deaths_usafacts_state': 'usDateList'}\r\n    },\r\n    'state_nyt.geojson': {\r\n        plainName: 'New York Times State',\r\n        geojson: 'state_nyt.geojson', \r\n        csvs: ['covid_confirmed_nyt_state','covid_deaths_nyt_state', 'chr_health_context_state', 'chr_life_state', 'chr_health_factors_state', 'covid_testing_1p3a_state', 'covid_wk_pos_1p3a_state', 'covid_tcap_1p3a_state', 'covid_ccpt_1p3a_state', 'vaccine_admin_cdc', 'vaccine_dist_cdc'], \r\n        joinCols: ['GEOID', ['FIPS','fips','countyFIPS']], \r\n        tableNames: ['cases', 'deaths', 'chr_health_context', 'chr_life', 'chr_health_factors', 'testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt','vaccinesAdmin', 'vaccinesDist'],\r\n        accumulate: [],\r\n        dateList: {'covid_confirmed_nyt_state': 'isoDateList', 'covid_deaths_nyt_state': 'isoDateList'}\r\n    },\r\n    'global_jhu.geojson': {\r\n        plainName: 'John Hopkins University (Global)',\r\n        geojson: 'global_jhu.geojson', \r\n        csvs: ['covid_confirmed_jhu','covid_deaths_jhu'], \r\n        joinCols: ['GEOID', ['UID']], \r\n        tableNames: ['cases', 'deaths'],\r\n        accumulate: []\r\n    },\r\n    'cdc.geojson': {\r\n        plainName: 'Center for Disease Control County',\r\n        geojson: 'cdc.geojson', \r\n        csvs: ['covid_confirmed_usafacts','covid_deaths_usafacts','berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors','covid_testing_cdc','covid_wk_pos_cdc', 'covid_tcap_cdc', 'covid_ccpt_cdc'], \r\n        joinCols: ['GEOID', ['fips_code', 'fips', 'FIPS', 'countyFIPS']], \r\n        tableNames: ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors','testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt'],\r\n        accumulate: [],\r\n        dateList: {'covid_confirmed_usafacts': 'usDateList', 'covid_deaths_usafacts': 'usDateList','covid_testing_cdc': 'isoDateList', 'covid_wk_pos_cdc': 'isoDateList', 'covid_tcap_cdc': 'isoDateList', 'covid_ccpt_cdc': 'isoDateList'}\r\n    }\r\n}\r\n\r\nexport const tooltipInfo = {\r\n    Choropleth: <p>A thematic map used to represent data through various shading patterns on predetermined geographic areas (counties, state).</p>,\r\n    NaturalBreaksFixed: <p>A nonlinear algorithm used to group observations such that the within-group homogeneity is maximized for the latest date, bins fixed over time</p>,\r\n    NaturalBreaks: <p>A nonlinear algorithm used to group observations such that the within-group homogeneity is maximized for every day, bins change over time</p>,\r\n    BoxMap: <p>Mapping counterpart of the idea behind a box plot</p>,\r\n    Hotspot: <p>A map showing statisically significant spatial cluster and outlier locations, color coded by type.</p>,\r\n    LocalMoran: <p>Local Moran used to identify local clusters and outliers</p>,\r\n    NotSig:\t<p>Area was not statistically signficant as a spatial cluster core or outlier using given parameters.</p>,\r\n    HighHigh: <p>Hot Spot Cluster: area with high values, neighbored by areas with high values</p>,\r\n    LowLow: <p>Cold Spot Cluster: area with low values, neighbored by areas with low values</p>,\r\n    HighLow: <p>Hot Outlier: area with high values, neighbored by areas with low values</p>,\r\n    LowHigh: <p>Low-High\tCold Outlier: area with low values, neighbored by areas with high values</p>,\r\n    PovChldPrc: <p>Percentage of children under age 18 living in poverty</p>,\r\n    IncRt: <p>Ratio of household income at the 80th percentile to income at the 20th percentile</p>,\r\n    MedianHouseholdIncome: <p>The income where half of households in a county earn more and half of households earn less</p>,\r\n    FdInsPrc: <p>Percentage of population who lack adequate access to food</p>,\r\n    UnEmplyPrc: <p>Percentage of population age 16 and older unemployed but seeking work</p>,\r\n    UnInPrc: <p>Percentage of people under age 65 without insurance</p>,\r\n    PrmPhysRt: <p>Ratio of population to primary care physicians</p>,\r\n    PrevHospRt: <p>Rate of hospital stays for ambulatory-care sensitive conditions per 100,000 Medicare enrollees</p>,\r\n    RsiSgrBlckRt: <p>Index of dissimilarity where higher values indicate greater residential segregation between Black and White county residents</p>,\r\n    SvrHsngPrbRt: <p>Percentage of households with at least 1 of 4 housing problems: overcrowding, high housing costs, lack of kitchen facilities, or lack of plumbing facilities</p>,\r\n    Over65YearsPrc: <p>Percentage of people ages 65 and older</p>,\r\n    AdObPrc: <p>Percentage of the adult population (age 20 and older) that reports a body mass index (BMI) greater than or equal to 30 kg/m2</p>,\r\n    AdDibPrc: <p>Percentage of adults aged 20 and above with diagnosed diabetes</p>,\r\n    SmkPrc: <p>Percentage of adults who are current smokers</p>,\r\n    ExcDrkPrc: <p>Percentage of adults reporting binge or heavy drinking</p>,\r\n    DrOverdMrtRt: <p>Number of drug poisoning deaths per 100,000 population</p>,\r\n    LfExpRt: <p>Average number of years a person can expect to live</p>,\r\n    SlfHlthPrc: <p>Percentage of adults reporting fair or poor health</p>,\r\n    SeverityIndex: <p>Indicates the severity of the local covid-19 outbreak, based on cumulative and predicted deaths</p>,\r\n    PredictedDeaths: <p>Predicted number of deaths for a county</p>,\r\n    PredictedDeathsInterval: <p>Margin of error for predicted death counts for a county </p>,\r\n    healthfactor:<p>Health factors represent those things we can modify to improve community conditions and the length and quality of life for residents</p>,\r\n    healthcontext: <p>Community Health Context reflects the existing health behaviors and demographics of individuals in the community that are influenced by the opportunities to live long and well</p>,\r\n    healthlife:<p>Length and Quality of Life reflects the physical and mental well-being of residents within a community through measures representing how long and how well residents live</p>,\r\n    Hypersegregated: <p>American metropolitan areas where black residents experience hypersegregation, see <a href=\"https://www.princeton.edu/news/2015/05/18/hypersegregated-cities-face-tough-road-change\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n    BlackBelt: <p>Southern US counties that were at least 40% Black or African American in the 2000 Census, see <a href=\"https://en.wikipedia.org/wiki/Black_Belt_in_the_American_South\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n    TestingCapacity: <p>New screening (e.g., antigen) and diagnostic (e.g., PCR) testing per capita rates by date. The suggested threshold is >150 daily tests per 100k people.</p>,\r\n    USCongress: <p>Find your representative <a href=\"https://www.govtrack.us/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n    BinModes: <p>Fixed bins represent data relative to the most recent date and show a consistent color scale.<br/> Dynamic bins change over time and generate new color scales based on the selected date.</p>,\r\n    Clinics: <p>FQHC or <a href=\"https://www.hrsa.gov/opa/eligibility-and-registration/health-centers/fqhc/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Federal Qualified Health Centers</a> are community based health providers receiving funds and certification from <a href=\"https://www.hrsa.gov/\" target=\"_blank\" rel=\"noopener noreferrer\">HRSA</a>.</p>,\r\n    Hospitals: <p>Hospital location data from <a href=\"https://github.com/covidcaremap/covid19-healthsystemcapacity\" target=\"_blank\" rel=\"noopener noreferrer\">CovidCareMap.</a></p>,\r\n    ClinicsAndHospitals: <p>Hospital location data from <a href=\"https://github.com/covidcaremap/covid19-healthsystemcapacity\" target=\"_blank\" rel=\"noopener noreferrer\">CovidCareMap</a> and HRSA data on <a href=\"https://www.hrsa.gov/opa/eligibility-and-registration/health-centers/fqhc/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Federal Qualified Health Centers.</a></p>,\r\n};\r\n\r\nexport const variablePresets = {\r\n    \"HEADER:cases\":{},\r\n    \"Confirmed Count\": {\r\n        variableName:\"Confirmed Count\",\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: null,\r\n        dProperty: null,\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1,\r\n        scale3D: 100,\r\n        fixedScale: null,\r\n        colorScale: null,\r\n    },\r\n    \"Confirmed Count per 100K Population\": {\r\n        variableName:\"Confirmed Count per 100K Population\",\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000,\r\n        scale3D: 1000,\r\n        fixedScale: null,\r\n        colorScale: null,\r\n    },\r\n    \"Confirmed Count per Licensed Bed\": {\r\n        variableName:\"Confirmed Count per Licensed Bed\",\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'beds',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1,\r\n        scale3D: 100000,\r\n        fixedScale: null,\r\n        colorScale: null,\r\n    },\r\n    \"HEADER:deaths\":{},\r\n    \"Death Count\":{\r\n      variableName:\"Death Count\",\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      scale3D: 10000,\r\n      fixedScale: null,\r\n      colorScale: null,        \r\n    }, \r\n    \"Death Count per 100K Population\":{\r\n      variableName:\"Death Count per 100K Population\",\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: 'characteristic',\r\n      dProperty: 'population',\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:100000,\r\n      scale3D: 15000,\r\n      fixedScale: null,\r\n      colorScale: null,\r\n    },\r\n    \"Death Count / Confirmed Count\":{\r\n      variableName:\"Death Count / Confirmed Count\",\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'cases',\r\n      dType: 'time-series',\r\n      dProperty: null,\r\n      scale:1,\r\n      fixedScale: null,\r\n      colorScale: null,\r\n    },\r\n    \"HEADER:community health\":{},\r\n    \"Uninsured %\":{\r\n      variableName:\"Uninsured %\",\r\n      numerator: 'chr_health_factors',\r\n      nType: 'characteristic',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: null,\r\n      colorScale: 'uninsured',\r\n      scale3D: 15000,\r\n    },\r\n    \"Over 65 Years %\":{\r\n      variableName:\"Over 65 Years %\",\r\n      numerator: 'chr_health_context',\r\n      nType: 'characteristic',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: null,\r\n      colorScale: 'over65',\r\n      scale3D: 15000,\r\n    },\r\n    \"Life Expectancy\":{\r\n      variableName:\"Life Expectancy\",\r\n      numerator: 'chr_life',\r\n      nType: 'characteristic',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'lifeExp',\r\n      fixedScale: null,\r\n      scale3D: 1000\r\n    },\r\n    \r\n    \"HEADER:testing\":{},\r\n    \"7 Day Testing Positivity Rate %\": {\r\n      variableName:\"7 Day Testing Positivity Rate %\",\r\n      numerator: 'testing_wk_pos',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testing',\r\n      colorScale: 'testing',\r\n      scale3D: 10000000\r\n    },\r\n    \"7 Day Testing Capacity\": {\r\n      variableName:\"7 Day Testing Capacity\",\r\n      numerator: 'testing_tcap',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testingCap',\r\n      colorScale: 'testingCap',\r\n      scale3D: 3000\r\n    }, \r\n    \"7 Day Confirmed Cases per Testing %\":{\r\n      variableName:\"7 Day Confirmed Cases per Testing %\",\r\n      numerator: 'testing_ccpt',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testing',\r\n      colorScale: 'testing',\r\n      scale3D: 10000000\r\n    },\r\n    \"HEADER:cdc vaccination\":{},\r\n    \"Vaccinations Administered per 100K Population\": {\r\n        variableName:\"Vaccinations Administered per 100K Population\",\r\n        numerator: 'vaccinesAdmin',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000,\r\n        scale3D: 1000,\r\n        colorScale: 'vaccination',\r\n        fixedScale: null,\r\n    },\r\n    \"Vaccinations Distributed per 100K Population\": {\r\n        variableName:\"Vaccinations Distributed per 100K Population\",\r\n        numerator: 'vaccinesDist',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000,\r\n        scale3D: 1000,\r\n        colorScale: 'vaccination',\r\n        fixedScale: null,\r\n    },\r\n    \r\n    \"HEADER:cdc vaccination\":{},\r\n    \"% Received First Dose\": {\r\n        variableName:\"% Received First Dose\",\r\n        numerator: 'vaccinesAdmin1',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        nRange: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100,\r\n        scale3D: 1000,\r\n        colorScale: 'vaccination',\r\n        fixedScale: null,\r\n    },\r\n    \"% Received Second Dose\": {\r\n        variableName:\"% Received Second Dose\",\r\n        numerator: 'vaccinesAdmin2',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        nRange: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100,\r\n        scale3D: 1000,\r\n        colorScale: 'vaccination',\r\n        fixedScale: null,\r\n    },\r\n    \"Doses Available per 100K Population\": {\r\n        variableName:\"Doses Available per 100K Population\",\r\n        numerator: 'vaccinesDist',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        nRange: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000,\r\n        scale3D: 1000,\r\n        colorScale: 'vaccination',\r\n        fixedScale: null,\r\n    },\r\n    \"HEADER:forecasting\":{},\r\n    \"Forecasting (5-Day Severity Index)\": {\r\n      variableName:\"Forecasting (5-Day Severity Index)\",\r\n      numerator: 'predictions',\r\n      nType: 'characteristic',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'forecasting',\r\n      fixedScale: 'forecasting',\r\n      scale3D: 50000\r\n    },\r\n}\r\n  ","// this components houses the slider, legend, and bottom dock chart\r\nimport React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { Legend } from '../components';\r\nimport { colors } from '../config';\r\n\r\n// helper function to get dock offset\r\nconst getChartHeight = () => { try { return document.querySelector('#main-chart-container').offsetHeight} catch { return 0} }\r\n\r\n// Styled components\r\nconst BottomDrawer = styled.div`\r\n    position: fixed;\r\n    bottom:0;\r\n    left:50%;\r\n    background:${colors.gray};\r\n    transform:translateX(-50%);\r\n    width:38vw;\r\n    max-width: 500px;\r\n    box-sizing: border-box;\r\n    padding:0 0 5px 0;\r\n    margin:0;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0.5vh 0.5vh 0 0;\r\n    transition:250ms all;\r\n    hr {\r\n        opacity:0.5;\r\n    }\r\n    @media (max-width:1024px){\r\n        width:50vw;\r\n        div {\r\n            padding-bottom:5px;\r\n        }\r\n        #binModeSwitch {\r\n            position:absolute !important;\r\n            right: 10px !important;\r\n            top: 10px !important;\r\n        }\r\n        #dateRangeSelector {\r\n            position:absolute !important;\r\n            left: 66% !important;\r\n            transform:translateX(-50%) !important;\r\n            top: 10px !important;\r\n        }\r\n    }\r\n    \r\n    @media (max-width:768px){\r\n    \r\n        width:100%;\r\n        max-width:100%;\r\n        padding:0;\r\n        left:0;\r\n        transform:none;\r\n    }\r\n    @media (max-width:750px) and (orientation: landscape) {\r\n        // bottom all the way down for landscape phone\r\n    }\r\n`\r\n\r\nconst BottomPanel = () => {\r\n\r\n    const panelState = useSelector(state => state.panelState);\r\n\r\n    // offset for the bottom panel based on the chart height, \r\n    // managed through props via styled-components\r\n    const [bottomMargin, setBottomMargin] = useState(0);\r\n\r\n    const handleResize = () => setBottomMargin(getChartHeight())\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    return (\r\n        <BottomDrawer bottom={panelState.chart ? 0 : bottomMargin } id=\"bottomPanel\">\r\n            <Legend />\r\n            {/* <DateSlider /> */}\r\n            {/* <hr />\r\n            <MainLineChart />\r\n            <OpenCloseButton onClick={handleBottomOpen} bottom={panelState.chart ? 5 : bottomMargin}>\r\n                <svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                        <path d=\"M38,33.8L23.9,47.9c-1.2,1.2-1.2,3.1,0,4.2L38,66.2l4.2-4.2l-9-9H71v17c0,0.6-0.4,1-1,1H59v6h11\r\n                        c3.9,0,7-3.1,7-7V30c0-3.9-3.1-7-7-7H59v6h11c0.6,0,1,0.4,1,1v17H33.2l9-9L38,33.8z\"/>\r\n                    </g>\r\n                </svg>\r\n                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                    <g>\r\n                        <path d=\"M52.5,21.4c-1.9,0-3.6,1.3-4.1,3.1L37.9,63.7l-6.4-11.1c-1.2-2-3.7-2.7-5.7-1.5c-0.3,0.2-0.6,0.4-0.9,0.7\r\n                            L10.1,66.6c-1.7,1.6-1.7,4.2-0.2,5.9c1.6,1.7,4.2,1.7,5.9,0.2c0.1,0,0.1-0.1,0.1-0.1L27,61.5l8.7,15.1c1.2,2,3.7,2.7,5.7,1.5\r\n                            c0.9-0.6,1.6-1.5,1.9-2.5l9.1-33.9l4.6,17.2c0.6,2.2,2.9,3.5,5.1,2.9c1.1-0.3,2-1,2.5-1.9l10.4-18l8.9,9.4c1.6,1.7,4.2,1.8,5.9,0.3\r\n                            s1.8-4.2,0.3-5.9c0,0-0.1-0.1-0.1-0.1L77.3,32.1c-1.6-1.7-4.2-1.8-5.9-0.2c-0.3,0.3-0.6,0.6-0.8,1L62.5,47l-6-22.5\r\n                            C56,22.7,54.4,21.4,52.5,21.4L52.5,21.4z\"/>\r\n                    </g>\r\n                </svg>\r\n\r\n            </OpenCloseButton> */}\r\n        </BottomDrawer>\r\n    )\r\n\r\n}\r\n\r\nexport default BottomPanel","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setAnchorEl } from '../actions';\r\n\r\nconst TooltipContainer = styled.button`\r\n    width:12.5px;\r\n    height:12.5px;\r\n    background:url('${process.env.PUBLIC_URL}/assets/img/info.png');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    outline:none;\r\n    border:none;\r\n    padding:0;\r\n    margin:0 4px;\r\n    transform:translateY(2px);\r\n    display:inline-grid;\r\n`\r\n\r\nconst Tooltip = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleMouseOver = (event) => {\r\n        dispatch(setAnchorEl(event.currentTarget))\r\n    }\r\n\r\n    const handleMouseLeave = () => {\r\n        dispatch(setAnchorEl(null))\r\n    }\r\n\r\n    return (\r\n        <TooltipContainer id={props.id} key={props.id} onMouseEnter={handleMouseOver} onMouseLeave={handleMouseLeave} />\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React from 'react';\r\nimport {\r\n    LineChart, Line, YAxis\r\n} from 'recharts';\r\nimport styled from 'styled-components';\r\nimport * as d3 from 'd3-scale';\r\n\r\nconst LineContainer = styled.div`\r\n    display:inline;\r\n    padding:0;\r\n    margin:0;\r\n    align-self:flex-start;\r\n`\r\n\r\nconst CustomizedDot = (props) => {\r\n    const {\r\n      cx, cy, index, color, angle\r\n    } = props;\r\n    if (index === 13) {\r\n      return (\r\n        <svg x={cx - 10} y={cy - 10} width={20} height={20} fill={color} viewBox=\"0 0 500 500\" >\r\n\t\t    <polygon points=\"50,125 50,375 375,250\" transform={`rotate(${angle} 250 250)`}  />\r\n\t  </svg>\r\n      );\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\nconst TwoWeekLineChart = ( props ) => {\r\n    \r\n    // map data into object\r\n    let data = props.data.map(d => {\r\n        return {val: d/props.data[0]}\r\n    })\r\n    \r\n    let schemas = {\r\n        'cases/deaths': ['green', 'yellow', 'red'],\r\n        'testingCap': ['#f7fbff', '#f7fbff', '#08306b'],\r\n        'testingPos': ['#0d0887', '#cb4679', '#f0f921'],\r\n        'vaccination': ['#fcfbfd', '#bcbcdb', '#54288f'],\r\n    }\r\n    \r\n    // colors derived from green - yellow - red diverging scale\r\n    const colorScale = d3.scaleLinear()\r\n        .domain([0, 0.5, 1])\r\n        .range(schemas[props.schema])\r\n\r\n    // change over past two weeks\r\n    const delta = props.data[13] - props.data[0]\r\n\r\n    const lineColor = (delta, start) => {\r\n        let pctChange = delta/start\r\n        return colorScale(pctChange + 0.5);\r\n    }\r\n\r\n    const calcAngle = (delta, start) => {\r\n        let pctChange = delta/start;\r\n        if (pctChange >= 0.5) {\r\n            return -60\r\n        } else if (pctChange <= -0.5) {\r\n            return 60\r\n        } else { \r\n            return pctChange*-1*60\r\n        }\r\n    }\r\n\r\n    return (\r\n        <LineContainer>\r\n            <LineChart data={data} width={60} height={30}>\r\n                <YAxis domain={['dataMin', 'dataMax']}  hide={true} />\r\n                <Line \r\n                    type=\"linear\" \r\n                    dataKey=\"val\" \r\n                    stroke={lineColor(delta, props.data[0])}\r\n                    strokeWidth={2} \r\n                    isAnimationActive={false}\r\n                    dot={\r\n                        <CustomizedDot color={lineColor(delta, props.data[0])} angle={calcAngle(props.data[12] - props.data[10], props.data[12])} />\r\n                        }\r\n                />\r\n            </LineChart>\r\n        </LineContainer>\r\n    );\r\n}\r\n\r\nexport default TwoWeekLineChart;\r\n  ","export const compact = <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 19.6 32\">\r\n        <path d=\"M1,0h17.6c0.6,0,1,0.5,1,1v3.1c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V1C0,0.5,0.4,0,1,0z\"/>\r\n        <path d=\"M1,9h17.6c0.6,0,1,0.5,1,1v3.1c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V10C0,9.4,0.4,9,1,9z\"/>\r\n        <path d=\"M1,17.9h17.6c0.6,0,1,0.5,1,1V22c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1v-3.1C0,18.4,0.4,17.9,1,17.9z\"/>\r\n        <path d=\"M1,26.9h17.6c0.6,0,1,0.5,1,1V31c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1v-3.1C0,27.3,0.4,26.9,1,26.9z\"/>\r\n    </svg>\r\n\r\nexport const expand = <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 19.6 32\" >\r\n        <path d=\"M1,0h17.6c0.6,0,1,0.5,1,1v3.1c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V1C0,0.5,0.4,0,1,0z\"/>\r\n        <path d=\"M1,9h17.6c0.6,0,1,0.5,1,1v21c0,0.6-0.4,1-1,1H1c-0.6,0-1-0.5-1-1V10C0,9.4,0.4,9,1,9z\"/>\r\n    </svg>\r\n\r\nexport const settings = <svg viewBox=\"0 0 50 50\">\r\n            <circle className=\"cls-1\" cx=\"25.43\" cy=\"24.63\" r=\"15.4\" transform=\"translate(-3.28 3.92) rotate(-8.28)\"/>\r\n            <path className=\"cls-2\" d=\"M28.87,47.49l-7.07,0L22,41.58a17.18,17.18,0,0,0,6.74,0Z\"/>\r\n            <path className=\"cls-2\" d=\"M28.84,7.68a17.18,17.18,0,0,0-6.74,0l-.16-5.89H29Z\"/>\r\n            <path className=\"cls-2\" d=\"M44,38.35l-5,5L35,39a17.33,17.33,0,0,0,4.78-4.76Z\"/>\r\n            <path className=\"cls-2\" d=\"M15.85,10.22A17.19,17.19,0,0,0,11.07,15L6.8,10.92l5-5Z\"/>\r\n            <path className=\"cls-2\" d=\"M48.27,21.17l0,7.08-5.88-.19a17.23,17.23,0,0,0,0-6.75Z\"/>\r\n            <path className=\"cls-2\" d=\"M8.45,21.2a17.37,17.37,0,0,0,0,6.74l-5.89.16,0-7.08Z\"/>\r\n            <path className=\"cls-2\" d=\"M39.12,6l5,5-4.29,4a17.43,17.43,0,0,0-4.75-4.78Z\"/>\r\n            <path className=\"cls-2\" d=\"M11,34.2A17.16,17.16,0,0,0,15.75,39L11.7,43.25l-5-5Z\"/>\r\n    </svg>\r\n\r\nexport const report = <svg viewBox=\"0 0 50 50\">\r\n        <rect x=\"0.03\" y=\"0.19\" width=\"49.93\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"8.4\" width=\"46.19\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"21.12\" width=\"49.93\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"29.58\" width=\"49.93\" height=\"3.85\" rx=\"1\"/><rect x=\"0.03\" y=\"38.04\" width=\"43.69\" height=\"3.85\" rx=\"1\"/>\r\n        <rect x=\"0.03\" y=\"46.15\" width=\"49.93\" height=\"3.85\" rx=\"1\"/>\r\n    </svg>\r\n\r\nexport const chart = <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n        <g>\r\n            <path d=\"M52.5,21.4c-1.9,0-3.6,1.3-4.1,3.1L37.9,63.7l-6.4-11.1c-1.2-2-3.7-2.7-5.7-1.5c-0.3,0.2-0.6,0.4-0.9,0.7\r\n                L10.1,66.6c-1.7,1.6-1.7,4.2-0.2,5.9c1.6,1.7,4.2,1.7,5.9,0.2c0.1,0,0.1-0.1,0.1-0.1L27,61.5l8.7,15.1c1.2,2,3.7,2.7,5.7,1.5\r\n                c0.9-0.6,1.6-1.5,1.9-2.5l9.1-33.9l4.6,17.2c0.6,2.2,2.9,3.5,5.1,2.9c1.1-0.3,2-1,2.5-1.9l10.4-18l8.9,9.4c1.6,1.7,4.2,1.8,5.9,0.3\r\n                s1.8-4.2,0.3-5.9c0,0-0.1-0.1-0.1-0.1L77.3,32.1c-1.6-1.7-4.2-1.8-5.9-0.2c-0.3,0.3-0.6,0.6-0.8,1L62.5,47l-6-22.5\r\n                C56,22.7,54.4,21.4,52.5,21.4L52.5,21.4z\"/>\r\n        </g>\r\n    </svg>\r\n\r\nexport const info =  <svg viewBox=\"0 0 100 100\" x=\"0px\" y=\"0px\">\r\n        <g>\r\n            <path d=\"M 62.0763 27.4552 C 64.0258 25.642 65 23.4406 65 20.8589 C 65 18.2815 64.0258 16.0809 62.0763 14.2511 C 60.1273 12.4207 57.7859 11.5 55.0413 11.5 C 52.3076 11.5 49.9438 12.4207 47.9833 14.2511 C 46.0343 16.0809 45.0487 18.2815 45.0487 20.8589 C 45.0487 23.4406 46.0343 25.642 47.9833 27.4552 C 49.9438 29.2682 52.3076 30.178 55.0413 30.178 C 57.7859 30.178 60.1273 29.2682 62.0763 27.4552 ZM 57.5841 88.0802 C 61.1017 86.4348 62.9616 83.3419 61.1353 81.9274 C 60.0823 81.1132 58.7041 82.4604 57.6963 82.4604 C 55.5343 82.4604 54.0103 82.1065 53.1367 81.3939 C 52.2518 80.6754 51.8261 79.3446 51.8261 77.3796 C 51.8261 76.5942 51.9493 75.4433 52.2182 73.9213 C 52.487 72.395 52.8007 71.0302 53.1367 69.8404 L 57.3153 55.0418 C 57.7073 53.683 57.9988 52.1893 58.1554 50.5672 C 58.301 48.9276 58.3798 47.7935 58.3798 47.1533 C 58.3798 44.0378 57.2817 41.5004 55.0971 39.5465 C 52.9237 37.5991 49.8094 36.6159 45.7765 36.6159 C 43.5361 36.6159 41.1501 36.9472 38.652 37.8117 C 33.7564 39.5293 34.8432 43.7968 35.9296 43.7968 C 38.1364 43.7968 39.6152 44.1722 40.3995 44.9193 C 41.1837 45.6604 41.5868 46.9796 41.5868 48.8828 C 41.5868 49.9269 41.4413 51.1007 41.1947 52.3689 C 40.9369 53.6381 40.635 54.9909 40.2541 56.4111 L 36.053 71.2659 C 35.6947 72.8267 35.4253 74.2246 35.2463 75.4648 C 35.0784 76.7058 35 77.9187 35 79.1091 C 35 82.1578 36.12 84.6722 38.3716 86.6596 C 40.6238 88.6528 44.0854 90.5 48.1405 90.5 C 50.7731 90.5 54.537 89.518 57.5841 88.0802 Z\">\r\n            </path>\r\n        </g>\r\n    </svg>\r\n\r\nexport const verticalGrip = <svg viewBox=\"0 0 12.1 50\" >\r\n        <rect width=\"2.4\" height=\"50\"/>\r\n        <rect x=\"4.9\" width=\"2.4\" height=\"50\"/>\r\n        <rect x=\"9.8\" width=\"2.4\" height=\"50\"/>\r\n    </svg>\r\n\r\nexport const selectRect = <svg viewBox=\"0 0 100 100\">\r\n    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n        <svg\r\n            fill=\"#000000\"\r\n            viewBox=\"0 0 8.4666665 8.4666669\"\r\n        >\r\n            <g transform=\"translate(0,-288.53333)\">\r\n                <path\r\n                    d=\"m 0.52916618,289.0625 v 1.05833 H 1.0583328 v -0.52916 h 0.5291667 v -0.52917 z m 1.58750012,0 v 0.52917 h 1.0583333 v -0.52917 z m 1.5875,0 v 0.52917 h 1.0583333 v -0.52917 z m 1.5875,0 v 0.52917 h 1.0583333 v -0.52917 z m 1.5875,0 v 0.52917 H 7.408333 v 0.52916 H 7.9374996 V 289.0625 Z M 0.52916618,290.65 v 1.05833 H 1.0583328 V 290.65 Z m 6.87916682,0 v 1.05833 H 7.9374996 V 290.65 Z m -6.87916682,1.5875 v 1.05833 H 1.0583328 v -1.05833 z m 6.87916682,0 v 1.05833 h 0.5291666 v -1.05833 z m -6.87916682,1.5875 v 1.05833 H 1.0583328 V 293.825 Z m 6.87916682,0 v 1.05833 H 7.9374996 V 293.825 Z m -6.87916682,1.5875 v 1.05833 H 1.5874995 v -0.52916 H 1.0583328 v -0.52917 z m 6.87916682,0 v 0.52917 H 6.8791663 v 0.52916 h 1.0583333 v -1.05833 z m -5.2916667,0.52917 v 0.52916 h 1.0583333 v -0.52916 z m 1.5875,0 v 0.52916 h 1.0583333 v -0.52916 z m 1.5875,0 v 0.52916 h 1.0583333 v -0.52916 z\"\r\n                ></path>\r\n            </g>\r\n        </svg>\r\n    </g>\r\n    </svg>\r\n","// This components formats the data for the selected geography\r\n// and displays it in the right side panel.\r\n\r\nimport React, {useState} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport Tooltip from './tooltip';\r\nimport TwoWeekChart from './twoWeekLineChart';\r\nimport { setPanelState } from '../actions';\r\nimport {dataFn, colLookup} from '../utils';\r\nimport { colors } from '../config';\r\nimport { report } from '../config/svg';\r\n\r\n// Styled components CSS\r\nconst DataPanelContainer = styled.div`\r\n  display: ${props => props.dataLength === 0 ? 'none' : 'initial'};\r\n  position:fixed;\r\n  min-width:250px;\r\n  right:0;\r\n  top:50px;\r\n  overflow-x:visible;\r\n  height:calc(100vh - 50px);\r\n  background-color: ${colors.gray}fa;\r\n  box-shadow: -2px 0px 5px rgba(0,0,0,0.7);\r\n  padding:20px;\r\n  box-sizing: border-box;\r\n  transition:250ms all;\r\n  font: 'Lato', sans-serif;\r\n  color: white;\r\n  font-size:100%;\r\n  padding:0;\r\n  z-index:5;\r\n  transform: translateX(100%);\r\n  &.open {\r\n    transform:none;\r\n  }\r\n  @media (max-width:1024px) {\r\n    min-width:50vw;\r\n  }  \r\n  @media (max-width:600px) {\r\n    width:100%;\r\n    left:0;\r\n    transform:translateX(-100%);\r\n    z-index:51;\r\n    &.open {\r\n      transform:none;\r\n    }\r\n    display: ${props => (props.otherPanels || props.dataLength === 0) ? 'none' : 'initial'};\r\n  }\r\n  button#showHideRight {\r\n    position:absolute;    \r\n    right:calc(100% - 20px);\r\n    top:20px;\r\n    width:40px;\r\n    height:40px;\r\n    padding:0;\r\n    margin:0;\r\n    background-color: ${colors.gray};\r\n    box-shadow: 0px 0px 6px rgba(0,0,0,1);\r\n    outline:none;\r\n    border:none;\r\n    cursor: pointer;\r\n    transition:500ms all;\r\n    svg {\r\n      width:15px;\r\n      height:15px;\r\n      margin:12.5px 0 0 0;\r\n      @media (max-width:600px){\r\n        width:20px;\r\n        height:20px;\r\n        margin:5px;\r\n      }\r\n      fill:white;\r\n      transform:rotate(180deg);\r\n      transition:500ms all;\r\n    }\r\n    :after {\r\n      opacity:0;\r\n      font-weight:bold;\r\n      color:white;\r\n      position: relative;\r\n      top:-17px;\r\n      transition:500ms all;\r\n      content: 'Report';\r\n      right:50px;\r\n      z-index:4;\r\n    }  \r\n    &.hidden {\r\n      right:100%;\r\n      svg {\r\n        transform:rotate(0deg);\r\n      }\r\n      :after {\r\n        opacity:1;\r\n      }\r\n    }\r\n    @media (max-width:768px){\r\n      top:120px;\r\n    }\r\n    @media (max-width:600px) {\r\n      left:100%;\r\n      width:30px;\r\n      height:30px;\r\n      top:180px;\r\n      &.hidden svg {\r\n        transform:rotate(0deg);\r\n      }\r\n      :after {\r\n        display:none;\r\n      }\r\n      &.active {\r\n        left:90%;\r\n      }\r\n      &.active svg {\r\n        transform:rotate(90deg);\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n  div {\r\n    div {\r\n      p {\r\n        line-height:1.5;\r\n        margin:0;\r\n        display:inline-block;\r\n      }\r\n    }\r\n  }\r\n  h2 {\r\n    padding:15px 0 5px 0;\r\n    margin:0;\r\n    display:inline-block;\r\n    max-width:200px;\r\n  }\r\n  h6 {\r\n    padding:0 0 15px 0;\r\n    margin:0;\r\n    a {\r\n      color:${colors.yellow};\r\n      text-decoration:none;\r\n    }\r\n  }\r\n  .extraPadding {\r\n    padding-bottom:20vh;\r\n  }\r\n`\r\n\r\nconst ReportWrapper = styled.div`\r\n  height:100vh;\r\n  overflow-y:scroll;\r\n`\r\n\r\nconst ReportContainer = styled.div`\r\n    padding:5px 0 0 30px;\r\n    box-sizing:border-box;\r\n    overflow-x:visible;\r\n    // display:flex;\r\n    // flex-direction:column;\r\n    // flex-wrap:wrap;\r\n    // width:500px;\r\n    // columns:${props => props.cols} 250px;\r\n    // column-gap:10px;\r\n    // display:inline-block;\r\n    h3 {\r\n      font-size:${props => props.expanded ? '150%' : '100%'};\r\n      display:${props => props.expanded ? 'block' : 'inline'};\r\n      margin:${props => props.expanded ? '0': '0 15px 0 0'};\r\n      padding:${props => props.expanded ? '0 0 15px 0 !important': '0'};\r\n      &:before {\r\n        content: ': ';\r\n        display: ${props => props.expanded ? 'none' : 'initial'};\r\n      }\r\n      &:after {\r\n        content:\" \";\r\n        white-space:pre;\r\n        height:0;\r\n        display: ${props => props.expanded ? 'none' : 'block'};\r\n      }\r\n    }\r\n    div.numberChartContainer {\r\n      width:100%;\r\n      display:${props => props.expanded ? 'flex' : 'inline'};\r\n      align-items: center;\r\n    }\r\n    div.numberContainer {\r\n      display:${props => props.expanded ? 'flex' : 'inline'};\r\n    }\r\n    .bigOnly {\r\n      display: ${props => props.expanded ? 'initial' : 'none'};\r\n    }\r\n    \r\n`\r\n\r\nconst ReportSection = styled.span`\r\n    padding-right:20px;\r\n    box-sizing:border-box;\r\n    // width:100%;\r\n    // display:inline-block;\r\n    padding: 0;\r\n    margin: 0;\r\n`\r\n\r\nconst ExpandSelect = styled(FormControl)`\r\n  outline:none;\r\n  border:none;\r\n  position:absolute !important;\r\n  right:25px;\r\n  top:15px;\r\n  div.MuiInputBase-root:before {\r\n    display:none !important;\r\n  }\r\n  div.MuiInputBase-root:after {\r\n    display:none !important;\r\n  }\r\n  svg {\r\n    path {\r\n      fill:white;\r\n    }\r\n  }\r\n\r\n`\r\n\r\nconst DataPanel = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const storedData = useSelector(state => state.storedData);\r\n  // name of current data set\r\n  const currentData = useSelector(state => state.currentData);\r\n  // current date and index\r\n  const currDateIndex = useSelector(state => state.dataParams.nIndex);\r\n  const dates = useSelector(state => state.dates);\r\n  const selectionKeys = useSelector(state => state.selectionKeys);\r\n  const selectionIndex = useSelector(state => state.selectionIndex);\r\n  // panels open/close state\r\n  const panelState = useSelector(state => state.panelState);\r\n  //column names\r\n  const cols = useSelector(state => state.cols);\r\n  const [expanded, setExpanded] = useState(true)\r\n\r\n  // de-structure sidebarData, which houses selected geography data\r\n  const datasetList = ['properties', 'cases', 'deaths', 'predictions',\r\n    'chr_health_factors', 'chr_life', 'chr_health_context',\r\n    'testing', 'vaccinesAdmin1', 'vaccinesAdmin2', 'vaccinesDist']\r\n  const [ properties, cases, deaths, predictions,\r\n    chr_health_factors, chr_life, chr_health_context,\r\n    testing, vaccinesAdmin1, vaccinesAdmin2, vaccinesDist\r\n  ] = datasetList.map(dataset => {\r\n    if (storedData[currentData] === undefined) {\r\n      return false \r\n    } else {\r\n      return storedData[currentData][0].hasOwnProperty(dataset)\r\n    }\r\n  });\r\n\r\n  \r\n  // helper for predictions data\r\n  const parsePredictedDate = (list) => `${list.slice(-2,)[0]}/${list.slice(-1,)[0]}`\r\n\r\n  // handles panel open/close\r\n  const handleOpenClose = () => panelState.info ? dispatch(setPanelState({info:false})) : dispatch(setPanelState({info:true}))\r\n  \r\n  // DRY issue -- refactor these functions\r\n\r\n  const performOperation = (dataArray, operation, totalPopulation) => {\r\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    switch(operation) {\r\n      case 'sum':\r\n        return dataArray.reduce(reducer)\r\n      case 'average':\r\n        return dataArray.reduce(reducer)/dataArray.length\r\n      case 'weighted_average':\r\n        return Math.round(dataArray.reduce(reducer)/totalPopulation*100)/100\r\n      default:\r\n        return null\r\n    }\r\n  } \r\n\r\n  const aggregateProperty = (dataset, property, operation, specialCase=null) => {\r\n    let dataArray; \r\n    let totalPopulation = 0;\r\n    try {\r\n      if (operation === 'weighted_average') {\r\n        dataArray = selectionIndex.map(selection => {\r\n          let selectionPop = storedData[currentData][selection]['properties']['population'];\r\n          totalPopulation+=selectionPop;\r\n          if (specialCase === 'pcp') try { return parseInt(storedData[currentData][selection][dataset][property].split(':')[0])*selectionPop } catch { return 0}\r\n          return storedData[currentData][selection][dataset][property]*selectionPop\r\n        })\r\n      } else {\r\n        dataArray = selectionIndex.map(selection => storedData[currentData][selection][dataset][property]);\r\n      }\r\n    } catch {\r\n      return 0\r\n    }\r\n\r\n    return performOperation(dataArray, operation, totalPopulation);\r\n  }\r\n\r\n  const aggregateTimeseries = (dataset, index, operation) => {\r\n    let dataArray; \r\n    let totalPopulation = 0;\r\n    try {\r\n      if (operation === 'weighted_average') {\r\n        dataArray = selectionIndex.map(selection => {\r\n          let selectionPop = storedData[currentData][selection]['properties']['population'];\r\n          totalPopulation+=selectionPop;\r\n          return storedData[currentData][selection][dataset].slice(index,)[0]*selectionPop\r\n        })\r\n      } else {\r\n        dataArray = selectionIndex.map(selection => storedData[currentData][selection][dataset].slice(index,)[0]);\r\n      }\r\n    } catch {\r\n      return 0\r\n    }\r\n\r\n    return performOperation(dataArray, operation, totalPopulation);\r\n  }\r\n\r\n  const aggregate2WeekTimeSeries = (dataset, index, operation) => {\r\n    let lookbackPeriod = []\r\n    let rtn;\r\n\r\n    try {\r\n      for (let i=-13;i<1;i++) {\r\n        lookbackPeriod.push(index+i)\r\n      }\r\n      rtn = lookbackPeriod.map(day => aggregateTimeseries(dataset, day, operation))\r\n    } catch {\r\n      return 0\r\n    }\r\n    return rtn;\r\n  }\r\n  \r\n  const aggregateDataFunction = (numerator, denominator, params, operation) => {\r\n    \r\n    let dataArray; \r\n    let totalPopulation = 0;\r\n    try {\r\n      if (operation === 'weighted_average') {\r\n        dataArray = selectionIndex.map(selection => {\r\n          let selectionPop = storedData[currentData][selection]['properties']['population'];\r\n          totalPopulation+=selectionPop;\r\n          return dataFn(storedData[currentData][selection][numerator], storedData[currentData][selection][denominator], params)*selectionPop\r\n        })\r\n      } else {\r\n        dataArray = selectionIndex.map(selection => dataFn(storedData[currentData][selection][numerator], storedData[currentData][selection][denominator], params));\r\n      }\r\n    } catch {\r\n      return 0\r\n    }\r\n\r\n    return performOperation(dataArray, operation, totalPopulation);\r\n  }\r\n\r\n  const handleExpandContract = (event) => {\r\n    setExpanded(event.target.value)\r\n  }\r\n\r\n  \r\n\r\n  const aggregateQualitative = (dataset, property) => {\r\n    let dataObj = {};\r\n    let returnStr = [];\r\n    try {\r\n      let dataArray = selectionIndex.map(selection => storedData[currentData][selection][dataset][property]);\r\n    \r\n      for (let i=0; i<dataArray.length; i++){\r\n        if (dataObj[dataArray[i]] === undefined) {\r\n          dataObj[dataArray[i]] = 1\r\n        } else {\r\n          dataObj[dataArray[i]] += 1\r\n        }\r\n      }  \r\n      for (let i=0; i<Object.keys(dataObj).length; i++){\r\n        returnStr.push(`${[Object.keys(dataObj)[i]]}: ${Math.round(dataObj[Object.keys(dataObj)[i]]/dataArray.length*10000)/100}%`)\r\n      }\r\n    } catch {\r\n      return 0\r\n    }\r\n    return returnStr;\r\n  }\r\n\r\n  return (\r\n    <DataPanelContainer className={panelState.info ? 'open' : ''} id=\"data-panel\"  otherPanels={panelState.variables} dataLength={selectionKeys.length}>\r\n      {properties &&  \r\n      <ExpandSelect>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={null}\r\n          onChange={handleExpandContract}\r\n        >\r\n          <MenuItem value={true}>Expanded</MenuItem>\r\n          <MenuItem value={false}>Compact</MenuItem>\r\n        </Select>\r\n      </ExpandSelect>\r\n      }\r\n      <ReportWrapper>\r\n        <ReportContainer expanded={expanded}>\r\n          <ReportSection>\r\n            {(properties && selectionIndex.length < 4) && <h2>{selectionKeys.map((key, index) => index === selectionKeys.length-1 ? selectionKeys.length === 1 ? key : `and ${key}` : `${key}, `)}</h2>}\r\n            {(properties && selectionIndex.length >= 4) && <h2>{(currentData.includes('county')||currentData.includes('cdc')) ? 'Selected Counties' : 'Selected States'}</h2>}\r\n            <br/>\r\n          {(properties && selectionIndex.length) && \r\n              <span>\r\n                <h4>{dates[currDateIndex]}</h4>\r\n                <p>Population</p>\r\n                <h3>{aggregateProperty('properties', 'population', 'sum').toLocaleString('en')}</h3>\r\n              </span>\r\n            }       \r\n          </ReportSection>\r\n          {(cases && deaths && selectionIndex.length) && \r\n              <ReportSection>\r\n                <p>Total Cases</p>\r\n                <div className=\"numberChartContainer\">\r\n                  <h3>{aggregateTimeseries('cases', currDateIndex, 'sum')?.toLocaleString('en')}</h3>\r\n                  {expanded && <TwoWeekChart data={aggregate2WeekTimeSeries('cases', currDateIndex, 'sum')} schema='cases/deaths'/>}\r\n                </div>\r\n                <p>Total Deaths </p>\r\n                <div className=\"numberChartContainer\">\r\n                  <h3>{aggregateTimeseries('deaths', -1, 'sum')?.toLocaleString('en')}</h3>\r\n                  {expanded && <TwoWeekChart data={aggregate2WeekTimeSeries('deaths', currDateIndex, 'sum')} schema='cases/deaths'/>}\r\n                </div>\r\n                <p>Cases per 100k Population</p>\r\n                <h3>{aggregateDataFunction('cases', 'properties', {nProperty: null, nIndex: currDateIndex, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100000}, 'weighted_average')?.toFixed(2).toLocaleString('en')}</h3>\r\n                <p>Deaths per 100k Population</p>\r\n                <h3>{aggregateDataFunction('deaths', 'properties', {nProperty: null, nIndex: currDateIndex, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100000}, 'weighted_average')?.toFixed(2).toLocaleString('en')}</h3>\r\n                <p>New Cases per 100k Population</p>\r\n                <h3>{aggregateDataFunction('cases', 'properties', {nProperty: null, nIndex: currDateIndex, nRange: 1, dProperty: 'population', dIndex: null, dRange: null, scale: 100000}, 'weighted_average')?.toFixed(2).toLocaleString('en')}</h3>\r\n                <p>New Deaths per 100k Population</p>\r\n                <h3>{aggregateDataFunction('deaths', 'properties', {nProperty: null, nIndex: currDateIndex, nRange: 1, dProperty: 'population', dIndex: null, dRange: null, scale: 100000}, 'weighted_average')?.toFixed(2).toLocaleString('en')}</h3>\r\n                <p>Licensed Hospital Beds</p>\r\n                <h3>{aggregateProperty('properties','beds','sum').toLocaleString('en')}</h3>\r\n                {/* <p>Cases per Bed: {dataFn(cases, null, cases.length-1, null, properties, 'beds', null, null, 1)?.toFixed(2)?.toLocaleString('en')}</p><br/> */}\r\n              </ReportSection>\r\n            }\r\n          {(testing && selectionIndex.length) &&\r\n              <ReportSection>\r\n                <h2>Testing</h2><br/>\r\n                <p>7-Day Positivity Rate</p>\r\n                <div className=\"numberChartContainer\">\r\n                  <h3>{Math.round(aggregateTimeseries('testing_wk_pos', currDateIndex, 'weighted_average')*100)}%</h3>\r\n                  {expanded && <TwoWeekChart data={aggregate2WeekTimeSeries('testing_wk_pos', currDateIndex, 'weighted_average')} schema='testingPos'/>}\r\n                </div>\r\n\r\n                <p>7-Day Testing Capacity<br className=\"bigOnly\"/> per 100k People</p>\r\n                <div className=\"numberChartContainer\">\r\n                  <h3>{Math.round(aggregateTimeseries('testing_tcap', currDateIndex, 'weighted_average')*100)/100}</h3>\r\n                  {expanded && <TwoWeekChart data={aggregate2WeekTimeSeries('testing_tcap', currDateIndex, 'weighted_average')} schema='testingCap'/>}\r\n                </div>\r\n\r\n                <p>Total Testing</p>\r\n                <h3>{aggregateTimeseries('testing', currDateIndex, 'sum')?.toLocaleString('en')}</h3>\r\n\r\n                <p>7-Day Confirmed Cases<br className=\"bigOnly\"/>  per Testing</p>\r\n                <h3>{Math.round(aggregateTimeseries('testing_ccpt', currDateIndex, 'weighted_average')?.toLocaleString('en')*100)}%</h3>\r\n\r\n                <p>Testing Criterion</p><br className=\"bigOnly\"/>\r\n                <h3>{aggregateQualitative('properties', 'criteria').map(f => <span>{f}<br/></span>)}</h3>\r\n              </ReportSection>\r\n            }\r\n            {(vaccinesAdmin1 && selectionIndex.length) &&\r\n                <ReportSection>\r\n                  <h2>COVID Vaccination</h2><br/>\r\n                  <h6>Source: <a href=\"https://covid.cdc.gov/covid-data-tracker/#vaccinations\" target=\"_blank\" rel=\"noopener noreferrer\">CDC COVID Data Tracker</a></h6>            \r\n                \r\n                  {/* <p>% of Population Received First Dose</p>\r\n                  <div className=\"numberChartContainer\">\r\n                    <h3>{Math.round(aggregateTimeseries('vaccineAdmin1', currDateIndex, 'weighted_average'))?.toLocaleString('en')}</h3>\r\n                    {expanded && <TwoWeekChart data={aggregate2WeekTimeSeries('vaccineAdmin1', currDateIndex, 'weighted_average')} schema='testingCap'/>}\r\n                  </div> */}\r\n\r\n                  <p>% of Population<br className=\"bigOnly\"/>  Received First Dose</p>\r\n                  <h3>{aggregateDataFunction('vaccinesAdmin1', 'properties', {nProperty: null, nIndex: currDateIndex, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100}, 'weighted_average')?.toFixed(2).toLocaleString('en')}%</h3>\r\n                  \r\n                  <p>% of Population<br className=\"bigOnly\"/>  Received Second Dose</p>\r\n                  <h3>{aggregateDataFunction('vaccinesAdmin2', 'properties', {nProperty: null, nIndex: currDateIndex, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100}, 'weighted_average')?.toFixed(2).toLocaleString('en')}%</h3>\r\n\r\n                  <p>Doses Available<br className=\"bigOnly\"/>  Per 100k Population</p>\r\n                  <h3>{aggregateDataFunction('vaccinesDist', 'properties', {nProperty: null, nIndex: currDateIndex, nRange: null, dProperty: 'population', dIndex: null, dRange: null, scale: 100000}, 'weighted_average')?.toFixed(2).toLocaleString('en')}</h3>\r\n                \r\n                </ReportSection>\r\n              }\r\n          {(chr_health_factors && selectionIndex.length) && \r\n            <ReportSection>\r\n              <h2>Community Health Factors<Tooltip id=\"healthfactor\"/></h2>\r\n              <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n              <p>Children in poverty</p><Tooltip id=\"PovChldPrc\"/>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'PovChldPrc'), 'weighted_average')}%</h3>\r\n              <p>Income inequality<Tooltip id=\"IncRt\"/></p>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'IncRt'), 'weighted_average')}</h3>\r\n\r\n              <p>Median household income</p><Tooltip id=\"MedianHouseholdIncome\"/>\r\n              <h3>${aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'MedianHouseholdIncome'), 'weighted_average').toLocaleString('en')}</h3>\r\n\r\n              <p>Food insecurity</p><Tooltip id=\"FdInsPrc\"/>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'FdInsPrc'), 'weighted_average')}%</h3>\r\n\r\n              <p>Unemployment</p><Tooltip id=\"UnEmplyPrc\"/>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'UnEmplyPrc'), 'weighted_average')}%</h3>\r\n\r\n              <p>Uninsured</p><Tooltip id=\"UnInPrc\"/>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'UnInPrc'), 'weighted_average')}%</h3>\r\n\r\n              <p>Primary care physicians</p><Tooltip id=\"PrmPhysRt\"/>\r\n              <h3>{Math.round(aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'PrmPhysRt'), 'weighted_average', 'pcp'))}:1</h3>\r\n\r\n              <p>Preventable hospital stays</p><Tooltip id=\"PrevHospRt\"/>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'PrevHospRt'), 'sum')}</h3>\r\n\r\n              <p>Residential segregation black/white</p>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'RsiSgrBlckRt'), 'weighted_average')}</h3>\r\n\r\n              <p>Severe housing problems</p><Tooltip id=\"SvrHsngPrbRt\"/>\r\n              <h3>{aggregateProperty('chr_health_factors', colLookup(cols, currentData, 'chr_health_factors', 'SvrHsngPrbRt'), 'weighted_average')}%</h3>\r\n            </ReportSection>\r\n          }\r\n          {(chr_health_context && selectionIndex.length) && \r\n              <ReportSection>\r\n                <h2>Community Health Context<Tooltip id=\"healthcontext\"/></h2>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n\r\n                <p>65 and older<Tooltip id=\"Over65YearsPrc\"/></p>\r\n                <h3>{aggregateProperty('chr_health_context', colLookup(cols, currentData, 'chr_health_context', 'Over65YearsPrc'), 'weighted_average')}%</h3>\r\n\r\n                <p>Adult obesity<Tooltip id=\"AdObPrc\"/></p>\r\n                <h3>{aggregateProperty('chr_health_context', colLookup(cols, currentData, 'chr_health_context', 'AdObPrc'), 'weighted_average')}%</h3>\r\n\r\n                <p>Diabetes prevalence<Tooltip id=\"AdDibPrc\"/></p>\r\n                <h3>{aggregateProperty('chr_health_context', colLookup(cols, currentData, 'chr_health_context', 'AdDibPrc'), 'weighted_average')}%</h3>\r\n\r\n                <p>Adult smoking<Tooltip id=\"SmkPrc\"/></p>\r\n                <h3>{aggregateProperty('chr_health_context', colLookup(cols, currentData, 'chr_health_context', 'SmkPrc'), 'weighted_average')}%</h3>\r\n\r\n                <p>Excessive drinking<Tooltip id=\"ExcDrkPrc\"/></p>\r\n                <h3>{aggregateProperty('chr_health_context', colLookup(cols, currentData, 'chr_health_context', 'ExcDrkPrc'), 'weighted_average')}%</h3>\r\n\r\n                <p>Drug overdose deaths<Tooltip id=\"DrOverdMrtRt\"/></p>\r\n                <h3>{aggregateProperty('chr_health_context', colLookup(cols, currentData, 'chr_health_context', 'DrOverdMrtRt'), 'sum')||0}</h3>\r\n\r\n              </ReportSection>\r\n            }\r\n          {(chr_life && selectionIndex.length) &&\r\n              <ReportSection expanded={expanded}>\r\n                <h2>Length &amp; Quality of Life<Tooltip id=\"healthlife\"/></h2>\r\n                <h6>Source: <a href=\"https://www.countyhealthrankings.org/\" target=\"_blank\" rel=\"noopener noreferrer\">County Health Rankings</a></h6>\r\n                \r\n                <p>Life expectancy<Tooltip id=\"LfExpRt\"/></p>\r\n                <h3>{aggregateProperty('chr_life', colLookup(cols, currentData, 'chr_life', 'LfExpRt'), 'weighted_average')}</h3>\r\n\r\n                <p>Self-rated health<Tooltip id=\"SlfHlthPrc\"/></p>\r\n                <h3>{aggregateProperty('chr_life', colLookup(cols, currentData, 'chr_life', 'SlfHlthPrc'), 'weighted_average')}%</h3>\r\n\r\n              </ReportSection>\r\n            }\r\n          {(predictions && cols[currentData] && cols[currentData].predictions && selectionIndex.length) && \r\n              <ReportSection>\r\n                <h2>Forecasting</h2><br/>            \r\n                <h6>Source: <a href=\"https://github.com/Yu-Group/covid19-severity-prediction/\" target=\"_blank\" rel=\"noopener noreferrer\">Yu Group at Berkeley</a></h6>            \r\n                \r\n                <p>5-Day Severity Index<Tooltip id=\"SeverityIndex\"/></p>\r\n                <h3> {['','Low','Medium','High'][Math.round(aggregateProperty('predictions', 1, 'weighted_average'))]}</h3>\r\n                \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[2].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p>\r\n                <h3>{Math.round(aggregateProperty('predictions', 2, 'sum')*10)/10}</h3>\r\n              \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[4].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p>\r\n                <h3>{Math.round(aggregateProperty('predictions', 4, 'sum')*10)/10}</h3>\r\n                \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[6].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p>\r\n                <h3>{Math.round(aggregateProperty('predictions', 6, 'sum')*10)/10}</h3>\r\n                \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[8].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p>\r\n                <h3>{Math.round(aggregateProperty('predictions', 8, 'sum')*10)/10}</h3>\r\n                \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[10].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p>\r\n                <h3>{Math.round(aggregateProperty('predictions', 10, 'sum')*10)/10}</h3>\r\n                \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[12].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p>\r\n                <h3>{Math.round(aggregateProperty('predictions', 12, 'sum')*10)/10}</h3>\r\n                \r\n                <p>Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[14].split('_'))}<Tooltip id=\"PredictedDeaths\"/></p>\r\n                <h3>{Math.round(aggregateProperty('predictions', 14, 'sum')*10)/10}</h3>\r\n              \r\n              </ReportSection>\r\n            }\r\n          \r\n          <div className=\"extraPadding\"></div>\r\n          \r\n          {properties && <button onClick={handleOpenClose} id=\"showHideRight\" className={panelState.info ? 'active' : 'hidden'}>{report}</button>}\r\n          {/* {properties && <ResizeButton \r\n                  id=\"resize\"\r\n                  onMouseDown={handleDown}\r\n                  onTouchStart={handleTouch}\r\n                  style={{zIndex:10}}\r\n              >\r\n                  {verticalGrip}\r\n              </ResizeButton>} */}\r\n        </ReportContainer>\r\n      </ReportWrapper>\r\n    </DataPanelContainer>\r\n  );\r\n}\r\n\r\nexport default DataPanel;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\nimport styled from 'styled-components';\r\nimport { setVariableParams, incrementDate } from '../actions';\r\n\r\nconst SliderContainer = styled.div`\r\n    color: white;\r\n    box-sizing:border-box;\r\n    padding:5px 20px 5px 20px;\r\n    width:100%;\r\n`\r\nconst PlayPauseContainer = styled(Grid)`\r\n    height:0;\r\n    padding:0;\r\n    margin:0;\r\n`\r\n\r\nconst PlayPauseButton = styled(Button)`\r\n    background:none;\r\n    padding:0;\r\n    margin:0;\r\n    transform:translate(-20px, -5px);\r\n    @media (max-width: 600px) {\r\n        transform:translate(-20px, 3px);\r\n    }\r\n    svg {\r\n        width: 24px;\r\n        height:24px;\r\n        @media (max-width: 600px) {\r\n            width: 20px;\r\n            height:20px;\r\n        }\r\n        g {\r\n            fill: white;\r\n        },\r\n        path {\r\n            fill:white;\r\n        }\r\n    }\r\n    &.MuiButton-text {\r\n        padding:6px 0;\r\n    }\r\n`\r\n\r\nconst LineSlider = styled(Slider)`\r\n    &.MuiSlider-root {\r\n        width:68%;\r\n        margin-left:15%;\r\n        box-sizing:border-box;\r\n        color:#FFFFFF55;\r\n        @media (max-width: 600px) {\r\n            width:50%;\r\n            margin-left:24%;\r\n        }\r\n    }\r\n    span.MuiSlider-rail {\r\n        // display:none;\r\n    }\r\n    span.MuiSlider-track {\r\n        // color:white;\r\n        // height:4px;\r\n        display:none;\r\n    }\r\n    span.MuiSlider-thumb {\r\n        color:white;\r\n        width:15px;\r\n        height:15px;\r\n        transform:translate(-1.5px, -1.5px);\r\n        .MuiSlider-valueLabel {\r\n            transform:translateY(-10px);\r\n            pointer-events:none;\r\n            font-size:15px;\r\n            span {\r\n                background: none;\r\n            }\r\n        }\r\n    }\r\n    span.MuiSlider-mark {\r\n        width:1px;\r\n        height:2px;\r\n    }\r\n    // .MuiSlider-valueLabel span{\r\n    //     transform:translateX(-100%);        \r\n    // }\r\n    span.MuiSlider-thumb.MuiSlider-active {\r\n        box-shadow: 0px 0px 10px rgba(200,200,200,0.5);\r\n    }\r\n`\r\n\r\nconst RangeSlider = styled(Slider)`\r\n    box-sizing:border-box;\r\n    &.MuiSlider-root {\r\n        width:70%;\r\n        margin-left:13%;\r\n        box-sizing:border-box;\r\n        color:#FFFFFF55;\r\n        padding-top: 50px;\r\n        @media (max-width: 600px) {\r\n            width:90%;\r\n            margin-left:0;\r\n        }\r\n    }\r\n    span.MuiSlider-rail {\r\n        color:white;\r\n        height:4px;\r\n        display:none;\r\n    }\r\n    span.MuiSlider-track {\r\n        color:white;\r\n        height:4px;\r\n        display:none;\r\n    }\r\n    span.MuiSlider-thumb {\r\n        color:white;\r\n        .MuiSlider-valueLabel {\r\n            transform:translateY(0px);\r\n            pointer-events:none;\r\n            span {\r\n                background: none;\r\n            }\r\n        }\r\n    }\r\n    span.MuiSlider-mark {\r\n        width:1px;\r\n        height:2px;\r\n    }\r\n    span.MuiSlider-thumb.MuiSlider-active: {\r\n        box-shadow: 0px 0px 10px rgba(200,200,200,0.5);\r\n    }\r\n`\r\n\r\nconst DateTitle = styled.h3`\r\n    width:100%;\r\n    font-size:1.05rem;\r\n    padding:10px 0 5px 0;\r\n    margin:0;\r\n    left:0;\r\n    text-align:center;\r\n    pointer-events:none;\r\n`\r\nconst InitialDate = styled.p`\r\n    position:absolute;\r\n    left:10%;\r\n    bottom:8px;\r\n    font-size:75%;\r\n    @media (max-width: 600px) {\r\n        bottom:15px;\r\n        left:12%;\r\n    }\r\n`\r\n\r\nconst EndDate = styled(InitialDate)`\r\n    left:initial;\r\n    right:10px;\r\n`\r\n\r\nconst DateSelectorContainer = styled(Grid)`\r\n    display:flex;\r\n    justify-items: center;\r\n    justify-content: flex-end;\r\n    align-items:center;\r\n    margin:0;\r\n    padding:0;\r\n    .MuiFormControl-root {\r\n        padding: 0 0 0 20px !important; \r\n    }\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n    #dateSelector {\r\n        position:absolute;\r\n        left:50%;\r\n        transform:translateX(-50%);\r\n        @media (max-width: 600px) {\r\n            transform:none;\r\n            left:20px;\r\n        }\r\n        @media (max-width: 450px) {\r\n            transform:none;\r\n            left:0px;\r\n        }\r\n    }\r\n`\r\nconst DateSlider = () => {\r\n    const dispatch = useDispatch();  \r\n\r\n    const currentData = useSelector(state => state.currentData);\r\n    const dataParams = useSelector(state => state.dataParams);\r\n    const dateIndices = useSelector(state => state.dateIndices);\r\n    const dates = useSelector(state => state.dates);\r\n    const currentVariable = useSelector(state => state.currentVariable);\r\n    \r\n    const [timerId, setTimerId] = useState(null);\r\n    \r\n    const handleChange = (event, newValue) => {\r\n\r\n        if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue, dIndex: newValue}))\r\n        } else if (dataParams.nType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        } else if (dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({dIndex: newValue}))\r\n        } else if (currentVariable.includes('Testing')){\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        }\r\n    };\r\n        \r\n    const handleRangeChange = (event, newValue) => { \r\n        if (dataParams.dRange) {\r\n            dispatch(setVariableParams(\r\n                {\r\n                    nIndex: newValue[1], \r\n                    nRange: newValue[1]-newValue[0],\r\n                    rIndex: newValue[1], \r\n                    rRange: newValue[1]-newValue[0]\r\n                }\r\n            ))\r\n        } else {\r\n            dispatch(setVariableParams(\r\n                {\r\n                    nIndex: newValue[1], \r\n                    nRange: newValue[1]-newValue[0]\r\n                }\r\n            ))\r\n        }\r\n    }\r\n\r\n    const handlePlayPause = (timerId, rate, interval) => {\r\n        if (timerId === null) {\r\n            setTimerId(setInterval(o => dispatch(incrementDate(rate)), interval))\r\n        } else {\r\n            clearInterval(timerId);\r\n            setTimerId(null)\r\n        }\r\n    }\r\n\r\n    const valuetext = (value) => `${dates[value].slice(-5,-3)}-${dates[value].slice(2,4)}`;\r\n    \r\n    const formatDate = (date) => {\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n        let rawDate = new Date(date);\r\n        rawDate.setDate(rawDate.getDate() + 1);\r\n        return rawDate.toLocaleDateString('en-US', options);\r\n    }\r\n    \r\n    if (dateIndices[currentData] !== undefined) {\r\n        return (\r\n            <SliderContainer>\r\n                <Grid container spacing={2} style={{display:'flex', padding: '0 0 10px 0'}}>\r\n                        {dataParams.rangeType !== 'custom' && \r\n                            <DateSelectorContainer item xs={12}>\r\n                                <DateTitle>{dataParams.nType !== 'characteristic' ? formatDate(`${dates[dataParams.nIndex]}`) : 'Characteristic Data'}</DateTitle>\r\n                            </DateSelectorContainer>\r\n                        } \r\n                    \r\n                    {dataParams.nType !== 'characteristic' && <PlayPauseContainer item xs={1}>\r\n                        <PlayPauseButton id=\"playPause\" onClick={() => handlePlayPause(timerId, 1, 100)}>\r\n                            {timerId === null ? \r\n                                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" ><path d=\"M78.627,47.203L24.873,16.167c-1.082-0.625-2.227-0.625-3.311,0C20.478,16.793,20,17.948,20,19.199V81.27  c0,1.25,0.478,2.406,1.561,3.031c0.542,0.313,1.051,0.469,1.656,0.469c0.604,0,1.161-0.156,1.703-0.469l53.731-31.035  c1.083-0.625,1.738-1.781,1.738-3.031C80.389,48.984,79.71,47.829,78.627,47.203z\"></path></svg>\r\n                                : \r\n                                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                        <g>\r\n                                            <path d=\"M22.4,0.6c3.4,0,6.8,0,10.3,0c6.5,0,11.8,5.3,11.8,11.8c0,25,0,50.1,0,75.2c0,6.5-5.3,11.8-11.8,11.8\r\n                                                c-3.4,0-6.8,0-10.3,0c-6.5,0-11.8-5.3-11.8-11.8c0-25.1,0-50.2,0-75.2C10.6,5.9,15.9,0.6,22.4,0.6z M22.4,6.5c3.4,0,6.8,0,10.3,0\r\n                                                c3.2,0,5.9,2.6,5.9,5.9c0,25,0,50.1,0,75.2c0,3.2-2.7,5.9-5.9,5.9c-3.4,0-6.8,0-10.3,0c-3.2,0-5.9-2.7-5.9-5.9\r\n                                                c0-25.1,0-50.2,0-75.2C16.5,9.1,19.2,6.5,22.4,6.5z M67.3,6.5c3.4,0,6.8,0,10.2,0s6,2.6,6,5.9c0,25,0,50.1,0,75.2\r\n                                                c0,3.2-2.7,5.9-6,5.9s-6.7,0-10.2,0c-3.3,0-5.9-2.7-5.9-5.9c0-25.1,0-50.2,0-75.2C61.4,9.1,64,6.5,67.3,6.5z M67.3,0.6\r\n                                                c3.4,0,6.8,0,10.2,0c6.5,0,11.8,5.3,11.8,11.8c0,25,0,50.1,0,75.2c0,6.5-5.3,11.8-11.8,11.8c-3.3,0-6.7,0-10.2,0\r\n                                                c-6.5,0-11.8-5.3-11.8-11.8c0-25.1,0-50.2,0-75.2C55.5,5.9,60.8,0.6,67.3,0.6z\"/>\r\n                                        </g>\r\n                                    </g>\r\n                                </svg>\r\n\r\n                            }\r\n                        </PlayPauseButton>\r\n                    </PlayPauseContainer>}\r\n                    <Grid item xs={11}> {/* Sliders Grid Item */}\r\n                        {/* Main Slider for changing date */}\r\n                        { (dataParams.rangeType !== 'custom' && dataParams.nType !== \"characteristic\") && \r\n                            <LineSlider \r\n                                id=\"timeSlider\"\r\n                                value={dataParams.nIndex} \r\n                                // valueLabelDisplay=\"on\"\r\n                                onChange={handleChange} \r\n                                // getAriaValueText={valuetext}\r\n                                // valueLabelFormat={valuetext}\r\n                                // aria-labelledby=\"aria-valuetext\"\r\n                                min={1}\r\n                                max={dates.length}\r\n                                marks={(dateIndices.hasOwnProperty(currentData) && dateIndices[currentData].hasOwnProperty(dataParams.numerator)) && dateIndices[currentData][dataParams.numerator].map(date => { return { value: date }})}\r\n                                step={null}\r\n                                characteristic={dataParams.nType===\"characteristic\"}\r\n                        />}\r\n                        {/* Slider for bin date */}\r\n                        {/* {!customRange && \r\n                            <BinSlider \r\n                                value={dataParams.binIndex} \r\n                                valueLabelDisplay=\"auto\"\r\n                                onChange={handleBinChange} \r\n                                getAriaValueText={binValuetext}\r\n                                valueLabelFormat={binValuetext}\r\n                                aria-labelledby=\"aria-valuetext\"\r\n                                min={startDateIndex}\r\n                                step={1}\r\n                                max={startDateIndex+dates[currentData].length-1}\r\n                        />} */}\r\n                        {/* Slider for changing date range */}\r\n                        {dataParams.rangeType === 'custom' && <RangeSlider \r\n                            id=\"timeSlider\"\r\n                            value={[dataParams.nIndex-dataParams.nRange, dataParams.nIndex]} \r\n                            valueLabelDisplay=\"on\"\r\n                            onChange={handleRangeChange} \r\n                            getAriaValueText={valuetext}\r\n                            valueLabelFormat={valuetext}\r\n                            aria-labelledby=\"aria-valuetext\"\r\n                            min={1}\r\n                            max={350}\r\n                            marks={(dateIndices.hasOwnProperty(currentData) && dateIndices[currentData].hasOwnProperty(dataParams.numerator)) && dateIndices[currentData][dataParams.numerator].map(date => { return { value: date }})}\r\n                            step={null}\r\n                        />}\r\n                    </Grid>\r\n                    {(dataParams.rangeType !== 'custom' && dataParams.nType !== 'characteristic') && <InitialDate>{dates[0]}</InitialDate>}\r\n                    {(dataParams.rangeType !== 'custom' && dataParams.nType !== 'characteristic') && <EndDate>{dates.slice(-1,)[0]}</EndDate>}\r\n                </Grid>\r\n            </SliderContainer>\r\n        );\r\n    } else {\r\n        return <SliderContainer />\r\n    }\r\n}\r\n\r\nexport default DateSlider","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\nimport { chart, info } from '../config/svg';\r\nimport { colors } from '../config';\r\n\r\nimport { setPanelState } from '../actions';\r\n\r\nconst DockContainer = styled.div`\r\n    position:absolute;\r\n    left:calc(100% + 2px);\r\n    top:-2px;\r\n    display:flex;\r\n    @media (max-width:1024px) {\r\n        position:fixed;\r\n        display:block;\r\n        left:0px;\r\n        top:210px;\r\n    }\r\n    @media (max-width:600px) {\r\n        top:260px;\r\n    }\r\n`\r\n\r\nconst DockButton = styled.button`\r\n    background:${props => props.isActive ? colors.lightgray : colors.gray};\r\n    border:none;\r\n    outline:none;\r\n    padding:10px;\r\n    height:40px;\r\n    box-sizing:border-box;\r\n    font-family:'Lato', sans-serif;\r\n    font-weight:bold;\r\n    margin:2px 2px 0 0;\r\n    box-shadow: 2px 0px 5px rgba(0,0,0,0.7);\r\n    cursor:pointer;\r\n    border-radius: 5px;\r\n    transition:150ms transform, 150ms background;\r\n    font-size:115%;\r\n    display:inline-block;\r\n    svg {\r\n        width:20px;\r\n        height:20px;\r\n        fill:${props => props.isActive ? colors.darkgray : colors.white};\r\n    }\r\n    &:hover {\r\n        background:${props => props.isActive ? colors.white : colors.darkgray};\r\n        svg {\r\n            fill:${props => props.isActive ? colors.darkgray : colors.lightgray};\r\n        }\r\n    }\r\n    @media (max-width:1024px) {\r\n        height:40px;\r\n        width:40px;\r\n        margin-top:10px;\r\n        display:block;\r\n        border-radius:0;\r\n    }\r\n    \r\n    @media (max-width:600px) {\r\n        height:30px;\r\n        width:30px;\r\n        padding:0;\r\n        svg {\r\n            width:20px;\r\n            height:20px;\r\n        }\r\n    }\r\n`\r\n\r\nconst Dock = () => {\r\n    const panelState = useSelector(state => state.panelState);\r\n    const dispatch = useDispatch();\r\n    const handlePanelButton = (panel) => panelState[panel] ? dispatch(setPanelState({[panel]: false})) : dispatch(setPanelState({[panel]: true}))\r\n    return (\r\n        <DockContainer>\r\n            <DockButton\r\n                title=\"Show Line Chart\"\r\n                id=\"showLineChart\"\r\n                isActive={panelState.lineChart}\r\n                onClick={() => handlePanelButton('lineChart')}\r\n            >   \r\n                {chart}\r\n            </DockButton>\r\n            <DockButton\r\n                title=\"Show Tutorial\"\r\n                id=\"showTutorial\"\r\n                isActive={panelState.tutorial}\r\n                onClick={() => handlePanelButton('tutorial')}\r\n            >\r\n                {info}\r\n            </DockButton>\r\n        </DockContainer>\r\n    )\r\n} \r\n\r\nexport default Dock","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components'\r\n\r\nimport { colors } from '../config';\r\nimport { setPanelState } from '../actions';\r\n\r\nconst DragContainer = styled.div`\r\n    position:fixed;\r\n    overflow:hidden;\r\n    background:${colors.gray};\r\n    padding:20px 20px 0 20px;\r\n    box-sizing: border-box;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius: 0.5vh;\r\n    &.collapsed {\r\n        display:none;\r\n    };\r\n`\r\nconst DragButton = styled.button`\r\n    position:absolute;\r\n    left:0;\r\n    top:5px;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    cursor:move;\r\n    svg {\r\n        fill:white;\r\n        width:20px;\r\n        height:20px;\r\n    }\r\n`\r\n\r\n\r\nconst CollapseButton = styled.button`\r\n    position: absolute;\r\n    top: 3px;\r\n    right: 5px;\r\n    font-size: 200%;\r\n    cursor: pointer;\r\n    padding:0;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    color:white;\r\n    p {\r\n        font-size:50%;\r\n        display:inline;\r\n        font-family:'Montserrat', sans-serif;\r\n        line-height:1;\r\n    }\r\n    svg {\r\n        fill:white;\r\n        width:40px;\r\n        height:30px;\r\n    }\r\n`\r\n\r\nconst Draggable = (props) => {\r\n    const dispatch = useDispatch();\r\n    const open = useSelector(state => state.panelState[props.title]);\r\n\r\n    const [X, setX] = useState(props.defaultX);\r\n    const [Y, setY] = useState(props.defaultY);\r\n    const [isDragging, setIsDragging] = useState(false)\r\n\r\n    const listener = (e) => {\r\n        setX(prevWidth => prevWidth+e.movementX)\r\n        setY(prevHeight => prevHeight+e.movementY)\r\n    }\r\n\r\n    const touchListener = (e) => {\r\n        setX(e?.targetTouches[0]?.clientX-15)\r\n        setY(e?.targetTouches[0]?.clientY-15)\r\n    }\r\n\r\n    const removeListener = () => {\r\n        window.removeEventListener('mousemove', listener)\r\n        window.removeEventListener('mouseup', removeListener)\r\n        setIsDragging(false)\r\n    }\r\n\r\n    const removeTouchListener = () => {\r\n        window.removeEventListener('touchmove', touchListener);\r\n        window.removeEventListener('touchend', removeTouchListener);\r\n    }\r\n    \r\n    const handleDown = () => {\r\n        window.addEventListener('mousemove', listener)\r\n        window.addEventListener('mouseup', removeListener)\r\n        setIsDragging(true)\r\n    }\r\n\r\n    const handleTouch = () => {\r\n        window.addEventListener('touchmove', touchListener)\r\n        window.addEventListener('touchend', removeTouchListener)\r\n    }\r\n\r\n    const handleCollapse = () => dispatch(setPanelState({[props.title]: false}))\r\n\r\n    useEffect(() => {\r\n        setX(props.defaultX);\r\n        setY(props.defaultY);\r\n    },[open, props.defaultX, props.defaultY])\r\n\r\n    return (\r\n        <DragContainer style={{left:`${X}px`, top: `${Y}px`, zIndex: props.z || 1}} className={open ? '' : 'collapsed'} isDragging={isDragging}>\r\n            {props.content}\r\n            <DragButton \r\n                id=\"resize\"\r\n                onMouseDown={handleDown}\r\n                onTouchStart={handleTouch}\r\n                style={{zIndex:10}}\r\n            >\r\n                <svg viewBox=\"0 0 64 64\" x=\"0px\" y=\"0px\"><g><path d=\"M53.39,32.57a1.52,1.52,0,0,0-.33-1.63l-5.84-5.85a1.51,1.51,0,0,0-2.13,2.13l3.29,3.28H33.5V15.62l3.28,3.29a1.51,1.51,0,0,0,2.13-2.13l-5.85-5.84a1.5,1.5,0,0,0-2.12,0l-5.85,5.84a1.51,1.51,0,0,0,2.13,2.13l3.28-3.29V30.5H15.62l3.29-3.28a1.51,1.51,0,0,0-2.13-2.13l-5.84,5.85a1.5,1.5,0,0,0,0,2.12l5.84,5.85a1.51,1.51,0,0,0,2.13-2.13L15.62,33.5H30.5V48.38l-3.28-3.29a1.51,1.51,0,0,0-2.13,2.13l5.85,5.84a1.5,1.5,0,0,0,2.12,0l5.85-5.84a1.51,1.51,0,0,0-2.13-2.13L33.5,48.38V33.5H48.38l-3.29,3.28a1.51,1.51,0,0,0,2.13,2.13l5.84-5.85A1.51,1.51,0,0,0,53.39,32.57Z\"></path></g></svg>\r\n            </DragButton>\r\n            <CollapseButton onClick={handleCollapse}>×</CollapseButton>\r\n        </DragContainer>\r\n    )\r\n}\r\n\r\nexport default Draggable;","import React from 'react';\r\n\r\nconst highlightFeature = ( selector, backup=false ) => {\r\n    try {\r\n        if (backup && ((document.querySelector(selector).getBoundingClientRect().x < 0) || (document.querySelector('#variablePanel').getBoundingClientRect().x > window.innerWidth))) selector = backup \r\n        if (selector === null) return;\r\n        document.querySelector(selector).classList.add('highlighted')\r\n    } catch { return }\r\n}\r\n\r\nconst unhighlightFeature = ( selector, backup=false ) => {\r\n    try {\r\n        if (backup && ((document.querySelector(selector).getBoundingClientRect().x < 0) || (document.querySelector('#variablePanel').getBoundingClientRect().x > window.innerWidth))) selector = backup \r\n        if (selector === null) return;\r\n        document.querySelector(selector).classList.remove('highlighted')\r\n    } catch { return }\r\n}\r\n\r\nconst HoverButton = (props) => {\r\n    let {selector, backup } = props\r\n\r\n    return (\r\n        <button \r\n            className=\"hoverButton\"\r\n            onMouseEnter={() => highlightFeature(selector, backup)}\r\n            onMouseLeave={() => unhighlightFeature(selector, backup)}\r\n        >\r\n            {props.text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport const pages = {\r\n    \"welcome\": {\r\n        \"pageName\": \"Welcome\",\r\n        \"icon\": \"logo\",\r\n        \"content\": \r\n            <div>\r\n                <h1>Welcome to the US Covid Atlas v2</h1>\r\n                <h3>1/12 Notes</h3>\r\n                <p>\r\n                    Welcome to the refactored US Covid Atlas. We have greatly expanded the functionality, usability, and \r\n                    portability of the Atlas by refactoring the project into the frontend framework, React.\r\n                </p>\r\n                <p>\r\n                    While we've worked to maintain the general structure of the Atlas, we've introduced a few new features and\r\n                    interface elements we hope will make the Atlas more robust and usable for more people.\r\n                </p>\r\n                <p>\r\n                    This wiki serves as a useful reference guide for tutorials, features, and data description. We recommend exploring the \r\n                    rest of the US Covid Atlas website for more in depth documentation on methods, data sources, and FAQs.\r\n                </p>\r\n            </div>\r\n    },\r\n    \"getting-started\": {\r\n        \"pageName\": \"Getting Started\",\r\n        \"icon\": \"info\",\r\n        \"content\": \r\n            <div>\r\n                <h1>Getting Started with the Atlas</h1>\r\n                <p>\r\n                    In a quickly changing pandemic landscape, our tool connects COVID case data and community indicators across \r\n                    the United States from its beginning to today. The Atlas helps you access current, validated county-level data \r\n                    and spatial analysis to better understand the spread in communities and to bolster planning efforts.\r\n                </p>\r\n                <p>\r\n                    Features and use cases for the Atlas include identifying regional hotspots for mitigation, tracking patterns to plan ahead,\r\n                    interacting and forecasting the viral spread at both state and county levels, and making vulnerable communities visible. Read more on \r\n                    potential use cases on our <a href=\"./\">landing page</a>.\r\n                </p>\r\n                <hr />\r\n                <h3>Tutorials</h3>\r\n                <p>\r\n                    Below are tutorials to help you get started using the Atlas. Each has <HoverButton selector={null} text=\"Highlighted Text\" id=\"exText\" /> that will \r\n                    highlight the related interface component to help you get started.\r\n                </p>\r\n            </div>\r\n    },\r\n    \"new-features\": {\r\n        \"pageName\": \"New Features\",\r\n        \"icon\": \"info\",\r\n        \"content\": \r\n            <div>\r\n                <h3>Changelog 1/27</h3>\r\n                <p>Vaccination Data Updates</p>\r\n                <ul>\r\n                    <li>\r\n                        New vaccination data specifying first and second doses has been made available, and three new variables\r\n                        are ready for the Atlas: % of population who received a first dose, % of population who received a second dose, animated\r\n                        vaccines available for distribution (vaccines distributed to each state, but not yet administered).\r\n                    </li>\r\n                    <li>\r\n                        Vaccination data has been added to state-level tooltips\r\n                    </li>\r\n                    <li>\r\n                        Various bugs have been fixed\r\n                    </li>\r\n                </ul>\r\n                <h3>Changelog 1/12</h3>\r\n                <p>Refactor Update</p>\r\n                <ul>\r\n                    <li>The US Covid Atlas has been refactored into the React javascript framework with Redux used for state management</li>\r\n                    <li>Major features updates:\r\n                        <ul>\r\n                            <li>Improved temporal controls including custom date range and date selection</li>\r\n                            <li>Multiple geography selection and aggregation tools</li>\r\n                            <li>3D visualization mode</li>\r\n                            <li>Floating information panels for information and tutorials and line chart</li>\r\n                            <li>Improved performance and user interface</li>\r\n                            <li>Improved responsive design on phone and tablet</li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>New data sources:\r\n                        <ul>\r\n                            <li>New York Times county and state data sources are now available</li>\r\n                            <li>CDC county level data is now available, aggregated 7-Day rolling averages</li>\r\n                            <li>CDC state level vaccination data is now available</li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>New variables:\r\n                        <ul>\r\n                            <li>County level CDC data now includes testing volume and positivity rates</li>\r\n                            <li>Vaccination data at the state level includes distribution and administration numbers</li>\r\n                            <li>Time scale (cumulative, daily new, 7 day average) are now selected in the timeline panel</li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n    },\r\n    \"interface\":{\r\n        \"pageName\": \"Interface\",\r\n        \"icon\": \"info\",\r\n        \"content\": \r\n        <div>\r\n            <h1>Interface Overview</h1>\r\n            <p>\r\n                The interface for navigating and controlling the map contains 4 main panels and the map itself. This page will briefly describe the functions of each panel and where to find them. <HoverButton selector={null} text=\"Highlighted Text\" id=\"exText\" /> will \r\n                highlight the relevant interface feature to help easily identify it.\r\n            </p>\r\n            <h3>Data Sources &amp; Map Variables</h3>\r\n            <p>\r\n                The <HoverButton selector=\"#variablePanel\" backup=\"#showHideLeft\" text=\"Data Sources and Map Variables Panel\" /> contains\r\n                the controls to change data sources, the variable being visualized, how it is visualized, and any informational overlays.\r\n            </p>\r\n            <p>\r\n                The <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/> selection contains the available variables\r\n                for your selected dataset, including data like cases, deaths, testing rates, forecasting, and community health factors.\r\n            </p>\r\n            <p>\r\n                The <HoverButton selector=\"#dateSelector\" text=\"Timescale\" /> dropdown can change the aggregation over time between daily, weekly, cumulative, or custom date ranges. \r\n                The <HoverButton selector=\"#binModeSwitch\" text=\"Binning Switch\" /> can change between fixed bins relative to the today and bins relative to the selected date. \r\n            </p>\r\n            <p>\r\n                The <HoverButton selector=\"#geographySelect\" backup=\"#showHideLeft\" text=\"Geography\"/> selector shows the relevant geography (county or state) for your selected variable.\r\n                The <HoverButton selector=\"#datasetSelect\" backup=\"#showHideLeft\" text=\"Data Source\"/> selector contains the available dataset for your chosen variable and geography.\r\n            </p>\r\n            <p>\r\n                The <HoverButton selector=\"#mapType\" backup=\"#showHideLeft\" text=\"Map Type\"/> buttons change how the map is colored and how the data is symbolized.\r\n                Natural breaks (jenks) uses a non-linear algorithm to classify (bin) data into groups, box map uses the same concept as a box plot chart, and hotspots \r\n                identify clusters of high and low rates based on LISA methods. Read more on the <a href=\"./methods.html\" target=\"_blank\" rel=\"noopener noreferrer\">methods</a> page.\r\n            </p>\r\n            <p>\r\n                The <HoverButton selector=\"#visualizationType\" backup=\"#showHideLeft\" text=\"Visualization Type\"/> buttons change the visual representation of the map. The 2D map is \r\n                a traditional, flat map, the 3D map scales the vertical height of geographies to reflect the selected variable, and the cartogram map scales the geographies as circles \r\n                based on the variable values.\r\n            </p>\r\n            <p>\r\n                The <HoverButton selector=\"#overlaysResources\" backup=\"#showHideLeft\" text=\"Overlays and Resources\"/> selection boxes contain useful contextual information, and highlight \r\n                potentially vulnerable areas.\r\n            </p>\r\n            <h3>Timeline</h3>\r\n            <p>\r\n                The <HoverButton selector=\"#timelinePanel\" text=\"Timeline Panel\" /> contains all of the temporal controls for the Atlas. Here, you can select a date, change the timescale (daily, weekly, etc.)\r\n                and change how the data is binned - relative to the selected date or relative to the most recent date.\r\n            </p>\r\n            <p>\r\n                The <HoverButton selector=\"#timeSlider\" text=\"Slider\" /> can change the date selection for your selected variable. \r\n                You can animate the map by clicking the <HoverButton selector=\"#playPause\" text=\"Play/Pause Button\" />.\r\n            </p>\r\n            <h3>Aggregating Geographies</h3>\r\n            <p>\r\n                To select multiple geographies, there are two controls. First you can hold down <b>Control</b> on your keyboard and click on states or counties on the map. Each will be highlighted and added \r\n                to the line chart and report panel. Additionally, you may hold down <b>Shift</b> and draw a box to select multiple areas. The <HoverButton selector=\"#boxSelect\" text=\"Selection Box\"/> button \r\n                in the bottom right also initiates area selection.\r\n            </p>\r\n            <h3>Sharing a Map</h3>\r\n            <p>\r\n                Use the <HoverButton selector=\"#shareButton\" text=\"Share Button\"/> in the bottom right to generate a link to the map you are currently viewing. The map link will include the map coordinates you are viewing, the data source, variable, geography,\r\n                and map mode. The link will be directly copied to your clipboard to share with your community, on social media, or to advocate for policy change.\r\n            </p>\r\n\r\n            \r\n        </div>\r\n    },\r\n    \"datasets\": {\r\n        \"pageName\": \"Data Sources\",\r\n        \"icon\": \"info\",\r\n        \"content\":\r\n            <div>\r\n                <h1 id=\"data-sources\">Data Sources</h1>\r\n                <p><i>Read more detailed information <a href=\"https://theuscovidatlas.org/data.html\">here</a></i></p>\r\n                <h2 id=\"covid-data\">COVID Data</h2>\r\n                <h3 id=\"-usa-facts-https-usafacts-org-visualizations-coronavirus-covid-19-spread-map-\"><a href=\"https://usafacts.org/visualizations/coronavirus-covid-19-spread-map\">USA Facts</a></h3>\r\n                <p>Available at the county level this data aggregates from CDC, state- and local-level public health agencies. </p>\r\n                <h3 id=\"-1p3a-https-coronavirus-1point3acres-com-en-\"><a href=\"https://coronavirus.1point3acres.com/en\">1P3A</a></h3>\r\n                <p>Available at the state and county level, 1P3A was the initial, crowdsourced data project that served as a volunteer project led by 1P3acres.com and Dr. Yu Gao, Head of Machine Learning Platform at Uber. </p>\r\n                <h3 id=\"-new-york-times-https-github-com-nytimes-covid-19-data-\"><a href=\"https://github.com/nytimes/covid-19-data\">New York Times</a></h3>\r\n                <p>The New York Times has made data available aggregated from dozens of journalists working to collect and monitor data from new conferences. They communicate with public officials to clarify and categorize cases. </p>\r\n                <h3 id=\"-cdc-https-covid-cdc-gov-covid-data-tracker-\"><a href=\"https://covid.cdc.gov/covid-data-tracker/\">CDC</a></h3>\r\n                <p>CDC data includes detailed historic testing data and case data aggregated to rolling 7-day averages.</p>\r\n                {/* <h3 id=\"-forecasting-statistics-https-github-com-yu-group-covid19-severity-prediction-\"><a href=\"https://github.com/Yu-Group/covid19-severity-prediction\">Forecasting Statistics</a></h3>\r\n                <p>The Yu Group at UC Berkeley Statistics and EECS has compiled, cleaned and continues to update a large corpus of hospital- and county-level data from a variety of public sources to aid data science efforts to combat COVID-19 (see covidseverity.com).</p> */}\r\n                <h2 id=\"county-and-state-data\">County and State Data</h2>\r\n                <h3 id=\"-covidcaremap-https-github-com-covidcaremap-covid19-healthsystemcapacity-tree-v0-2-data-\"><a href=\"https://github.com/covidcaremap/covid19-healthsystemcapacity/tree/v0.2/data\">COVIDCareMap</a></h3>\r\n                <p>Healthcare System Capacity includes Staffed beds, Staffed ICU beds, Licensed Beds by County. The data is from 2018 facility reports with additions/edits allowed in real-time.</p>\r\n                <h3 id=\"-american-community-survey-https-www-census-gov-programs-surveys-acs-\"><a href=\"https://www.census.gov/programs-surveys/acs\">American Community Survey</a></h3>\r\n                <p>The American Community Survey data contains demographic information about states, counties, and other geographic units. We use ACS population counts to generate normalized rates for COVID cases and deaths.</p>\r\n                <h3 id=\"-county-health-rankings-roadmaps-chr-r-https-www-countyhealthrankings-org-explore-health-rankings-rankings-data-documentation-\"><a href=\"https://www.countyhealthrankings.org/explore-health-rankings/rankings-data-documentation\">County Health Rankings &amp; Roadmaps (CHR&amp;R)</a></h3>\r\n                <p>CHR&amp;R includes socioeconomic data, health access and care metrics, and demographic information about counties and states. CHR&amp;R is a collaboration between the Robert Wood Johnson Foundation and the University of Wisconsin Population Health Institute.</p>\r\n            </div>\r\n    },\r\n    \"variables\":{\r\n        \"pageName\": \"Variables\",\r\n        \"icon\": \"info\",\r\n        \"content\": \r\n            <div>\r\n                <h1>Variables</h1>\r\n                <h3>Cases</h3>\r\n                <i>Times-series data</i>\r\n                <ul>\r\n                    <li>Confirmed Count: Number of cases reported in selected time scale</li>\r\n                    <li>Confirmed Count per 100K Population: Number of cases normalized to population and scaled to number of cases per 100,000 residents of the county or state</li>\r\n                    <li>Confirmed Count per Licensed Bed: Number of cases normalized to the available beds in the county or state</li>\r\n                </ul>\r\n\r\n                <h3>Deaths</h3>\r\n                <i>Times-series data</i>\r\n                <ul>\r\n                    <li>Death Count: Number of deaths reported in selected time scale</li>\r\n                    <li>Death Count per 100K Population: Number of deaths normalized to population and scaled to number of deaths per 100,000 residents of the county or state</li>\r\n                    <li>Death Count per Licensed Bed: Number of deaths normalized to the available beds in the county or state</li>\r\n                </ul>\r\n\r\n                <h3> Testing</h3>\r\n                <i>Times-series data</i>\r\n                <ul>\r\n                    <li>7 Day Testing Positivity Rate %: The percentage of COVID tests returning positive results, aggregated to a 7-day rolling average</li>\r\n                    <li>7 Day Testing Capacity: The number of COVID tests administered in the county or state normalized to tests per 100,000 population</li>\r\n                    <li>7 Day Confirmed Cases per Testing %: The number of positive COVID cases per number of COVID tests as a percentage</li>\r\n                </ul>\r\n\r\n                <h3>Vaccination</h3>\r\n                <i>Times-series data</i>\r\n                <ul>\r\n                    <li>Vaccinations Administered per 100K Population: The number of vaccination doses that have been administered in the state, normalized to number of doses administered per 100K population.</li>\r\n                    <li>Vaccinations Distributed per 100K Population: The total number of vaccination doses that have been distributed in the state, normalized to number of doses distributed per 100K population. </li>\r\n                </ul>\r\n                \r\n                {/* <h3>Forecasting</h3>\r\n                <i>Current snapshot data</i>\r\n                <ul>\r\n                    <li>Severity Index: Data and models (updated daily) for forecasting COVID-19 severity for individual counties and hospitals in the US</li>\r\n                </ul> */}\r\n\r\n                <h3>Community Health</h3>\r\n                <i>Characteristic data</i>\r\n                <ul>\r\n                    <li>Uninsured % (Community Health Factor): Percentage of the county or state that does not have health insurance</li>\r\n                    <li>Over 65 Years % (Community Health Context): Percentage of the county or state this is over 65 years of age</li>\r\n                    <li>Life expectancy (Length and Quality of Life): Average life expectancy for individuals living in the state or county</li>\r\n                </ul>\r\n            </div>\r\n    },\r\n    \"bug-report\":{\r\n        \"pageName\": \"Bug Report\",\r\n        \"icon\": \"info\",\r\n        \"content\": \r\n        <div>\r\n            <h1>Found a bug or have a suggestion?</h1>\r\n            \r\n            <p>\r\n                The US Covid Atlas team is always working to improve the platform and its ability to generate insights.\r\n            </p>\r\n            <p>\r\n                Please contact the team at <a href=\"mailto:contact@theuscovidatlas.org\">contact@theuscovidatlas.org</a> or reach out on social media below.\r\n            </p>\r\n            <div className=\"social-container\">\r\n                <a href=\"https://twitter.com/covid_atlas\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <img src=\"./icons/twitter-icon.png\" alt=\"Twitter Icon\" />\r\n                </a>\r\n                <a href=\"https://github.com/GeoDaCenter/covid\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <img src=\"./icons/github-icon.png\" alt=\"Twitter Icon\" />\r\n                </a>\r\n            </div>\r\n        </div>\r\n    },\r\n    // tutorials section\r\n    \"choropleth-tutorial\": {\r\n        \"pageName\":null,\r\n        \"content\": \r\n            <div>\r\n                <h1>Choropleth Maps</h1>\r\n                <p>\r\n                    Choropleth maps use color to show the count or percentage of a variable.\r\n                </p>\r\n                <p> \r\n                    The Atlas uses color to show the count and percentage of all coronavirus cases, daily new cases, deaths, and hospital beds. \r\n                    Use choropleth maps to see data about the virus on a particular day.\r\n                </p>\r\n                <p>\r\n                    For more details on how the Atlas created the choropleth maps, please see the <a href=\"./methods.html\">Methods page</a>.\r\n                </p>\r\n                <hr/>\r\n                <ol className=\"tutorialSteps\">\r\n                    <li>\r\n                        <p>\r\n                            The choropleth map is the default display for the atlas webpage. To change data settings, \r\n                            use the <HoverButton selector=\"#variablePanel\" backup=\"#showHideLeft\" text=\"Variables Panel\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Select the <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/> you would like to map. \r\n                            You can also select a different <HoverButton selector=\"#geographySelect\" backup=\"#showHideLeft\" text=\"Geography\"/> and <HoverButton selector=\"#datasetSelect\" backup=\"#showHideLeft\" text=\"Data Source\"/> if\r\n                             available for your chosen variable.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click on \"Natural Breaks\" in the <HoverButton selector=\"#mapType\" backup=\"#showHideLeft\" text=\"Map Type\"/> button group, if not already selected.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Use the <HoverButton selector=\"#bottomPanel\" text=\"Color Ramp\"/> at the bottom of the screen to interpret the count or percentage for each county or state.\r\n                            Brighter reds represent larger counts and percentages. Paler yellows represent smaller counts and percentages.\r\n                        </p>\r\n                    </li>\r\n                </ol>\r\n            </div>\r\n    },\r\n    \"hotspot-tutorial\": {\r\n        \"pageName\":null,\r\n        \"content\": \r\n            <div>\r\n                <h1>Hotspots</h1>\r\n                <p>\r\n                    Local clusters are areas that neighbor one another and share a particular quality, such as high numbers of Covid-19 cases. A hot spot is an area that is significantly different from the areas surrounding it. A hot spot may be one place or a cluster of places.\r\n                    <br/><br/>\r\n                    The Atlas shows patterns in the spread of the disease by displaying hot spots and clusters. See the Methods page for details about detecting clusters.\r\n                    <br/><br/>\r\n                    The Atlas shows four types of hot spots:\r\n                    <ul>\r\n                        <li>\r\n                            <b>High-High:</b> Areas with high numbers whose neighbors also have high numbers. Bright red counties have a significantly high number of cases or deaths, or significantly fewer hospital beds per case. Neighbors for these areas also have a high number of cases.\r\n                        </li>\r\n                        <br/>\r\n                        <li>\r\n                            <b>Low-Low:</b> Areas with low numbers whose neighbors also have low numbers. Bright blue counties have significantly fewer cases or deaths, or significantly more hospital beds per case. Neighbors for these areas also have a low number of cases.\r\n                        </li>\r\n                        <br/>\r\n                        <li>\r\n                            <b>High-Low:</b> Areas with high numbers whose neighbors have low numbers. This type of hot spot is also called an outlier, because it differs so much from its neighbors. Pale red counties have more cases, deaths, or fewer hospital beds per case than do their immediate neighbors. The surrounding areas may experience significant spread of the virus in future weeks.\r\n                        </li>\r\n                        <br/>\r\n                        <li>\r\n                            <b>Low-High:</b> Areas with low numbers whose neighbors have high numbers. This type of hot spot is also called an outlier, because it differs so much from its neighbors. Pale blue counties have fewer cases, deaths, or more hospital beds per case than do their immediate neighbors. These areas may experience significant spread of the virus from surrounding areas in future weeks.\r\n                        </li> \r\n                    </ul>\r\n                    Use local clustering to explore geographic patterns of the virus and to help locate areas that will soon be significantly affected by the virus.\r\n                </p>\r\n                <hr/>\r\n                <ol className=\"tutorialSteps\">\r\n                    <li>\r\n                        <p>\r\n                            Select the <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/> you would like to map from the <HoverButton selector=\"#variablePanel\" backup=\"#showHideLeft\" text=\"Variables Panel\" />.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Select \"Hotspot\" under the <HoverButton selector=\"#mapType\" backup=\"#showHideLeft\" text=\"Map Type\"/> selection.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Use the <HoverButton selector=\"#bottomPanel\" text=\"Color Ramp\"/> at the bottom of the screen to see if a county falls into a hotspot category. \r\n                            <br/><br/>\r\n                            Reds represent high numbers and percentages and blues represent low counts and percentages. Gray represents areas that do not fall into a hotspot.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Use the above hot spot types to determine if a county or state on the map is significantly affected by Covid-19: High-High and High-Low spots.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Look for neighboring areas that are significantly affected. High-Low and Low-High spots may show an emerging trend.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click on a county or state in the map for a popup containing all data variables, socioeconomic indicators, and a disease forecast for that area.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Move the time <HoverButton selector=\"#timeSlider\" text=\"Slider\" /> at the top of the map to see counts and percentages of cases, deaths, or hospital beds on different dates.\r\n                        </p>\r\n                    </li>\r\n                </ol>\r\n            </div>\r\n    },\r\n    \"emerging-tutorial\": {\r\n        \"pageName\":null,\r\n        \"content\": \r\n            <div>\r\n                <h1>Emerging Trends</h1>\r\n                <p>\r\n                    We can make educated guesses about the future spread of the pandemic by using data from the past and present. It is important to look at several variables together when looking for emerging virus trends.\r\n                    <br/><br/>\r\n                    Use Choropleth maps, Hotspots, and the Time Animated Slider and Graph to find areas that may soon be significantly affected by Covid-19.\r\n                </p>\r\n                <hr/>\r\n                <ol className=\"tutorialSteps\">\r\n                    <h4>Choropleth: Map Today’s Data for Individual Counties</h4>\r\n                    <li>\r\n                        <p>\r\n                            Select Confirmed Count as the <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/>.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click on the \"Natural Breaks\" button under <HoverButton selector=\"#mapType\" backup=\"#showHideLeft\" text=\"Map Type\"/>. Bright red counties have a high number of Covid-19 cases.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Change the <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/> to Confirmed Count per 100K Population. \r\n                            Now bright red counties show populations with a high percentage of cases. \r\n                            The percentage is useful for looking at counties with small populations and the severity of the virus in a place.\r\n                            <br/><br/>\r\n                            The count and the percentage of cases in a county are important for understanding the impact of the virus, but they only show one day of data. \r\n                            Next, select \"Hotspot\" under <HoverButton selector=\"#mapType\" backup=\"#showHideLeft\" text=\"Map Type\"/> to see how cases compare across counties.\r\n\r\n                        </p>\r\n                    </li>\r\n                    <hr/>\r\n                    <h4>Hotspots: Map Today’s Data Across Counties</h4>\r\n                    <li>\r\n                        <p>\r\n                            Select Confirmed Count as the <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/>.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click on \"Hotspots\" under <HoverButton selector=\"#mapType\" backup=\"#showHideLeft\" text=\"Map Type\"/>. Bright red counties have high case counts and are surrounded by similar areas. These regions are currently significantly affected by Covid-19.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Find counties in pale blue. These are outlier counties: they have a low number of cases compared to the high number of cases in neighboring counties. This means that pale blue counties may soon be affected by Covid-19 through spread from nearby counties.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Find counties in pale red. These are also outlier counties, but they have a high case count compared to neighboring counties. Areas close to pale red counties may soon be affected by Covid-19 as the virus spreads.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Change the <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/> to Confirmed Count per 100K Population and explore clusters of high virus percentages and outliers. \r\n                            The percentage is useful for looking at counties with small populations and for comparing counties.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Explore the variables with different time aggregation (daily, weekly, custom, and cumulative) \r\n                            using the <HoverButton selector=\"#dateSelector\" backup=\"#showHideLeft\" text=\"Date Range\" /> selector. \r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Clusters of high counts and percentages of new cases may also mean that nearby areas will soon see an increase in virus spread.\r\n                            <br/><br/>\r\n                            Local clustering shows current groups of counties that are significantly affected and nearby places that may soon see an increase in virus spread. Next, use the Time Graph to see the history of the virus spread to learn about the trajectory of new cases.\r\n                        </p>\r\n                    </li>\r\n                </ol>\r\n            </div>\r\n    },\r\n    \"change-tutorial\": {\r\n        \"pageName\":null,\r\n        \"content\": \r\n            <div>\r\n                <h1>Change Over Time</h1>\r\n                <p>\r\n                    How a variable changed over time offers insights into what will happen next. The Atlas uses the animated slider and the time graph to show the history of Covid-19’s spread. Read the <a href=\"./methods.html\">Methods</a> page for more information on data limitations and reporting lags.\r\n                </p>\r\n                <hr/>\r\n                <ol className=\"tutorialSteps\">\r\n                    <p><b>Slider</b></p>\r\n                    <li>\r\n                        <p>\r\n                            Select the <HoverButton selector=\"#newVariableSelect\" backup=\"#showHideLeft\" text=\"Variable\"/> you would like to map from the <HoverButton selector=\"#variablePanel\" backup=\"#showHideLeft\" text=\"Variables Panel\" />.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            From the map, locate the animated <HoverButton selector=\"#timeSlider\" text=\"Slider\" /> at the top.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click and drag your cursor along the slider to change the date of the map display.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click the <HoverButton selector=\"#playPause\" text=\"Play/Pause Button\"/> to watch the data change over time. You can pan and scroll on the map as it is animating.\r\n                        </p>\r\n                    </li>\r\n                    <p><b>Time Graph</b></p>\r\n                    <li>\r\n                        <p>\r\n                            The <HoverButton selector=\"#showLineChart\" text=\"Line Chart\"/> button opens a panel that shows new cases in the US since January 2020.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            The graph will animate with the <HoverButton selector=\"#timeSlider\" text=\"Slider\" />, highlighting each new day of data as the slider moves forward in time.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click on a county to show the entire history of daily new cases for that county.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                        Adjusting the animated <HoverButton selector=\"#timeSlider\" text=\"Slider\" /> will update the line chart, as well as tooltips and data information.\r\n                        </p>\r\n                    </li>\r\n                </ol>\r\n            </div>\r\n    },\r\n}","import styled from 'styled-components';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { colors } from '../config';\r\n\r\nexport const StyledDropDown = styled(FormControl)`\r\n  margin:0 10px ${props => props.component === 'radios' ? '20' : '40'}px 0!important;\r\n  color:white;\r\n  padding:0;\r\n  .MuiInputBase-root {\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n  .MuiFormLabel-root {\r\n    color: white;\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n  .Mui-focused {\r\n    color: white !important;\r\n  }\r\n  .MuiInput-underline:before {\r\n    border-bottom:1px solid rgba(255,255, 255, 0.42);\r\n  }\r\n  .MuiInput-underline:after {\r\n    border-bottom: 2px solid white\r\n  }\r\n  .MuiInputBase-root {\r\n    color: white;\r\n    .MuiSvgIcon-root {\r\n      color: rgba(255,255,255,0.54);\r\n    },\r\n    .MuiPopover-paper {\r\n      color:white;\r\n    }\r\n  }\r\n  .MuiFormGroup-root {\r\n    .MuiFormControlLabel-root{\r\n      color:white;\r\n      span {\r\n        font-family: 'Lato', sans-serif;\r\n      }\r\n      .MuiRadio-root {\r\n        color: rgba(255,255,255,0.54);\r\n      }\r\n    }\r\n  }\r\n  .MuiRadio-root {\r\n    color:white;\r\n  }\r\n  .MuiRadio-colorSecondary.Mui-checked {\r\n    color:white;\r\n  }\r\n  div.radioContainer {\r\n    display:block;\r\n      .MuiFormControlLabel-root {\r\n        margin-right:0;\r\n      }\r\n      button {\r\n        transform:translateY(4px);\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledDropDownNoLabel = styled(StyledDropDown)`\r\n  .MuiFormLabel-root {\r\n    display:none;\r\n  }\r\n  padding:10px 0 5px 20px !important;\r\n  label + .MuiInput-formControl {\r\n    margin-top:0;\r\n  }\r\n`\r\n\r\nexport const SwitchContainer = styled(Grid)`\r\n  padding-top:4px !important;\r\n  p { \r\n    display: inline;\r\n    color:white;\r\n    transform:translateY(5px);\r\n  }\r\n  span.MuiSwitch-track {\r\n      background-color:${colors.buttongray};\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked {\r\n      color:${colors.lightblue};\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked + .MuiSwitch-track {\r\n      background-color: ${colors.lightblue};\r\n  }\r\n  .MuiSwitch-colorSecondary:hover {\r\n      background-color:${colors.lightblue}55;\r\n  }\r\n`\r\n\r\nexport const BinsContainer = styled.div`\r\n  display:inline-block;\r\n  transform:translateY(10px);\r\n  opacity: ${props => props.disabled ? 0.25 : 1};\r\n  pointer-events: ${props => props.disabled ? 'none' : 'initial'};\r\n  p { \r\n    display: inline;\r\n    color:white;\r\n    transform:translateY(5px);\r\n  }\r\n  span.MuiSwitch-track {\r\n      background-color:${colors.buttongray};\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked {\r\n      color:${colors.lightblue};\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked + .MuiSwitch-track {\r\n      background-color: ${colors.lightblue};\r\n  }\r\n  .MuiSwitch-colorSecondary:hover {\r\n      background-color:${colors.lightblue}55;\r\n  }\r\n`","import React, {useState, useEffect} from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport { colors } from '../config';\r\nimport { pages } from '../wiki';\r\nimport { StyledDropDown } from '../styled_components';\r\n\r\nconst InfoContainer = styled.div`\r\n    background: ${colors.gray};\r\n    color: ${colors.white};\r\n    padding: 0;\r\n    overflow: hidden;\r\n    display: ${props => props.active ? 'initial' : 'none'};\r\n    border-radius: 4px;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    svg {\r\n        width: 10px;\r\n        height: 10px;\r\n        padding: 5px;\r\n        fill: ${colors.white};\r\n        display: inline;\r\n        transition: 250ms all;\r\n        cursor: pointer;\r\n    }\r\n    a {\r\n       color: ${colors.yellow}; \r\n       text-decoration:none;\r\n    }\r\n    @media (max-width:1024px) {\r\n        right:50%;\r\n        bottom:50%;\r\n        transform: translate(50%, 50%);\r\n        overflow:hidden;\r\n    }\r\n`\r\n\r\nconst Drawer = styled.div`\r\n    position:absolute;\r\n    left:5px;\r\n    top:25px;\r\n    max-width:120px;\r\n    @media(max-width:1024px) {\r\n        width:100%;\r\n    }\r\n`\r\n\r\nconst DrawerButton = styled.button`\r\n    display:block;\r\n    text-align:left;\r\n    background:none;\r\n    color:${props => props.active ? colors.lightblue : colors.white};\r\n    border:none;\r\n    outline:none;\r\n    line-height:2;\r\n    transition:250ms;\r\n    font-family:'Lato', sans-serif;\r\n    opacity: ${props => props.active ? 1 : 0.6};\r\n    &:hover {\r\n        opacity:1;\r\n    }\r\n    @media(max-width:1024px) {\r\n        display:none;\r\n    }\r\n`\r\n\r\nconst BodyContainer = styled.div`\r\n    position:absolute;\r\n    left: 120px;\r\n    padding: 0 50px 50px 0;\r\n    box-sizing:border-box;\r\n    top:25px;\r\n    transform:translateX(25px);\r\n    overflow-y:scroll;\r\n    height:calc(100% - 25px);\r\n    width:calc(100% - 105px);\r\n    font-size:115% !important;\r\n    line-height:1.75 !important;\r\n    .social-container {\r\n        a {\r\n            img {\r\n                width: 25px;\r\n                height: 25px;\r\n                padding: 5px 10px 0px 0px;\r\n                transition: all 250ms ease 0s;\r\n                opacity: 0.7;\r\n                &:hover {\r\n                    opacity:1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    button.hoverButton {\r\n        background:none;\r\n        border:none;\r\n        font-size:100% !important;\r\n        border-bottom:1px solid ${colors.yellow};\r\n        outline:none;\r\n        color:${colors.yellow};\r\n        padding:0;\r\n        &:after {\r\n            content:' ⚼';\r\n        }\r\n    }\r\n    @media (max-width:1024px) {\r\n        left:0;\r\n        width:calc(100% + 15px);\r\n        height:calc(100% - 75);\r\n        top:75px;\r\n        font-size:100% !important;\r\n    }\r\n`\r\n\r\nconst TutorialButton = styled.button`\r\n    background:none;\r\n    outline:none;\r\n    box-sizing:border-box;\r\n    border:1px solid white;\r\n    cursor:pointer;\r\n    text-align:left;\r\n    padding:5px;\r\n    width:calc(50% - 10px);\r\n    margin: 5px;\r\n    display:inline-block;\r\n    color:${colors.white};\r\n    font-family:'Lato', sans-serif;\r\n    padding:10px;\r\n    transition:250ms all;\r\n    &:hover {\r\n        background: ${colors.yellow};\r\n        color: ${colors.gray};\r\n    }\r\n    h3, p {\r\n        padding:0;\r\n        margin:0;\r\n    }\r\n`\r\n\r\nconst PagesDropDown = styled(StyledDropDown)`\r\n    position:absolute;\r\n    top:0;\r\n    visibility:hidden;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n    @media (max-width:1024px) {\r\n        visibility:visible;\r\n    }\r\n`\r\n\r\nconst tutorialInfo = [\r\n    {\r\n        \"title\":\"Choropleth Maps\",\r\n        \"subtitle\": \"Explore counts and percentages of cases, deaths, hosipital beds, and testing data.\",\r\n        \"link\": \"choropleth-tutorial\"\r\n    },\r\n    {\r\n        \"title\":\"Hotspots\",\r\n        \"subtitle\": \"Find groups of counties and states affected by the virus.\",\r\n        \"link\": \"hotspot-tutorial\"\r\n    },\r\n    {\r\n        \"title\":\"Emerging Trends\",\r\n        \"subtitle\": \"Locate areas that will soon be significantly affected by COVID.\",\r\n        \"link\": \"emerging-tutorial\"\r\n    },\r\n    {\r\n        \"title\":\"Change Over Time\",\r\n        \"subtitle\": \"See the history of the virus by county and state.\",\r\n        \"link\": \"change-tutorial\"\r\n    },\r\n]\r\n\r\n\r\nconst InfoBox = () => {\r\n    const panelOpen = useSelector(state => state.panelState.tutorial)\r\n    const [currArticle, setCurrArticle] = useState(\"welcome\")\r\n    \r\n    const handleSelect = (e) => {\r\n        setCurrArticle(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <InfoContainer active={panelOpen}>\r\n            <Drawer>\r\n                {Object.keys(pages).map(page => \r\n                    pages[page][\"pageName\"] !== null ? \r\n                    <DrawerButton \r\n                            onClick={() => setCurrArticle(page)}\r\n                            active={currArticle === page}\r\n                        >\r\n                                {pages[page][\"pageName\"]}\r\n                    </DrawerButton>\r\n                    : ''\r\n                )}\r\n            </Drawer>\r\n            <PagesDropDown id=\"selectPage\">\r\n                    <Select \r\n                        value={currArticle} \r\n                        id=\"numerator-select\"\r\n                        onChange={handleSelect}\r\n                    >\r\n                        \r\n                        {Object.keys(pages).map(page => \r\n                            pages[page][\"pageName\"] !== null ? \r\n                            <MenuItem \r\n                                value={page} \r\n                                key={page}\r\n                                >\r\n                                        {pages[page][\"pageName\"]}\r\n                            </MenuItem>\r\n                            : \r\n                            <MenuItem \r\n                                value={page} \r\n                                key={page}\r\n                                style={{display:'none'}}\r\n                                >\r\n                                        {pages[page][\"pageName\"]}\r\n                            </MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </PagesDropDown>\r\n            <BodyContainer>\r\n                {pages[currArticle]['content']}\r\n                {(currArticle === \"getting-started\") && \r\n                    tutorialInfo.map(tutorial => \r\n                        <TutorialButton onClick={() => setCurrArticle(tutorial.link)}>\r\n                            <h3>{tutorial.title}</h3>\r\n                            <p>{tutorial.subtitle}</p>\r\n                        </TutorialButton>\r\n                    )\r\n                }\r\n                {currArticle.includes('tutorial') && <TutorialButton onClick={() => setCurrArticle('getting-started')}>Return to Tutorials</TutorialButton>}\r\n            </BodyContainer>\r\n        </InfoContainer>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from 'react';\r\nimport { Tooltip } from '../components';\r\n\r\nconst BinsList = (props) => {\r\n    let bins = props.data;\r\n\r\n    if (bins.slice(-1,)[0] === '>'+bins.slice(-2,-1)[0]) {\r\n        bins.splice(-2,1)\r\n    }\r\n    return (\r\n        (bins.map((bin, index) => \r\n            <div className=\"bin label\" key={`${bin}_${index}`}>\r\n                {bin.indexOf('tooltip') === -1 && bin}\r\n                {bin.indexOf('tooltip') !== -1 && <span>{bin.split(' tooltip:')[0]}<Tooltip id={bin.split(' tooltip:')[1]} /></span>}\r\n            </div>\r\n            )\r\n        )\r\n    )\r\n}\r\n\r\nexport default BinsList;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport BinsList from './binsList';\r\n\r\nconst LegendContainer = styled.div`\r\n    width:100%;\r\n    padding:10px;\r\n    margin:0;\r\n    box-sizing: border-box;\r\n    div.MuiGrid-item {\r\n        padding:5px 5px 0 5px;\r\n    }\r\n`\r\n\r\nconst LegendTitle = styled.h3`\r\n    text-align: center;\r\n    font-family:'Playfair Display', serif;\r\n    padding:0;\r\n    font-weight:normal;\r\n    margin:0;\r\n    color:white;\r\n`\r\n\r\nconst BinLabels = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    margin-top:0px;\r\n    box-sizing: border-box;\r\n    padding: 0 ${props => props.binLength > 6 ? 100/props.binLength/2-1 : 0}%;\r\n    .bin { \r\n        height:10px;\r\n        display: inline;\r\n        border:0;\r\n        margin:0;\r\n        flex:2;\r\n        color:white;\r\n        font-size:10px;\r\n        text-align: center;\r\n    }\r\n    .bin:nth-of-type(1) {\r\n        transform: ${props => props.firstBinZero ? 'translateX(-45%)' : 'none'};\r\n    }\r\n`\r\nconst BinBars = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    margin-top:3px;\r\n    box-sizing: border-box;\r\n    .bin { \r\n        height:5px;\r\n        display: inline;\r\n        flex:1;\r\n        border:0;\r\n        margin:0;\r\n    }\r\n    .bin:nth-of-type(1) {\r\n        transform: ${props => props.firstBinZero ? 'scaleX(0.35)' : 'none'};\r\n    }\r\n`\r\n\r\n\r\nconst Legend =  () => {\r\n    \r\n    const mapParams = useSelector(state => state.mapParams);\r\n    const dataParams = useSelector(state => state.dataParams);\r\n\r\n    return (\r\n        <LegendContainer>\r\n            <Grid container spacing={2} id='legend-bins-container'>\r\n                <Grid item xs={12}>\r\n                    <LegendTitle>\r\n                        {dataParams.variableName}\r\n                    </LegendTitle>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {mapParams.colorScale !== undefined &&  \r\n                        <span>\r\n                            <BinBars firstBinZero={`${mapParams.colorScale[0]}` === `240,240,240` && dataParams.fixedScale === null}>\r\n                                {mapParams.colorScale.map(color => <div className=\"bin color\" key={`${color[0]}${color[1]}`}style={{backgroundColor:`rgb(${color[0]},${color[1]},${color[2]})`}}></div>)}\r\n                            </BinBars>\r\n                            <BinLabels firstBinZero={`${mapParams.colorScale[0]}` === `240,240,240`} binLength={mapParams.bins.bins.length}>\r\n                                {(`${mapParams.colorScale[0]}` === `240,240,240` && dataParams.fixedScale === null) && <div className=\"bin firstBin\">0</div>}\r\n\r\n                                {\r\n                                    mapParams.bins.bins !== undefined && \r\n                                    <BinsList data={mapParams.bins.bins} />\r\n                                }\r\n                                \r\n                            </BinLabels>\r\n                        </span>\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </LegendContainer>\r\n    )\r\n}\r\n\r\nexport default Legend","import React, {useState} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, ReferenceArea, \r\n  Tooltip, Label, ResponsiveContainer, Legend\r\n} from 'recharts';\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport styled from 'styled-components';\r\nimport { colors } from '../config';\r\nimport { setVariableParams } from '../actions';\r\n\r\nconst ChartContainer = styled.span`\r\n    span {\r\n        color:white;\r\n    }\r\n`\r\n\r\nconst StyledSwitch = styled.div`\r\n    float:left;\r\n    p {\r\n        color:white;\r\n        display:inline;\r\n    }\r\n    span.MuiSwitch-track {\r\n        background-color:${colors.lightgray};\r\n    }\r\n    .MuiSwitch-colorSecondary.Mui-checked {\r\n        color:${colors.lightblue};\r\n    }\r\n    .MuiSwitch-colorSecondary.Mui-checked + .MuiSwitch-track {\r\n        background-color: ${colors.lightblue};\r\n    }\r\n    .MuiSwitch-colorSecondary:hover {\r\n        background-color:${colors.lightblue}55;\r\n    }\r\n`\r\n\r\n\r\nconst ChartTitle = styled.h3`\r\n    text-align: center;\r\n    font-family:'Playfair Display', serif;\r\n    padding:0;\r\n    font-weight:normal;\r\n    margin:0;\r\n    color:white;\r\n`\r\n\r\n// const LegendList = styled.ul`\r\n//     list-style:none;\r\n//     margin-block-start: 0;\r\n//     margin-block-end: 0;\r\n//     padding-inline-start: 0;\r\n//     text-align:center;\r\n// `\r\n\r\n// const LegendItem = styled.li`\r\n//     color: ${props => props.color};\r\n//     font-family:'Lato', sans-serif;\r\n//     line-height:1.5;\r\n//     text-decoration: ${props => props.active ? 'underline' : 'none'};\r\n//     display:inline;\r\n//     margin-right:10px;\r\n\r\n// `\r\n\r\n\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\nconst millionFormatter = val => { return `${val/1000000}M` };\r\nconst thousandFormatter = val => { return `${val/1000}K` };\r\nconst dateFormatter = val => { \r\n    let tempDate = new Date(val).getMonth();\r\n    return `${monthNames[tempDate]}`\r\n};\r\n\r\nconst CustomTick = props => {\r\n    return <text {...props}>{props.labelFormatter(props.payload.value)}</text>\r\n};\r\n\r\n\r\n// const stripLeadingZero = ( str ) => str[0] !== '0' ? str : str.slice(1,);\r\n\r\n// const getStartDate = (range, index, data) => {\r\n//     if (range === null) {\r\n//         try {\r\n//             if ((data.slice(0,1)[0].date).indexOf('-') === -1) {\r\n//                 return data.slice(0,1)[0].date\r\n//             } else {\r\n//                 let tempDate = data.slice(0,1)[0].date.split('-');\r\n//                 return `${stripLeadingZero(tempDate[1])}/${stripLeadingZero(tempDate[2])}/${tempDate[0].slice(0,2)}`\r\n//             }            \r\n//         } catch {\r\n//             return null\r\n//         }\r\n//     } else {\r\n//         try {\r\n//             if ((data[index-range].date).indexOf('-') === -1) {\r\n//                 return data[index-range].date\r\n//             } else {\r\n//                 let tempDate = data[index-range].date.split('-');\r\n//                 return `${stripLeadingZero(tempDate[1])}/${stripLeadingZero(tempDate[2])}/${tempDate[0].slice(0,2)}`\r\n//             }\r\n//         } catch {\r\n//             return null\r\n//         }\r\n//     }\r\n// }\r\n\r\n// const getEndDate = (index, data) => {\r\n//     try {\r\n//         if ((data[index].date).indexOf('-') === -1) {\r\n//             return data[index].date\r\n//         } else {\r\n//             let tempDate = data[index].date.split('-');\r\n//             return `${stripLeadingZero(tempDate[1])}/${stripLeadingZero(tempDate[2])}/${tempDate[0].slice(0,2)}`\r\n//         }\r\n//     } catch {\r\n//         return null\r\n//     }\r\n// }\r\n\r\nconst getDateRange = ({startDate, endDate}) => {\r\n    let dateArray = [];\r\n\r\n    let years;\r\n\r\n    if (startDate.getUTCFullYear() === endDate.getUTCFullYear()) {\r\n        years = [endDate.getUTCFullYear()]\r\n    } else {\r\n        years = []\r\n        for (let i=startDate.getUTCFullYear(); i<endDate.getUTCFullYear(); i++) {\r\n            years.push(i)\r\n        }\r\n    }\r\n\r\n    for (let i=0; i<years.length; i++){\r\n        let yearStr = ''+years[i]\r\n        let n;\r\n    \r\n        if (years[i] === 2020) {\r\n            n = 2\r\n        } else {\r\n            n = 1\r\n        }\r\n        while (n<13) {\r\n            let dateString = `${n}/${1}/${yearStr.slice(-2,)}`\r\n            if (new Date(dateString) > endDate) break\r\n            dateArray.push(dateString)\r\n            n++\r\n        }\r\n    }\r\n    return dateArray;\r\n}\r\n\r\nconst CustomTooltip = props => {\r\n    try {\r\n        if (props.active) {\r\n            let data = props.payload\r\n            return (\r\n                <div \r\n                    style={{\r\n                        background:colors.darkgray,\r\n                        padding:'1px 10px',\r\n                        borderRadius:'4px',\r\n                        boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)'\r\n                \r\n                }}> \r\n                <p style={{color:'white', padding:0,}}>{data[0].payload.date}</p>\r\n                    {data.map(data => \r\n                        <p style={{color: data.color, textShadow: `2px 2px 4px ${colors.black}`, fontWeight:600}}>{data.name}: {Number.isInteger(Math.floor(data.payload[data.dataKey])) ? \r\n                            Math.floor(data.payload[data.dataKey]).toLocaleString('en') \r\n                            : data.payload[data.dataKey]}\r\n                        </p>\r\n                        \r\n                    )}\r\n                </div>\r\n            )\r\n        }\r\n    } catch {\r\n        return null;\r\n    }\r\n    return null;\r\n};\r\n\r\nconst MainLineChart = () => {\r\n    const chartData = useSelector(state => state.chartData);\r\n    const dataParams = useSelector(state => state.dataParams);\r\n    const currentVariable = useSelector(state => state.currentVariable);\r\n    const currentData = useSelector(state => state.currentData);\r\n    const dateIndices = useSelector(state => state.dateIndices);\r\n    const selectionKeys = useSelector(state => state.selectionKeys);\r\n\r\n    \r\n    const [logChart, setLogChart] = useState(false);\r\n    const [strokeOpacities, setStrokeOpacities] = useState([])\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSwitch = () => {\r\n        setLogChart(prev => !prev);\r\n    }\r\n\r\n    const chartSetDate = (e) => {\r\n        if (e?.activeTooltipIndex !== undefined) {\r\n            if (dateIndices[currentData][dataParams.numerator].indexOf(e.activeTooltipIndex) !== -1) {\r\n                handleChange(e.activeTooltipIndex)\r\n            } else {\r\n                handleChange(dateIndices[currentData][dataParams.numerator].reduce((a, b) => {return Math.abs(b - e.activeTooltipIndex) < Math.abs(a - e.activeTooltipIndex) ? b : a}))\r\n            }\r\n        }\r\n    }    \r\n\r\n    const handleChange = (newValue) => {\r\n        if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue, dIndex: newValue}))\r\n        } else if (dataParams.nType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        } else if (dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({dIndex: newValue}))\r\n        } else if (currentVariable.includes('Testing')){\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        }\r\n    };\r\n\r\n    const getMax = ({ array, variables }) => {\r\n        let maxVals = {}\r\n\r\n        for (let i=0;i<array.length;i++) {\r\n            for (let n=0;n<variables.length;n++){\r\n                let tempVal = array[i][variables[n]];\r\n                if (maxVals[variables[n]]===undefined || maxVals[variables[n]] < tempVal) {\r\n                    maxVals[variables[n]] = tempVal\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxVals\r\n    }\r\n\r\n    const rangeIncrement = ({ maximum, increment }) => {\r\n        let returnArray = []\r\n        \r\n        for (let i=0; i<maximum; i+=increment) {\r\n            returnArray.push(i)\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    const summarizeChartData = ( { chartData, keys }) => {\r\n        let summarizedData = []\r\n\r\n        for (let i=0;i<chartData.length;i++) {\r\n            let tempSum = 0;\r\n            \r\n            for (let n=0; n<keys.length;n++ ) {\r\n                tempSum += chartData[i][`${keys[n]} Daily Count`]\r\n            }\r\n\r\n            summarizedData.push({\r\n                ...chartData[i],\r\n                'summarized': tempSum \r\n            })\r\n        }\r\n\r\n        return summarizedData\r\n    }\r\n\r\n    const parsedData = summarizeChartData( { chartData: chartData, keys: selectionKeys })\r\n    const maximums = getMax({array: parsedData, variables: ['count','sum']})\r\n    const dateRange = getDateRange({startDate: new Date('02/01/2020'), endDate: new Date()})\r\n    \r\n    const handleLegendHover = (o) => {\r\n        setStrokeOpacities(o.dataKey)\r\n    }\r\n\r\n    const handleLegendLeave = () => {\r\n        setStrokeOpacities(null)\r\n    }\r\n\r\n    return (\r\n        <ChartContainer id=\"lineChart\">\r\n            {selectionKeys.length < 2 && \r\n                <ChartTitle>Total Cases and 7-Day Average New Cases\r\n                    {selectionKeys.length>0 && `: ${selectionKeys[0]}`}\r\n                </ChartTitle>\r\n            }\r\n            {selectionKeys.length >= 2 && \r\n                <ChartTitle>7-Day Average New Cases</ChartTitle>\r\n            }\r\n            <ResponsiveContainer width=\"100%\" height=\"80%\">\r\n                <LineChart\r\n                    data={parsedData}\r\n                    margin={{\r\n                        top: 0, right: 10, left: 10, bottom: 20,\r\n                    }}\r\n                    onClick={dataParams.nType === 'characteristic' ? '' : chartSetDate}\r\n                >\r\n                    <XAxis \r\n                        dataKey=\"date\"\r\n                        ticks={dateRange}\r\n                        tick={\r\n                            <CustomTick\r\n                            style={{\r\n                                fill: `${colors.white}88`,\r\n                                fontSize: \"10px\",\r\n                                fontFamily: \"Lato\",\r\n                                fontWeight: 600,\r\n                                transform:'translateY(10px)'\r\n                            }}\r\n                            labelFormatter={dateFormatter}\r\n                            />\r\n                        }\r\n                    />\r\n                    <YAxis yAxisId=\"left\" type=\"number\" scale={logChart ? \"log\" : \"linear\"} domain={[0.01, 'dataMax']} allowDataOverflow \r\n                        ticks={selectionKeys.length === 0 ? rangeIncrement({maximum: maximums.sum, increment: 2000000}) : []} \r\n                        tick={\r\n                            <CustomTick\r\n                            style={{\r\n                                fill: colors.lightgray,\r\n                                fontSize: \"10px\",\r\n                                fontFamily: \"Lato\",\r\n                                fontWeight: 600\r\n                            }}\r\n                            labelFormatter={selectionKeys.length === 0 ? millionFormatter : thousandFormatter}\r\n                            />\r\n                        }\r\n                        >\r\n                        <Label value=\"Total Cases\" position='insideLeft' style={{marginTop:10, fill:colors.lightgray, fontFamily: 'Lato', fontWeight: 600}} angle={-90}  />\r\n                    </YAxis>\r\n                    <YAxis yAxisId=\"right\" orientation=\"right\" scale={logChart ? \"log\" : \"linear\"} domain={[0.01, 'dataMax']} allowDataOverflow \r\n                        ticks={selectionKeys.length === 0 ? rangeIncrement({maximum: maximums.count, increment: 50000}) : []}\r\n                        tick={\r\n                            <CustomTick\r\n                                style={{\r\n                                    fill: colors.lightgray,\r\n                                    fontSize: \"10px\",\r\n                                    fontFamily: \"Lato\",\r\n                                    fontWeight: 600,\r\n                                }}\r\n                                labelFormatter={thousandFormatter}\r\n                            />\r\n                        }\r\n                        >\r\n                        <Label value=\"7-Day Average New Cases\" position='insideTopRight' style={{marginTop:10, fill:(selectionKeys.length < 2 ? colors.yellow : colors.lightgray), fontFamily: 'Lato', fontWeight: 600}} angle={-90}  />\r\n                    </YAxis>\r\n                    <Tooltip\r\n                        content={CustomTooltip}\r\n                    />\r\n                    <ReferenceArea \r\n                        yAxisId=\"left\"\r\n                        // x1={getStartDate(dataParams.nRange, dataParams.nIndex, parsedData)}\r\n                        // x2={getEndDate(dataParams.nIndex, parsedData)} \r\n                        x1={dataParams.nRange === null ? \r\n                            dataParams.variableName.indexOf('Testing') !== -1 ? dataParams.nIndex - 7 : 0\r\n                            : dataParams.nIndex-dataParams.nRange}\r\n                        x2={dataParams.nIndex}\r\n                        fill=\"white\" \r\n                        fillOpacity={0.15}\r\n                        isAnimationActive={false}\r\n                    />\r\n                    {selectionKeys.length < 2 && <Line type=\"monotone\" yAxisId=\"left\" dataKey={selectionKeys.length > 0 ? selectionKeys[0] + \" Total Cases\" : \"sum\"} name=\"Total Cases\" stroke={colors.lightgray} dot={false} isAnimationActive={false} /> }\r\n                    {selectionKeys.length < 2 && <Line type=\"monotone\" yAxisId=\"right\" dataKey={selectionKeys.length > 0 ? selectionKeys[0] + \" Daily Count\": \"count\"} name=\"7-Day Average New Cases\" stroke={colors.yellow} dot={false} isAnimationActive={false} /> }\r\n                    \r\n                    {/* {selectionKeys.length !== 0 && \r\n                        selectionKeys.map((key,index) => { \r\n                            return <Line \r\n                                type=\"monotone\" \r\n                                yAxisId=\"left\" \r\n                                dataKey={key + ' Total Cases'} \r\n                                name={key + ' Total Cases'} \r\n                                stroke={colors.pairedColors.sum[index]} \r\n                                dot={false} \r\n                                isAnimationActive={false}  \r\n                                strokeOpacity={strokeOpacities.length === 0 || strokeOpacities.includes(key + ' Total Cases') ? 1 : 0.25}\r\n                            />}\r\n                        )\r\n                    } */}\r\n                    {selectionKeys.length > 1 && \r\n                            <Line \r\n                                type='monotone'\r\n                                yAxisId='right'\r\n                                dataKey='summarized' \r\n                                name='Total For Selection' \r\n                                stroke={colors.lightgray}\r\n                                strokeWidth={3} \r\n                                dot={false} \r\n                                isAnimationActive={false}  \r\n                            />\r\n                    }\r\n                    {selectionKeys.length > 1 && \r\n                        selectionKeys.map((key,index) => {\r\n                            return <Line \r\n                                type='monotone'\r\n                                yAxisId='right' \r\n                                dataKey={key + ' Daily Count'} \r\n                                name={key} \r\n                                stroke={colors.qualtitiveScale[index]} \r\n                                dot={false} \r\n                                isAnimationActive={false}  \r\n                                strokeOpacity={strokeOpacities === key + ' Daily Count' ? 1 : 0.5}\r\n                                strokeWidth={strokeOpacities === key + ' Daily Count' ? 2 : 1}\r\n                            />}\r\n                        )\r\n                    }\r\n                    <Legend \r\n                        // content={renderLegend}\r\n                        onMouseEnter={handleLegendHover} \r\n                        onMouseLeave={handleLegendLeave}\r\n                    />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n            <StyledSwitch>\r\n                <Switch\r\n                    checked={logChart}\r\n                    onChange={handleSwitch}\r\n                    name='log chart switch'\r\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                />\r\n                <p>{logChart ? 'Log Scale' : 'Linear Scale'}</p>\r\n            </StyledSwitch>\r\n        </ChartContainer>\r\n    );\r\n}\r\n\r\nexport default MainLineChart\r\n\r\n// dataParams.nIndex-(dataParams.nRange||dataParams.nIndex)","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {fromJS} from 'immutable';\r\nimport {find, findIndex} from 'lodash';\r\n\r\nimport DeckGL from '@deck.gl/react';\r\nimport {MapView, FlyToInterpolator} from '@deck.gl/core';\r\nimport { GeoJsonLayer, PolygonLayer, ScatterplotLayer, IconLayer, TextLayer } from '@deck.gl/layers';\r\nimport {fitBounds} from '@math.gl/web-mercator';\r\n\r\nimport MapboxGLMap, {NavigationControl, GeolocateControl } from 'react-map-gl';\r\nimport Geocoder from 'react-map-gl-geocoder';\r\n\r\nimport { MapTooltipContent } from '../components';\r\nimport { setMapLoaded, setSelectionData, appendSelectionData, removeSelectionData } from '../actions';\r\nimport { mapFn, dataFn, getVarId, getCSV, getCartogramCenter, getDataForCharts, getURLParams } from '../utils';\r\nimport { colors, colorScales } from '../config';\r\nimport MAP_STYLE from '../config/style.json';\r\nimport { selectRect } from '../config/svg'; \r\n\r\nconst bounds = fitBounds({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    bounds: [[-130.14, 53.96],[-67.12, 19]]\r\n})\r\n\r\n// const hawaiiBounds = fitBounds({\r\n//     width: window.innerWidth*.15,\r\n//     height: window.innerHeight*.12,\r\n//     bounds: [[-161.13, 23.23],[-152.75, 17.67]]\r\n// })\r\n\r\n// const alaskaBounds = fitBounds({\r\n//     width: window.innerWidth*.15,\r\n//     height: window.innerHeight*.12,\r\n//     bounds: [[-167.75, 73.59],[-132.70, 50.09]]\r\n// })\r\n\r\nconst ICON_MAPPING = {\r\n    hospital: {x: 0, y: 0, width: 128, height: 128},\r\n    clinic: {x: 128, y: 0, width: 128, height: 128},\r\n  };\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoibGl4dW45MTAiLCJhIjoiY2locXMxcWFqMDAwenQ0bTFhaTZmbnRwaiJ9.VRNeNnyb96Eo-CorkJmIqg';\r\n\r\nconst defaultMapStyle = fromJS(MAP_STYLE);\r\n\r\nconst MapContainer = styled.div`\r\n    position:absolute;\r\n    left:0;\r\n    top:0;\r\n    width:100%;\r\n    height:calc(100% - 50px);\r\n    background:${colors.darkgray};\r\n    @media (max-width:600px) {\r\n        div.mapboxgl-ctrl-geocoder {\r\n            display:none;\r\n        }\r\n    }\r\n`\r\n\r\nconst HoverDiv = styled.div`\r\n    background:${colors.gray};\r\n    padding:20px;\r\n    color:white;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0.5vh 0.5vh 0 0;\r\n    transition:0s all;\r\n    h3 {\r\n        margin:2px 0;\r\n    }\r\n`;\r\n\r\nconst NavInlineButton = styled.button`\r\n    width:29px;\r\n    height:29px;\r\n    padding:5px;\r\n    margin-bottom:10px;\r\n    display:block;\r\n    background-color: ${props => props.isActive ? colors.lightblue : colors.buttongray};\r\n    -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n    border-radius: 4px;\r\n    outline:none;\r\n    border:none;\r\n    transition:250ms all;\r\n    cursor:pointer;\r\n    &:last-of-type {\r\n        margin-top:10px;\r\n    }\r\n    :after {\r\n        opacity: ${props => props.shareNotification ? 1 : 0};\r\n        content:'Map Link Copied to Clipboard!';\r\n        background:${colors.buttongray};\r\n        -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n        -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n        box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n        border-radius: 4px;\r\n        position: absolute;\r\n        transform:translate(-120%, -25%);\r\n        padding:5px;\r\n        width:150px;\r\n        pointer-events:none;\r\n        max-width:50vw;\r\n        transition:250ms all;\r\n    }\r\n`\r\n\r\nconst MapGeocoder = styled(Geocoder)`\r\n    @media (max-width:600px) {\r\n        display:none !important;\r\n    }\r\n`\r\n\r\nconst MapButtonContainer = styled.div`\r\n    position: absolute;\r\n    right: ${props => props.infoPanel ? 317 : 10}px;\r\n    bottom: 30px;\r\n    zIndex: 10;\r\n    transition: 250ms all;\r\n    @media (max-width:768px) {\r\n        bottom:100px;\r\n    }\r\n    @media (max-width: 400px) {\r\n        transform:scale(0.75) translate(20%, 20%);\r\n    }\r\n`\r\n\r\nconst ShareURL = styled.input`\r\n    position:fixed;\r\n    left:110%;\r\n`\r\n\r\nconst IndicatorBox = styled.div`\r\n    position:fixed;\r\n    top:${props => props.y}px;\r\n    left:${props => props.x}px;\r\n    width:${props => props.width}px;\r\n    height:${props => props.height}px;\r\n    border:1px dashed #FFCE00;\r\n    background:rgba(0,0,0,0.25);\r\n    z-index:5;\r\n`\r\n\r\nconst Map = () => { \r\n    \r\n    const { storedData, storedGeojson, currentData, storedLisaData, dateIndices,\r\n        storedCartogramData, panelState, dates, dataParams, mapParams,\r\n        currentVariable, urlParams, mapLoaded } = useSelector(state => state);\r\n\r\n    const [hoverInfo, setHoverInfo] = useState(false);\r\n    const [highlightGeog, setHighlightGeog] = useState([]);\r\n    // const [globalMap, setGlobalMap] = useState(false);\r\n    const globalMap = false;\r\n    const [mapStyle, setMapStyle] = useState(defaultMapStyle);\r\n    const [currLisaData, setCurrLisaData] = useState({})\r\n    \r\n    const [viewState, setViewState] = useState({\r\n        latitude: +urlParams.lat || bounds.latitude,\r\n        longitude: +urlParams.lon || bounds.longitude,\r\n        zoom: +urlParams.z || bounds.zoom,\r\n        bearing:0,\r\n        pitch:0\r\n    })\r\n\r\n    const [cartogramData, setCartogramData] = useState([]);\r\n    const [currVarId, setCurrVarId] = useState(null);\r\n    const [hospitalData, setHospitalData] = useState(null);\r\n    const [clinicData, setClinicData] = useState(null);\r\n    const [storedCenter, setStoredCenter] = useState(null);\r\n    const [shared, setShared] = useState(false);\r\n    const [multipleSelect, setMultipleSelect] = useState(false);\r\n    const [choroplethInteractive, setChoroplethInteractive] = useState(true);\r\n    const [boxSelect, setBoxSelect] = useState(false);\r\n    const [boxSelectDims, setBoxSelectDims] = useState({});\r\n    // const [resetSelect, setResetSelect] = useState(null);\r\n    // const [mobilityData, setMobilityData] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => { \r\n        window.addEventListener('storage', () => {\r\n            // When local storage changes, dump the list to\r\n            // the console.\r\n            const SHARED_GEOID =  localStorage.getItem('SHARED_GEOID').split(',').map(d => parseInt(d))\r\n            \r\n            if (SHARED_GEOID !== null) {\r\n                setHighlightGeog(SHARED_GEOID); \r\n            }\r\n            \r\n            const SHARED_VIEW =  JSON.parse(localStorage.getItem('SHARED_VIEW'));\r\n            \r\n            if (SHARED_VIEW !== null && SHARED_VIEW.hasOwnProperty('latitude')) {\r\n                setViewState(\r\n                    prevView => ({\r\n                        ...prevView,\r\n                        longitude: SHARED_VIEW.longitude,\r\n                        latitude: SHARED_VIEW.latitude,\r\n                        zoom: SHARED_VIEW.zoom,\r\n                        transitionDuration: 1000,\r\n                        transitionInterpolator: new FlyToInterpolator()\r\n                    })\r\n                )   \r\n            }\r\n        });\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (Object.keys(storedData).length === 1) {\r\n                document.querySelector(\".mapboxgl-ctrl-top-right\").addEventListener(\"click\", () => {\r\n                    setChoroplethInteractive(false);\r\n                    setTimeout(() => {document.querySelector('.mapboxgl-ctrl-geocoder--input').select()},50)\r\n                })\r\n            }\r\n        } catch {\r\n            setTimeout(() => {\r\n                if (Object.keys(storedData).length === 1) {\r\n                    document.querySelector(\".mapboxgl-ctrl-top-right\").addEventListener(\"click\", () => {\r\n                        setChoroplethInteractive(false)\r\n                        setTimeout(() => {document.querySelector('.mapboxgl-ctrl-geocoder--input').select()},50)\r\n                    })\r\n                }\r\n            }, 5000)\r\n        }\r\n    },[storedData])\r\n\r\n    useEffect(() => {\r\n        let arr = [];\r\n        if (storedData[currentData] && mapParams.vizType === 'cartogram') {\r\n            for (let i=0; i<storedData[currentData].length; i++) {\r\n                arr.push({id:i})\r\n            }\r\n        }\r\n        setCartogramData(arr)\r\n    }, [storedData, currentData, mapParams.vizType])\r\n\r\n    useEffect(() => {\r\n        setCurrVarId(getVarId(currentData, dataParams))\r\n    }, [dataParams, mapParams, currentData])\r\n\r\n\r\n    useEffect(() => {\r\n        switch(mapParams.vizType) {\r\n            case '2D': \r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: +urlParams.lat || bounds.latitude,\r\n                    longitude: +urlParams.lon || bounds.longitude,\r\n                    zoom: +urlParams.z || bounds.zoom,\r\n                    bearing:0,\r\n                    pitch:0\r\n                }));\r\n                setStoredCenter(null)\r\n                break\r\n            case '3D':\r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: +urlParams.lat || 39.8283,\r\n                    longitude: +urlParams.lon || -98.5795,\r\n                    zoom: +urlParams.z || bounds.zoom,\r\n                    bearing:-30,\r\n                    pitch:30\r\n                }));\r\n                setStoredCenter(null)\r\n                break\r\n            // case 'cartogram':\r\n            //     useCallback(() => {\r\n            //         let center = getCartogramCenter(storedCartogramData[getVarId(currentData, dataParams)])\r\n            //         setViewState(view => ({\r\n            //             ...view,\r\n            //             latitude: center[1],\r\n            //             longitude: center[0],\r\n            //             zoom: 5,\r\n            //             bearing:0,\r\n            //             pitch:0\r\n            //         }));\r\n            //     }, [cartogramData])\r\n            //     break\r\n            default:\r\n                //\r\n        }\r\n    }, [mapParams.vizType])\r\n\r\n    useEffect(() => {\r\n        let tempData = storedLisaData[getVarId(currentData, dataParams)]\r\n        if (tempData !== undefined) setCurrLisaData(tempData);\r\n    }, [storedLisaData, dataParams, mapParams])\r\n\r\n    useEffect(() => {\r\n        const defaultLayers = defaultMapStyle.get('layers');\r\n        let tempLayers;\r\n\r\n        if (mapParams.vizType === 'cartogram' || globalMap) {\r\n            tempLayers = defaultLayers.map(layer => {\r\n                return layer.setIn(['layout', 'visibility'], 'none');\r\n            });\r\n        } else if (mapParams.vizType === '3D') {\r\n            tempLayers = defaultLayers.map(layer => {\r\n                if ((layer.get('id').includes('label')) && !(layer.get('id').includes('water'))) return layer;\r\n                return layer.setIn(['layout', 'visibility'], 'none');\r\n            });\r\n        } else {\r\n            tempLayers = defaultLayers.map(layer => {\r\n                if (mapParams.resource.includes(layer.get('id')) || mapParams.overlay.includes(layer.get('id'))) {\r\n                    return layer.setIn(['layout', 'visibility'], 'visible');\r\n                } else {\r\n                    return layer;\r\n                }\r\n            });\r\n        }\r\n        setMapStyle(defaultMapStyle.set('layers', tempLayers));\r\n\r\n    }, [mapParams.overlay, mapParams.vizType])\r\n\r\n    useEffect(() => {\r\n        if (hospitalData === null) {\r\n            getCSV(`${process.env.PUBLIC_URL}/csv/us_healthcare_capacity-facility-CovidCareMap.csv`)\r\n            .then(values => setHospitalData(values))\r\n        }\r\n\r\n        if (clinicData === null) {\r\n            getCSV(`${process.env.PUBLIC_URL}/csv/health_centers.csv`)\r\n            .then(values => setClinicData(values))\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (storedCartogramData[getVarId(currentData, dataParams)]){\r\n            let center = getCartogramCenter(storedCartogramData[getVarId(currentData, dataParams)])\r\n            let roundedCenter = [Math.floor(center[0]),Math.floor(center[1])]\r\n            if (storedCenter === null || roundedCenter[0] !== storedCenter[0]) {\r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: center[1],\r\n                    longitude: center[0],\r\n                    zoom: 5,\r\n                    bearing:0,\r\n                    pitch:0\r\n                }));\r\n                setStoredCenter(roundedCenter)\r\n            }\r\n        }\r\n    }, [storedCartogramData, currentData])\r\n\r\n    useEffect(() => {\r\n        setViewState(view => ({\r\n            ...view,\r\n            latitude: +urlParams.lat || bounds.latitude,\r\n            longitude: +urlParams.lon || bounds.longitude,\r\n            zoom: +urlParams.z || bounds.zoom,\r\n            bearing:0,\r\n            pitch:0\r\n        }));\r\n    }, [urlParams])\r\n    \r\n    const GetFillColor = (f, bins, mapType) => {\r\n        if ((!bins.hasOwnProperty(\"bins\")) || (!f.hasOwnProperty(dataParams.numerator))) {\r\n            return [240,240,240,120]\r\n        } else if (mapType === 'lisa') {\r\n            return colorScales.lisa[currLisaData[storedGeojson[currentData]['geoidOrder'][f.properties.GEOID]]]\r\n        } else {\r\n            return mapFn(dataFn(f[dataParams.numerator], f[dataParams.denominator], dataParams), bins.breaks, mapParams.colorScale, mapParams.mapType, dataParams.numerator);\r\n        }\r\n    }\r\n    \r\n    const GetHeight = (f) => dataFn(f[dataParams.numerator], f[dataParams.denominator], dataParams)*(dataParams.scale3D/((dataParams.nType === \"time-series\" && dataParams.nRange === null) ? (dataParams.nIndex)/10 : 1))\r\n        // if (dataParams.zAxisParams === null) {\r\n        //     return dataFn(f[dataParams.numerator], f[dataParams.denominator], dataParams)*(dataParams.scale3D)\r\n        // } else {\r\n        //     return dataFn(f[dataParams.zAxisParams.numerator], f[dataParams.zAxisParams.denominator], dataParams.zAxisParams)*(dataParams.zAxisParams.scale3D)\r\n        // }\r\n\r\n    const handleGeolocate = (viewState) => {\r\n        setViewState(view => ({\r\n            ...view,\r\n            latitude: viewState.coords.latitude,\r\n            longitude: viewState.coords.longitude,\r\n            zoom: 8,\r\n            transitionInterpolator: new FlyToInterpolator(),\r\n            transitionDuration: 250,\r\n        }))\r\n    }\r\n\r\n    const handleGeocoder = (viewState) => {\r\n        setViewState(view => ({\r\n            ...view,\r\n            latitude: viewState.latitude,\r\n            longitude: viewState.longitude,\r\n            zoom: 8,\r\n            transitionInterpolator: new FlyToInterpolator(),\r\n            transitionDuration: 250,\r\n            onTransitionEnd: () => {\r\n                document.querySelector('.mapboxgl-ctrl-geocoder--button').click()\r\n                setChoroplethInteractive(true)\r\n            }\r\n        }))\r\n    }\r\n\r\n    \r\n\r\n    const getCartogramFillColor = (val, id, bins, mapType) => {\r\n        \r\n        if (!bins.hasOwnProperty(\"bins\")) {\r\n            return [0,0,0]\r\n        } else if (mapType === 'lisa') {\r\n            return colorScales.lisa[currLisaData[id]]\r\n        } else {\r\n            return mapFn(val, bins.breaks, mapParams.colorScale, mapParams.mapType, dataParams.numerator) \r\n        }\r\n    }\r\n\r\n    const mapRef = useRef();\r\n    const deckRef = useRef();\r\n\r\n    const handleShare = async (params) => {\r\n        const shareData = {\r\n            title: 'The US Covid Atlas',\r\n            text: 'Near Real-Time Exploration of the COVID-19 Pandemic.',\r\n            url: `${window.location.href.split('?')[0]}${getURLParams(params)}`,\r\n        }\r\n\r\n        try {\r\n            await navigator.share(shareData)\r\n          } catch(err) {\r\n            let copyText = document.querySelector(\"#share-url\");\r\n            copyText.value = `${shareData.url}`;\r\n            copyText.style.display = 'block'\r\n            copyText.select();\r\n            copyText.setSelectionRange(0, 99999);\r\n            document.execCommand(\"copy\");\r\n            copyText.style.display = 'none';\r\n            setShared(true)\r\n            setTimeout(() => setShared(false), 5000);\r\n        }\r\n    }\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.target.selectionStart === undefined){\r\n            if (e.ctrlKey) setMultipleSelect(true);\r\n            if (e.shiftKey) setBoxSelect(true);\r\n        }\r\n    }\r\n\r\n    const handleKeyUp = (e) => {\r\n        if (e.target.selectionStart === undefined){\r\n            if (!e.ctrlKey) setMultipleSelect(false);\r\n            if (!e.shiftKey) setBoxSelect(false);\r\n        }\r\n    }\r\n\r\n    \r\n    const handleMapHover = ({x, y, object}) => {\r\n        // let eps = 1\r\n        // if (((x-hoverInfo.x>eps||x-hoverInfo.x<-1*eps)&&(y-hoverInfo.y>eps||y-hoverInfo.y<-1*eps))||hoverInfo === false){\r\n            setHoverInfo({x, y, object})\r\n        // }\r\n    }\r\n    const Layers = [\r\n        // new SolidPolygonLayer({\r\n        //     id: 'background',\r\n        //     data: [\r\n        //       [[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]\r\n        //     ],\r\n        //     getPolygon: d => d,\r\n        //     stroked: false,\r\n        //     filled: true,\r\n        //     visible: globalMap,\r\n        //     updateTriggers: {\r\n        //         visible: globalMap\r\n        //     },\r\n        //     getFillColor: [40, 40, 40]\r\n        //   }),\r\n        new GeoJsonLayer({\r\n            id: 'choropleth',\r\n            data: {\r\n                \"type\": \"FeatureCollection\",\r\n                \"name\": currentData,\r\n                \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\r\n                \"features\": storedData[currentData] ? storedData[currentData] : [],\r\n            },\r\n            visible: mapParams.vizType !== 'cartogram',\r\n            pickable: mapParams.vizType !== 'cartogram' && choroplethInteractive,\r\n            stroked: false,\r\n            filled: true,\r\n            wireframe: mapParams.vizType === '3D',\r\n            extruded: mapParams.vizType === '3D',\r\n            opacity: 0.8,\r\n            material:false,\r\n            getFillColor: f => GetFillColor(f, {bins: mapParams.bins.bins, breaks:mapParams.bins.breaks}, mapParams.mapType),\r\n            getElevation: f => GetHeight(f),\r\n            updateTriggers: {\r\n                data: currentData,\r\n                pickable: [mapParams.vizType, choroplethInteractive],\r\n                getFillColor: [mapParams.mapType, mapParams.bins.bins, mapParams.bins.breaks, mapParams.binMode, mapParams.fixedScale, mapParams.vizType, mapParams.colorScale, mapParams.customScale],\r\n                getElevation: [mapParams.mapType, mapParams.bins.bins, mapParams.bins.breaks, mapParams.binMode, mapParams.fixedScale, mapParams.vizType, mapParams.colorScale, mapParams.customScale],\r\n            },\r\n            onHover: handleMapHover,\r\n            onClick: info => {\r\n                let dataName = info?.object?.properties?.state_abbr !== undefined ? `${info.object?.properties?.NAME}, ${info?.object?.properties?.state_abbr}` : `${info.object?.properties?.NAME}`\r\n                if (multipleSelect) {\r\n                    try {\r\n                        if (highlightGeog.indexOf(info.object.properties.GEOID) === -1) {\r\n                            let GeoidList = [...highlightGeog, info.object.properties.GEOID]\r\n                            setHighlightGeog(GeoidList); \r\n                            dispatch(\r\n                                appendSelectionData({\r\n                                    values: getDataForCharts(\r\n                                        [info.object], \r\n                                        'cases', \r\n                                        dateIndices[currentData]['cases'], \r\n                                        dates, \r\n                                        dataName\r\n                                    ),\r\n                                    name: dataName,\r\n                                    index: findIndex(storedData[currentData], o => o.properties.GEOID === info.object.properties.GEOID)\r\n                                })\r\n                            );\r\n                            window.localStorage.setItem('SHARED_GEOID', GeoidList);\r\n                            window.localStorage.setItem('SHARED_VIEW', JSON.stringify(mapRef.current.props.viewState));\r\n                        } else {\r\n                            if (highlightGeog.length > 1) {\r\n                                let tempArray = [...highlightGeog];\r\n                                let geogIndex = tempArray.indexOf(info.object.properties.GEOID);\r\n                                tempArray.splice(geogIndex, 1);\r\n                                setHighlightGeog(tempArray);\r\n                                dispatch(\r\n                                    removeSelectionData({\r\n                                        name: dataName,\r\n                                        index: findIndex(storedData[currentData], o => o.properties.GEOID === info.object.properties.GEOID)\r\n                                    })\r\n                                )\r\n                                window.localStorage.setItem('SHARED_GEOID', tempArray);\r\n                                window.localStorage.setItem('SHARED_VIEW', JSON.stringify(mapRef.current.props.viewState));\r\n                            }\r\n                        }\r\n                    } catch {}\r\n                } else {\r\n                    try {\r\n                        setHighlightGeog([info.object.properties.GEOID]); \r\n                        dispatch(\r\n                            setSelectionData({\r\n                                values: getDataForCharts(\r\n                                    [info.object], \r\n                                    'cases', \r\n                                    dateIndices[currentData]['cases'], \r\n                                    dates, \r\n                                    dataName\r\n                                ),\r\n                                name: dataName,\r\n                                index: findIndex(storedData[currentData], o => o.properties.GEOID === info.object.properties.GEOID)\r\n                            })\r\n                        );\r\n                        window.localStorage.setItem('SHARED_GEOID', info.object.properties.GEOID);\r\n                        window.localStorage.setItem('SHARED_VIEW', JSON.stringify(mapRef.current.props.viewState));\r\n                        // if (mapParams.overlay === \"mobility-county\") {\r\n                        //     setMobilityData(parseMobilityData(info.object.properties.GEOID, storedMobilityData.flows[info.object.properties.GEOID], storedMobilityData.centroids));\r\n                        // }\r\n                    } catch {}\r\n                }\r\n            },\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'highlightLayer',\r\n            data: {\r\n                \"type\": \"FeatureCollection\",\r\n                \"name\": currentData,\r\n                \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\r\n                \"features\": storedData[currentData] ? storedData[currentData] : [],\r\n            },\r\n            pickable: false,\r\n            stroked: true,\r\n            filled:false,\r\n            getLineColor: f => highlightGeog.indexOf(f.properties.GEOID)!==-1 ? [0, 104, 109] : [0, 104, 109, 0], \r\n            lineWidthScale: 500,\r\n            getLineWidth: 5,\r\n            lineWidthMinPixels: 3,\r\n            lineWidthMaxPixels: 10,\r\n            parameters: {\r\n                depthTest: false\r\n            },\r\n            updateTriggers: {\r\n                data: currentData,\r\n                getLineColor: highlightGeog,\r\n            },\r\n        }),\r\n        // new LineLayer({\r\n        //     id: 'mobility flows',\r\n        //     data: mobilityData,\r\n        //     pickable: false,\r\n        //     visible: mapParams.overlay === \"mobility-county\",\r\n        //     widthUnits: 'meters',\r\n        //     widthScale: 10000,\r\n        //     getSourcePosition: d => [d[1],d[2]],\r\n        //     getTargetPosition: d => [d[3],d[4]],\r\n        //     getWidth: d => d[5] < 10 ? d[5] : 0,\r\n        //     updateTriggers: {\r\n        //         data: [mobilityData],\r\n        //         visible: [mapParams.overlay]\r\n        //     }\r\n        // }),\r\n        new IconLayer({\r\n            id: 'hospital-layer',\r\n            data: hospitalData,\r\n            pickable:true,\r\n            visible: mapParams.resource?.includes('hospital'),\r\n            iconAtlas: `${process.env.PUBLIC_URL}/assets/img/icon_atlas.png`,\r\n            iconMapping: ICON_MAPPING,\r\n            getIcon: d => 'hospital',\r\n            getPosition: d => [d.Longitude, d.Latitude],\r\n            sizeUnits: 'meters',\r\n            getSize: 20000,\r\n            sizeMinPixels:12,\r\n            sizeMaxPixels:24,\r\n            updateTriggers: {\r\n                data: hospitalData,\r\n                visible: mapParams.resource\r\n            },\r\n            onHover: handleMapHover,\r\n        }),\r\n        new IconLayer({\r\n            id: 'clinics-layer',\r\n            data: clinicData,\r\n            pickable:true,\r\n            visible: mapParams.resource?.includes('clinic'),\r\n            iconAtlas: `${process.env.PUBLIC_URL}/assets/img/icon_atlas.png`,\r\n            iconMapping: ICON_MAPPING,\r\n            getIcon: d => 'clinic',\r\n            getSize: 20000,\r\n            getPosition: d => [d.lon, d.lat],\r\n            sizeUnits: 'meters',\r\n            sizeMinPixels:7,\r\n            sizeMaxPixels:20,\r\n            updateTriggers: {\r\n                data: clinicData,\r\n                visible: mapParams\r\n            },\r\n            onHover: handleMapHover,\r\n        }),\r\n        new PolygonLayer({\r\n            id: 'background',\r\n            data: [\r\n                // prettier-ignore\r\n                [[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]\r\n            ],\r\n            opacity: 1,\r\n            getPolygon: d => d,\r\n            stroked: false,\r\n            filled: true,\r\n            visible: mapParams.vizType === 'cartogram',\r\n            getFillColor: [10,10,10],\r\n            updateTriggers: {\r\n                visible: mapParams.vizType,\r\n            }\r\n        }),\r\n        new ScatterplotLayer({\r\n            id: 'cartogram layer',\r\n            data: cartogramData,\r\n            pickable:true,\r\n            visible: mapParams.vizType === 'cartogram',\r\n            getPosition: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].position;\r\n                } catch {\r\n                    return [0,0];\r\n                }\r\n            },\r\n            getFillColor: f => {\r\n                try {\r\n                    return getCartogramFillColor(storedCartogramData[currVarId][f.id].value, f.id, mapParams.bins, mapParams.mapType);\r\n                } catch {\r\n                    return [0,0,0];\r\n                }\r\n            },\r\n            getRadius: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].radius*10;\r\n                } catch {\r\n                    return 0;\r\n                }\r\n            },\r\n            // transitions: {\r\n            //     getPosition: 1,\r\n            //     getFillColor: 1,\r\n            //     getRadius: 1\r\n            // },   \r\n            onHover: f => {\r\n                try {\r\n                    setHoverInfo(\r\n                        {\r\n                            ...f,\r\n                            object: find(storedData[currentData], o => o.properties.GEOID === storedGeojson[currentData]['indexOrder'][f.object?.id]),\r\n                        }\r\n                    )\r\n                } catch {\r\n                    setHoverInfo(null)\r\n                }\r\n            },\r\n            updateTriggers: {\r\n                getPosition: [cartogramData, mapParams, dataParams, currVarId],\r\n                getFillColor: [cartogramData, mapParams, dataParams, currVarId],\r\n                getRadius: [cartogramData, mapParams, dataParams, currVarId],\r\n                visible: [cartogramData, mapParams, dataParams, currVarId]\r\n            }\r\n          }),\r\n          new TextLayer({\r\n            id: 'cartogram text layer',\r\n            data: cartogramData,\r\n            pickable:false,\r\n            visible: mapParams.vizType === 'cartogram' && currentData.includes('state'),\r\n            getPosition: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].position;\r\n                } catch {\r\n                    return [0,0];\r\n                }\r\n            },\r\n            sizeUnits: 'meters',\r\n            fontWeight: 'bold',\r\n            getTextAnchor: 'middle',\r\n            getAlignmentBaseline: 'center',\r\n            maxWidth: 500,\r\n            wordBreak: 'break-word',\r\n            getSize: f => {\r\n                try {\r\n                    return storedCartogramData[currVarId][f.id].radius*5;\r\n                } catch {\r\n                    return 0;\r\n                }\r\n            },\r\n            getText: f => {\r\n                try {\r\n                    if (currentData.includes('state')) return find(storedData[currentData], o => +o.properties.GEOID === storedGeojson[currentData].indexOrder[f.id]).properties.NAME;\r\n                    return '';\r\n                } catch {\r\n                    return '';\r\n                }\r\n            },\r\n            updateTriggers: {\r\n                getPosition: [cartogramData, mapParams, dataParams, currVarId],\r\n                getFillColor: [cartogramData, mapParams, dataParams, currVarId],\r\n                getSize: [cartogramData, mapParams, dataParams, currVarId],\r\n                getRadius: [cartogramData, mapParams, dataParams, currVarId],\r\n                visible: [cartogramData, mapParams, dataParams, currVarId]\r\n            }\r\n          }),\r\n    ]\r\n\r\n    const view = new MapView({repeat: true});\r\n    const handleSelectionBoxStart = () => {\r\n        setBoxSelect(true)\r\n    }\r\n\r\n    const listener = (e) => {\r\n\r\n        setBoxSelectDims(prev => {\r\n            let x;\r\n            let y;\r\n            let width;\r\n            let height;\r\n\r\n            if (e.clientX < prev.ox) {\r\n                x = e.clientX;\r\n                width = prev.ox - e.clientX\r\n            } else {\r\n                x = prev.x;\r\n                width = e.clientX - prev.x\r\n            }\r\n\r\n            if (e.clientY < prev.oy) {\r\n                y = e.clientY;\r\n                height = prev.oy - e.clientY\r\n            } else {\r\n                y = prev.y;\r\n                height = e.clientY - prev.y\r\n            }\r\n\r\n            return { ...prev, x, y, width, height }\r\n        })\r\n    }\r\n    \r\n    const touchListener = (e) => {\r\n        // setX(e?.targetTouches[0]?.clientX-15)\r\n        // setY(e?.targetTouches[0]?.clientY-15)\r\n        // console.log(e)\r\n    }\r\n\r\n    const removeListeners = () => {\r\n        window.removeEventListener('touchmove', touchListener)\r\n        window.removeEventListener('touchend', removeListeners)\r\n        window.removeEventListener('mousemove', listener)\r\n        window.removeEventListener('mouseup', removeListeners)\r\n    }\r\n\r\n    const handleBoxSelect = (e) => {\r\n        try {\r\n            if (e.type === 'mousedown') {\r\n                setBoxSelectDims({\r\n                    x:e.pageX,\r\n                    y:e.pageY,\r\n                    ox:e.pageX,\r\n                    oy:e.pageY,\r\n                    width:0,\r\n                    height:0\r\n                });\r\n                window.addEventListener('touchmove', touchListener);\r\n                window.addEventListener('touchend', removeListeners);\r\n                window.addEventListener('mousemove', listener);\r\n                window.addEventListener('mouseup', removeListeners);\r\n            } else {\r\n    \r\n                const {x, y, width, height } = boxSelectDims;\r\n    \r\n                let layerIds = ['choropleth'];\r\n    \r\n                let features = deckRef.current.pickObjects(\r\n                        {\r\n                            x, y: y-50, width, height, layerIds\r\n                        }\r\n                    )\r\n    \r\n                let GeoidList = [];\r\n                for (let i=0; i<features.length; i++) {\r\n                    GeoidList.push(features[i].object.properties.GEOID)\r\n                    let dataName = features[i]?.object?.properties?.state_abbr !== undefined ? `${features[i].object?.properties?.NAME}, ${features[i]?.object?.properties?.state_abbr}` : `${features[i].object?.properties?.NAME}`\r\n                    \r\n                    if (i===0){\r\n                        dispatch(\r\n                            setSelectionData({\r\n                                values: getDataForCharts(\r\n                                    [features[i].object], \r\n                                    'cases', \r\n                                    dateIndices[currentData]['cases'], \r\n                                    dates, \r\n                                    dataName\r\n                                ),\r\n                                name: dataName,\r\n                                index: findIndex(storedData[currentData], o => o.properties.GEOID === features[i].object.properties.GEOID)\r\n                            })\r\n                        );\r\n                    } else {\r\n                        dispatch(\r\n                            appendSelectionData({\r\n                                values: getDataForCharts(\r\n                                    [features[i].object], \r\n                                    'cases', \r\n                                    dateIndices[currentData]['cases'], \r\n                                    dates, \r\n                                    dataName\r\n                                ),\r\n                                name: dataName,\r\n                                index: findIndex(storedData[currentData], o => o.properties.GEOID === features[i].object.properties.GEOID)\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n                setHighlightGeog(GeoidList); \r\n                window.localStorage.setItem('SHARED_GEOID', GeoidList);\r\n                window.localStorage.setItem('SHARED_VIEW', JSON.stringify(mapRef.current.props.viewState));\r\n                setBoxSelectDims({});\r\n                removeListeners();\r\n                setBoxSelect(false)\r\n            }\r\n        } catch {\r\n            console.log('bad selection')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MapContainer\r\n            onKeyDown={handleKeyDown}\r\n            onKeyUp={handleKeyUp}\r\n            onMouseDown={e => boxSelect ? handleBoxSelect(e) : null}\r\n            onMouseUp={e => boxSelect ? handleBoxSelect(e) : null} \r\n        >\r\n            {\r\n                // boxSelectDims.hasOwnProperty('x') && \r\n                true && \r\n                <IndicatorBox \r\n                    x={boxSelectDims.x} \r\n                    y={boxSelectDims.y}\r\n                    width={boxSelectDims.width}\r\n                    height={boxSelectDims.height}>\r\n                </IndicatorBox>\r\n            }\r\n            <DeckGL\r\n                layers={Layers}\r\n                ref={deckRef}\r\n\r\n                initialViewState={viewState}\r\n                controller={\r\n                    {\r\n                        dragRotate: !boxSelect, \r\n                        dragPan: !boxSelect, \r\n                        doubleClickZoom: !boxSelect, \r\n                        touchZoom: !boxSelect, \r\n                        touchRotate: !boxSelect, \r\n                        keyboard: true, \r\n                        scrollZoom: true\r\n                    }\r\n                }\r\n                views={view}\r\n\r\n                // onViewStateChange={onViewStateChange}\r\n                // viewState={viewStates}\r\n                // views={insetMap ? views : views[0]}\r\n            >\r\n                <MapboxGLMap\r\n                    reuseMaps\r\n                    ref={mapRef}\r\n                    mapStyle={mapStyle} //{globalMap || mapParams.vizType === 'cartogram' ? 'mapbox://styles/lixun910/ckhtcdx4b0xyc19qzlt4b5c0d' : 'mapbox://styles/lixun910/ckhkoo8ix29s119ruodgwfxec'}\r\n                    preventStyleDiffing={true}\r\n                    mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                    onViewportChange={() => setHoverInfo(false)}\r\n                    // onViewportChange={viewState  => console.log(mapRef.current.props.viewState)} \r\n                    onLoad={() => {\r\n                        dispatch(setMapLoaded(true))\r\n                    }}\r\n                    >\r\n                    <MapGeocoder \r\n                        mapRef={mapRef}\r\n                        id=\"mapGeocoder\"\r\n                        onViewportChange={handleGeocoder}\r\n                        onClear={() => setTimeout(() => {setChoroplethInteractive(true)},500)}\r\n                        clearOnBlur={true}\r\n                        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                        position=\"top-right\"                        \r\n                        placeholder=\"Search by Location\"\r\n                        style={{position: 'fixed', top:'5px', right:'5px'}}\r\n                        countries={\"US\"}\r\n                    />\r\n                        \r\n                    <MapButtonContainer \r\n                        infoPanel={panelState.info}\r\n                        onMouseEnter={() => {\r\n                            setHoverInfo(false)\r\n                            setChoroplethInteractive(false)}\r\n                        }\r\n                        onMouseLeave={() => setChoroplethInteractive(true)}\r\n                        >\r\n                        <NavInlineButton\r\n                            title=\"Selection Box\"\r\n                            id=\"boxSelect\"\r\n                            isActive={boxSelect}\r\n                            onClick={() => handleSelectionBoxStart()}\r\n                        >\r\n                            {selectRect}\r\n                        </NavInlineButton>\r\n                        <GeolocateControl\r\n                            positionOptions={{enableHighAccuracy: false}}\r\n                            trackUserLocation={false}\r\n                            onGeolocate={viewState  => handleGeolocate(viewState)}\r\n                            style={{marginBottom: 10}}\r\n                        />\r\n                        <NavigationControl\r\n                            onViewportChange={viewState  => setViewState(viewState)} \r\n                        />\r\n                        \r\n                        <NavInlineButton\r\n                            title=\"Share this Map\"\r\n                            id=\"shareButton\"\r\n                            shareNotification={shared}\r\n                            onClick={() => handleShare({mapParams, dataParams, currentData, coords: mapRef.current.props.viewState, lastDateIndex: dateIndices[currentData][dataParams.numerator]})}\r\n                        >\r\n                            <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                <path d=\"M22.5,65c4.043,0,7.706-1.607,10.403-4.208l29.722,14.861C62.551,76.259,62.5,76.873,62.5,77.5c0,8.284,6.716,15,15,15   s15-6.716,15-15c0-8.284-6.716-15-15-15c-4.043,0-7.706,1.608-10.403,4.209L37.375,51.847C37.449,51.241,37.5,50.627,37.5,50   c0-0.627-0.051-1.241-0.125-1.847l29.722-14.861c2.698,2.601,6.36,4.209,10.403,4.209c8.284,0,15-6.716,15-15   c0-8.284-6.716-15-15-15s-15,6.716-15,15c0,0.627,0.051,1.241,0.125,1.848L32.903,39.208C30.206,36.607,26.543,35,22.5,35   c-8.284,0-15,6.716-15,15C7.5,58.284,14.216,65,22.5,65z\">\r\n                                </path>\r\n                            </svg>\r\n\r\n                        </NavInlineButton>\r\n\r\n                        <ShareURL type=\"text\" value=\"\" id=\"share-url\" />\r\n                    </MapButtonContainer>\r\n                    <div></div>\r\n                </MapboxGLMap >\r\n                \r\n                {/* <View id=\"main\" className=\"test\" style={{display:'none'}}/> */}\r\n            </DeckGL>\r\n            \r\n            {hoverInfo.object && (\r\n                <HoverDiv style={{transition: '0ms all', position: 'absolute', zIndex: 1, pointerEvents: 'none', left: hoverInfo.x, top: hoverInfo.y}}>\r\n                    <MapTooltipContent content={hoverInfo.object} index={dataParams.nIndex} />\r\n                </HoverDiv>\r\n                )}\r\n        </MapContainer>\r\n    ) \r\n}\r\n\r\nexport default Map","import React from 'react';\r\n\r\n\r\n// This component handles and formats the map tooltip info. \r\n// The props passed to this component should contain an object of the hovered object (from deck, info.object by default)\r\nconst MapTooltipContent = (props) => {\r\n    // destructure the object for cleaner formatting\r\n\r\n    const { properties, cases, deaths, // county data\r\n            testing_ccpt, testing_tcap, testing_wk_pos, testing, vaccinesAdmin1, vaccinesAdmin2, vaccinesDist // state data\r\n     } = props.content;\r\n\r\n    // get lengths of time series data for reference below\r\n    let caseN = cases && props.index;\r\n    let deathN = deaths && props.index;\r\n    let testingN = testing && props.index;\r\n    let vaccineN = vaccinesAdmin1 && props.index\r\n\r\n    // conditional returns for combination of information\r\n    // this is not elegant but a bit more reliable than JSX conditional rendering\r\n    if (properties && cases && deaths && testing ) { // State Feature\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    {properties.NAME}\r\n                </h3>\r\n                <div>\r\n                    <hr />\r\n                    Cases: {cases[caseN]?.toLocaleString('en')}<br/>\r\n                    Deaths: {deaths[deathN]?.toLocaleString('en')}<br/>\r\n                    <br/>\r\n                    7-Day New Cases: {(cases[caseN]-cases[caseN-7])?.toLocaleString('en')}<br/>\r\n                    7-Day New Deaths: {(deaths[deathN]-deaths[deathN-7])?.toLocaleString('en')}<br/>\r\n                    <br/>\r\n                    Total Testing: {(testing[testingN])?.toLocaleString('en')}<br/>\r\n                    7-Day Positivity Rate: {(testing_wk_pos[testingN]*100)?.toFixed(2)}%<br/>\r\n                    7-Day Testing Capacity: {(testing_tcap[testingN])?.toFixed(2)}<br/>\r\n                    <br/>\r\n                    Testing Criterion: {properties.criteria}<br/>\r\n                    First dose administered: {Math.round((vaccinesAdmin1[testingN]/properties.population)*1000)/10}%<br/>\r\n                    Second dose administered: {Math.round((vaccinesAdmin2[testingN]/properties.population)*1000)/10}%<br/>\r\n                    Doses Available Per 100K: {Math.round((vaccinesDist[testingN]/properties.population)*100000)?.toLocaleString()}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (properties && cases && deaths){ // County Feature\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    {properties.NAME} {properties.state_name && `, ${properties.state_name}`}\r\n                </h3>\r\n                <div>\r\n                    <hr />\r\n                    Cases: {cases[caseN]?.toLocaleString('en')}<br/>\r\n                    Deaths: {deaths[deathN]?.toLocaleString('en')}<br/>\r\n                    <br/>\r\n                    7-Day New Cases: {(cases[caseN]-cases[caseN-7])?.toLocaleString('en')}<br/>\r\n                    7-Day New Deaths: {(deaths[deathN]-deaths[deathN-7])?.toLocaleString('en')}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (props.content['Hospital Type']) { // Hospital Feature\r\n        return (\r\n            <div>\r\n                <h3>{props.content['Name']}</h3>\r\n                <div>\r\n                    <hr />\r\n                    {props.content['Hospital Type']}<br/>\r\n                    {props.content.Address} <br />\r\n                    {props.content.Address_2 && `${props.content.Address_2}${<br/>}`}\r\n                    {props.content.City}, {props.content.State}<br/>\r\n                    {props.content.Zipcode}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else if (props.content.testing_status) { // clinic feature\r\n        return (\r\n            <div>\r\n                <h3>{props.content.name}</h3>\r\n                <div>\r\n                    <hr />\r\n                    {props.content.address}<br/>\r\n                    {props.content.city},{props.content.st_abbr} <br />\r\n                    {props.content.phone}<br/><br/>\r\n                    {props.content.testing_status === 'Yes' ? 'This location offers COVID-19 testing.' : 'Currently, this location does not offer COVID-19 testing.'}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    \r\n    } else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapTooltipContent","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NavItems = styled.ul`\r\n  @media (max-width:1024px){\r\n    display:none !important;\r\n  }\r\n`\r\nconst NavBar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"nav-logo\">\r\n              <img src={`${process.env.PUBLIC_URL}/favicon/android-icon-192x192.png`} style={{height: '30px', paddingRight: '5px'}} alt=\"US Covid Atlas Logo\" /><a href=\"index.html\">US COVID ATLAS </a>\r\n            </div>\r\n          <NavItems> \r\n            <li><a href=\"data.html\">DATA</a></li>\r\n            <li><a href=\"api.html\">API</a></li>\r\n            <li><a href=\"methods.html\">METHODS</a></li>\r\n            <li><a href=\"faq.html\">FAQ</a></li>\r\n            <li><a href=\"about.html\">INSIGHTS</a></li>\r\n            <li><a href=\"about.html\">ABOUT</a></li>\r\n            <li><a href=\"contact.html\">CONTACT</a></li>\r\n          </NavItems>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { setNotification } from '../actions'\r\nimport { colors } from '../config'\r\n\r\nconst Notification = styled.div`\r\n    width: 300px;\r\n    max-width: 90vw;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    z-index: 15;\r\n    background: ${colors.gray};\r\n    color: ${colors.white};\r\n    padding: 0;\r\n    overflow: hidden;\r\n    border-radius: 4px;\r\n    padding:20px 30px 20px 20px;\r\n    -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    transform:translate(-50%, -50%);\r\n`\r\n\r\nconst CloseTutorial = styled.button`\r\n    position: absolute;\r\n    top: 12px;\r\n    right: 10px;\r\n    font-size: 200%;\r\n    cursor: pointer;\r\n    padding:0;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    color:white;\r\n`\r\n\r\nconst NotificationBox = () => {\r\n    const dispatch = useDispatch();\r\n    const notification = useSelector(state => state.notification);\r\n\r\n    return (\r\n        notification && \r\n        <Notification>\r\n            <div dangerouslySetInnerHTML={{__html: notification}}></div>\r\n            <CloseTutorial onClick={() => dispatch(setNotification(null))}>×</CloseTutorial>\r\n        </Notification>\r\n    )\r\n}\r\n\r\nexport default NotificationBox","export const variableTree = {\r\n    \"HEADER:cases\":{},\r\n    \"Confirmed Count\": {\r\n        \"County\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'county_1p3a.geojson',\r\n                \"csv\":['covid_confirmed_1p3a']\r\n            },\r\n            \"USA Facts\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['covid_confirmed_usafacts'] \r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'county_nyt.geojson',\r\n                \"csv\":['covid_confirmed_nyt']  \r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_confirmed_1p3a_state']\r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'state_nyt.geojson',\r\n                \"csv\":['covid_confirmed_nyt_state']\r\n            }, \r\n        }\r\n    },\r\n    \"Confirmed Count per 100K Population\":{\r\n        \"County\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'county_1p3a.geojson',\r\n                \"csv\":['covid_confirmed_1p3a']\r\n            },\r\n            \"USA Facts\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['covid_confirmed_usafacts'] \r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'county_nyt.geojson',\r\n                \"csv\":['covid_confirmed_nyt']  \r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_confirmed_1p3a_state']\r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'state_nyt.geojson',\r\n                \"csv\":['covid_confirmed_nyt_state']\r\n            }, \r\n        }\r\n    },\r\n    \"Confirmed Count per Licensed Bed\":{\r\n        \"County\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'county_1p3a.geojson',\r\n                \"csv\":['covid_confirmed_1p3a']\r\n            },\r\n            \"USA Facts\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['covid_confirmed_usafacts'] \r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'county_nyt.geojson',\r\n                \"csv\":['covid_confirmed_nyt']  \r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_confirmed_1p3a_state']\r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'state_nyt.geojson',\r\n                \"csv\":['covid_confirmed_nyt_state']\r\n            }, \r\n        }\r\n    },\r\n    \"HEADER:deaths\":{},\r\n    \"Death Count\":{\r\n        \"County\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'county_1p3a.geojson',\r\n                \"csv\":['covid_deaths_1p3a']\r\n            },\r\n            \"USA Facts\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['covid_deaths_usafacts'] \r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'county_nyt.geojson',\r\n                \"csv\":['covid_deaths_nyt']  \r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_deaths_1p3a_state']\r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'state_nyt.geojson',\r\n                \"csv\":['covid_deaths_nyt_state']\r\n            }, \r\n        }\r\n    },\r\n    \"Death Count per 100K Population\": {\r\n        \"County\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'county_1p3a.geojson',\r\n                \"csv\":['covid_deaths_1p3a']\r\n            },\r\n            \"USA Facts\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['covid_deaths_usafacts'] \r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'county_nyt.geojson',\r\n                \"csv\":['covid_deaths_nyt']  \r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_deaths_1p3a_state']\r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'state_nyt.geojson',\r\n                \"csv\":['covid_deaths_nyt_state']\r\n            }, \r\n        }\r\n    },\r\n    \"Death Count / Confirmed Count\": {\r\n        \"County\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'county_1p3a.geojson',\r\n                \"csv\":['covid_deaths_1p3a', 'covid_confirmed_1p3a']\r\n            },\r\n            \"USA Facts\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['covid_deaths_usafacts', 'covid_confirmed_usafacts'] \r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'county_nyt.geojson',\r\n                \"csv\":['covid_deaths_nyt', 'covid_confirmed_nyt']  \r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_deaths_1p3a_state', 'covid_confirmed_1p3a_state']\r\n            },\r\n            \"New York Times\": {\r\n                \"geojson\":'state_nyt.geojson',\r\n                \"csv\":['covid_deaths_nyt_state', 'covid_confirmed_nyt_state']\r\n            }, \r\n        }\r\n    },\r\n    \"HEADER:testing\":{},\r\n    \"7 Day Testing Positivity Rate %\":{\r\n        \"County\": {\r\n            \"CDC\": {\r\n                \"geojson\": \"cdc.geojson\",\r\n                \"csv\": [\"covid_wk_pos_cdc\"],\r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_wk_pos_1p3a_state']\r\n            },\r\n        }\r\n    },\r\n    \"7 Day Testing Capacity\":{\r\n        \"County\": {\r\n            \"CDC\": {\r\n                \"geojson\": \"cdc.geojson\",\r\n                \"csv\": [\"covid_tcap_cdc\"],\r\n            }\r\n        },\r\n        \"State\": {\r\n            \"1point3acres\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['covid_tcap_1p3a_state']\r\n            },\r\n        }\r\n    },\r\n    \"HEADER:vaccination\":{},\r\n    \"% Received First Dose\":{\r\n        \"State\": {\r\n            \"CDC\": {\r\n                \"geojson\": \"state_1p3a.geojson\",\r\n                \"csv\": [\"vaccine_admin_cdc_1p3a_state\"],\r\n            }\r\n        },\r\n    },\r\n    \"% Received Second Dose\":{\r\n        \"State\": {\r\n            \"CDC\": {\r\n                \"geojson\": \"state_1p3a.geojson\",\r\n                \"csv\": [\"vaccine_admin_cdc_1p3a_state\"],\r\n            }\r\n        },\r\n    },\r\n    \"Doses Available per 100K Population\":{\r\n        \"State\": {\r\n            \"CDC\": {\r\n                \"geojson\": \"state_1p3a.geojson\",\r\n                \"csv\": [\"vaccine_admin_cdc_1p3a_state\"],\r\n            }\r\n        },\r\n    },\r\n    \"HEADER:forecasting\":{},\r\n    \"Forecasting (5-Day Severity Index)\":{\r\n        \"County\": {\r\n            \"Yu Group at Berkeley\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['berkeley_predictions']\r\n            }\r\n        }\r\n    },\r\n    \"HEADER:community health information\":{},\r\n    \"Uninsured %\": {\r\n        \"County\": {\r\n            \"County Health Rankings\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['chr_health_factors']\r\n            }\r\n        },\r\n        \"State\": {\r\n            \"County Health Rankings\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['chr_health_factors_state']\r\n            }\r\n        }\r\n    },\r\n    \"Over 65 Years %\": {\r\n        \"County\": {\r\n            \"County Health Rankings\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['chr_health_context']\r\n            }\r\n        },\r\n        \"State\": {\r\n            \"County Health Rankings\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['chr_health_context_state']\r\n            }\r\n        }\r\n    },\r\n    \"Life Expectancy\": {\r\n        \"County\": {\r\n            \"County Health Rankings\": {\r\n                \"geojson\":'county_usfacts.geojson',\r\n                \"csv\":['chr_life']\r\n            }\r\n        },\r\n        \"State\": {\r\n            \"County Health Rankings\": {\r\n                \"geojson\":'state_1p3a.geojson',\r\n                \"csv\":['chr_life']\r\n            }\r\n        }\r\n    },\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { colLookup } from '../utils'; //getGzipData, getArrayCSV\r\nimport Tooltip from './tooltip';\r\nimport { StyledDropDown, BinsContainer } from '../styled_components';\r\nimport { setVariableParams, setMapParams, setCurrentData, setPanelState, setParametersAndData } from '../actions'; //variableChangeZ, setNotification, storeMobilityData\r\nimport { fixedScales, colorScales, colors } from '../config';\r\nimport { settings } from '../config/svg';\r\nimport { variableTree } from '../config/variableTree'\r\n\r\nconst VariablePanelContainer = styled.div`\r\n  position:fixed;\r\n  left:0;\r\n  top:50px;\r\n  height:auto;\r\n  min-height:calc(100vh - 50px);\r\n  min-width:200px;\r\n  background-color: ${colors.gray}fa;\r\n  box-shadow: 2px 0px 5px rgba(0,0,0,0.7);\r\n  padding:0;\r\n  box-sizing: border-box;\r\n  transition:250ms all;\r\n  font: 'Lato', sans-serif;\r\n  color:white;\r\n  z-index:50;\r\n  &.hidden {\r\n    transform: translateX(-100%);\r\n  }\r\n  @media (max-width:1024px) {\r\n    min-width:50vw;\r\n  }  \r\n  @media (max-width:600px) {\r\n    width:100%;\r\n    display: ${props => props.otherPanels ? 'none' : 'initial'};\r\n  }\r\n  div.noteContainer {\r\n    position: absolute;\r\n    bottom:0;\r\n    left:0;\r\n    padding:20px;\r\n    box-sizing:border-box;\r\n    background:${colors.gray};\r\n    width:calc(100%);\r\n    box-shadow: 0px -5px 10px rgba(0,0,0,0.25);\r\n    a {  \r\n      color: ${colors.yellow};\r\n      -webkit-text-decoration: none;\r\n      text-decoration: none;\r\n      }\r\n    }\r\n  }\r\n  p.note {\r\n    font-family: 'Lato', sans-serif;\r\n    font-weight:300;\r\n    font-size:90%;\r\n  }\r\n  div.poweredByGeoda {\r\n    color:white;\r\n    width:100%;\r\n    text-align:center;\r\n    @media (max-height:900px){\r\n    }\r\n    a {\r\n      color:white;\r\n      margin:0 auto;\r\n      text-decoration: none;\r\n      letter-spacing: 2px;\r\n      font-size:75%;\r\n      img {\r\n        width:23px;\r\n        height:27px;\r\n        transform: translate(-50%,40%);\r\n      }\r\n    }\r\n  }\r\n  button#showHideLeft {\r\n    position:absolute;\r\n    left:95%;\r\n    top:20px;\r\n    width:40px;\r\n    height:40px;\r\n    box-sizing:border-box;\r\n    padding:0;\r\n    margin:0;\r\n    background-color: ${colors.gray};\r\n    box-shadow: 0px 0px 6px rgba(0,0,0,1);\r\n    outline:none;\r\n    border:none;\r\n    cursor: pointer;\r\n    transition:500ms all;\r\n    svg { \r\n      width:20px;\r\n      height:20px;\r\n      margin:10px 0 0 0;\r\n      @media (max-width:600px){\r\n        width:20px;\r\n        height:20px;\r\n        margin:5px;\r\n      }\r\n      fill:white;\r\n      transform:rotate(0deg);\r\n      transition:500ms all;\r\n      .cls-1 {\r\n        fill:none;\r\n        stroke-width:6px;\r\n        stroke:white;\r\n      }\r\n    }\r\n    :after {\r\n      opacity:0;\r\n      font-weight:bold;\r\n      content: 'Variables';\r\n      color:white;\r\n      position: relative;\r\n      right:-50px;\r\n      top:-22px;\r\n      transition:500ms all;\r\n      z-index:4;\r\n    }\r\n    @media (max-width:768px){\r\n      top:120px;\r\n    }\r\n    @media (max-width:600px) {\r\n      left:90%;\r\n      width:30px;\r\n      height:30px;\r\n      top:140px;\r\n      :after {\r\n        display:none;\r\n      }\r\n    }\r\n  }\r\n  button#showHideLeft.hidden {\r\n    left:100%;\r\n    svg {\r\n      transform:rotate(90deg);\r\n    }\r\n    :after {\r\n      opacity:1;\r\n    }\r\n  }\r\n`\r\nconst StyledButtonGroup = styled(ButtonGroup)`\r\n  color:white;\r\n  padding-bottom:20px;\r\n  .MuiButtonGroup-grouped {\r\n    color:white;\r\n    border-color:${colors.white}77;\r\n    &:hover {\r\n      border-color:white;\r\n    }\r\n    &.active {\r\n      background:white;\r\n      color:${colors.gray};\r\n    }\r\n  }\r\n`\r\n\r\nconst DateSelectorContainer = styled.div`\r\n  opacity:${props => props.disabled ? 0.25 : 1};\r\n  pointer-events:${props => props.disabled ? 'none' : 'initial'};\r\n`\r\n\r\nconst TwoUp = styled.div`\r\n  width:100%;\r\n  .MuiFormControl-root {\r\n    width:45%;\r\n    min-width:60px;\r\n    margin-right:5px;\r\n  }\r\n`\r\n\r\nconst ControlsContainer = styled.div`\r\n  max-height:74vh;\r\n  overflow-y:visible;\r\n  box-sizing:border-box;\r\n  padding:20px;\r\n\r\n  @media (max-height:1079px){\r\n    overflow-y:scroll;\r\n    padding:20px 20px 25vh 20px;\r\n  }\r\n  \r\n  @media (max-width:600px) {\r\n    width:100%;\r\n    padding:0 10px 25vh 10px;\r\n  }\r\n`\r\n\r\nconst ListSubheader = styled(MenuItem)`\r\n  font-variant: small-caps;\r\n  font-weight:800;\r\n`\r\n\r\nconst VariablePanel = (props) => {\r\n\r\n  // const getGzipAndCentroids = async (gzipUrl, centroidsUrl) => {\r\n  //   Promise.all([\r\n  //       getGzipData(gzipUrl),\r\n  //       getArrayCSV(centroidsUrl)\r\n  //     ]).then(\r\n  //       values => dispatch(storeMobilityData({centroids: values[1], flows: values[0]}))\r\n  //   )\r\n  // } \r\n\r\n  const dispatch = useDispatch();    \r\n\r\n  const { cols, currentData,  dataParams, mapParams, panelState, urlParams } = useSelector(state => state); \r\n  // currentVariable, currentZVariable, storedMobilityData\r\n  const [bivariateZ, setBivariateZ] = useState(false);\r\n\r\n  const VariablePresets = {\r\n    \"HEADER:cases\":{},\r\n    \"Confirmed Count\": {\r\n        variableName:\"Confirmed Count\",\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: null,\r\n        dProperty: null,\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1,\r\n        scale3D: 100,\r\n        fixedScale: null,\r\n        colorScale: null,\r\n    },\r\n    \"Confirmed Count per 100K Population\": {\r\n        variableName:\"Confirmed Count per 100K Population\",\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000,\r\n        scale3D: 1000,\r\n        fixedScale: null,\r\n        colorScale: null,\r\n    },\r\n    \"Confirmed Count per Licensed Bed\": {\r\n        variableName:\"Confirmed Count per Licensed Bed\",\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'beds',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1,\r\n        scale3D: 100000,\r\n        fixedScale: null,\r\n        colorScale: null,\r\n    },\r\n    \"HEADER:deaths\":{},\r\n    \"Death Count\":{\r\n      variableName:\"Death Count\",\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      scale3D: 10000,\r\n      fixedScale: null,\r\n      colorScale: null,        \r\n    }, \r\n    \"Death Count per 100K Population\":{\r\n      variableName:\"Death Count per 100K Population\",\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: 'characteristic',\r\n      dProperty: 'population',\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:100000,\r\n      scale3D: 15000,\r\n      fixedScale: null,\r\n      colorScale: null,\r\n    },\r\n    \"Death Count / Confirmed Count\":{\r\n      variableName:\"Death Count / Confirmed Count\",\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'cases',\r\n      dType: 'time-series',\r\n      dProperty: null,\r\n      scale:1,\r\n      fixedScale: null,\r\n      colorScale: null,\r\n    },\r\n    \"HEADER:community health\":{},\r\n    \"Uninsured %\":{\r\n      variableName:\"Uninsured %\",\r\n      numerator: 'chr_health_factors',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'chr_health_factors', 'UnInPrc'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: null,\r\n      colorScale: 'uninsured',\r\n      scale3D: 15000,\r\n    },\r\n    \"Over 65 Years %\":{\r\n      variableName:\"Over 65 Years %\",\r\n      numerator: 'chr_health_context',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'chr_health_context', 'Over65YearsPrc'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: null,\r\n      colorScale: 'over65',\r\n      scale3D: 15000,\r\n    },\r\n    \"Life Expectancy\":{\r\n      variableName:\"Life Expectancy\",\r\n      numerator: 'chr_life',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'chr_life', 'LfExpRt'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'lifeExp',\r\n      fixedScale: null,\r\n      scale3D: 1000\r\n    },\r\n    \r\n    \"HEADER:testing\":{},\r\n    \"7 Day Testing Positivity Rate %\": {\r\n      variableName:\"7 Day Testing Positivity Rate %\",\r\n      numerator: 'testing_wk_pos',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testing',\r\n      colorScale: 'testing',\r\n      scale3D: 10000000\r\n    },\r\n    \"7 Day Testing Capacity\": {\r\n      variableName:\"7 Day Testing Capacity\",\r\n      numerator: 'testing_tcap',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testingCap',\r\n      colorScale: 'testingCap',\r\n      scale3D: 3000\r\n    }, \r\n    \"7 Day Confirmed Cases per Testing %\":{\r\n      variableName:\"7 Day Confirmed Cases per Testing %\",\r\n      numerator: 'testing_ccpt',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      fixedScale: 'testing',\r\n      colorScale: 'testing',\r\n      scale3D: 10000000\r\n    },\r\n    \"HEADER:cdc vaccination\":{},\r\n    \"% Received First Dose\": {\r\n        variableName:\"% Received First Dose\",\r\n        numerator: 'vaccinesAdmin1',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        nRange: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100,\r\n        scale3D: 1000,\r\n        colorScale: 'purpleSingleHue8',\r\n        fixedScale: null,\r\n    },\r\n    \"% Received Second Dose\": {\r\n        variableName:\"% Received Second Dose\",\r\n        numerator: 'vaccinesAdmin2',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        nRange: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100,\r\n        scale3D: 1000,\r\n        colorScale: 'greenSingleHue8',\r\n        fixedScale: null,\r\n    },\r\n    \"Doses Available per 100K Population\": {\r\n        variableName:\"Doses Available per 100K Population\",\r\n        numerator: 'vaccinesDist',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        nRange: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000,\r\n        scale3D: 1000,\r\n        colorScale: 'BuPu8',\r\n        fixedScale: null,\r\n    },\r\n    \"HEADER:forecasting\":{},\r\n    \"Forecasting (5-Day Severity Index)\": {\r\n      variableName:\"Forecasting (5-Day Severity Index)\",\r\n      numerator: 'predictions',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(cols, currentData, 'predictions', 'severity_index'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: null,\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: 'forecasting',\r\n      fixedScale: 'forecasting',\r\n      scale3D: 50000\r\n    },\r\n  }\r\n\r\n  // mobility variable overlays\r\n\r\n  // const OneP3AVariables = {\r\n  //   \"HEADER:mobility\":{},\r\n  //   \"Dex\": {\r\n  //       numerator: 'dex',\r\n  //       nType: 'time-series',\r\n  //       nProperty: null,\r\n  //       denominator: 'properties',\r\n  //       dType: null,\r\n  //       dProperty: null,\r\n  //       dRange:null,\r\n  //       dIndex:null,\r\n  //       scale:1,\r\n  //       scale3D: 1000\r\n  //   },\r\n  //   \"Dex Adjusted\": {\r\n  //       numerator: 'dex_a',\r\n  //       nType: 'time-series',\r\n  //       nProperty: null,\r\n  //       denominator: 'properties',\r\n  //       dType: null,\r\n  //       dProperty: null,\r\n  //       dRange:null,\r\n  //       dIndex:null,\r\n  //       scale:1,\r\n  //       scale3D: 1000\r\n  //   },\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   if (urlParams.var) handleVariable({event: { target: { \r\n  //     value: legacyVariableOrder[urlParams.src||'county_usfacts.geojson'][urlParams.var]\r\n  //     }}})\r\n  // },[])\r\n\r\n  // useEffect(() => {\r\n  //   if (mapParams.overlay === \"mobility-county\" && storedMobilityData === {}) {\r\n  //     getGzipAndCentroids(\r\n  //       `${process.env.PUBLIC_URL}/gz/county_lex_2020-11-28.csv.gz`,\r\n  //       `${process.env.PUBLIC_URL}/csv/county_centroids.csv`\r\n  //     )\r\n  //     console.log('loaded mobility data')\r\n  //   }\r\n  // },[mapParams.overlay])\r\n\r\n  // const handleVariable = (event) => {\r\n  //   let variable = event.target.value;\r\n  //   let tempParams = PresetVariables[variable] || CountyVariables[variable] || StateVariables[variable] || OneP3AVariables[variable] || CDCVariables[variable] || null;\r\n    \r\n  //   // dispatch(variableChange({\r\n  //   //   variable,\r\n  //   //   mapParams: {\r\n  //   //     customScale: tempParams.colorScale || '', \r\n  //   //     fixedScale: tempParams.fixedScale || null\r\n  //   //   },\r\n  //   //   variableParams: {\r\n  //   //     ...tempParams\r\n  //   //   }\r\n  //   // }))\r\n\r\n  //   // transitioning from a static characteristic (null time range)\r\n  //   // to a time-series data set \r\n  //   if (dataParams.nType === 'characteristic' && tempParams.nType === 'time-series') tempParams.nRange = 7;\r\n\r\n  //   // if time series over time series, coordinate index and range\r\n  //   if (tempParams.nType === 'time-series' && tempParams.dType === 'time-series') {\r\n  //     tempParams.dIndex = dataParams.nIndex;\r\n  //     tempParams.dRange = tempParams.nRange || dataParams.nRange;\r\n  //   }\r\n\r\n\r\n  //   dispatch(setVariableParams({...tempParams}))\r\n  //   dispatch(setVariableName(variable))\r\n  //   dispatch(setMapParams({customScale: tempParams.colorScale || '', fixedScale: tempParams.fixedScale || null}))\r\n  // };\r\n\r\n  // const handleZVariable = (event) => {\r\n  //   let variable = event.target.value;\r\n  //   let tempParams = PresetVariables[variable] || CountyVariables[variable] || StateVariables[variable] || OneP3AVariables[variable] || CDCVariables[variable] || null;\r\n    \r\n  //   // transitioning from a static characteristic (null time range)\r\n  //   if (dataParams.zAxisParams?.nType === 'characteristic' && tempParams.nType === 'time-series') tempParams.nRange = 7;\r\n    \r\n  //   // to a time-series data set \r\n\r\n  //   // if time series over time series, coordinate index and range\r\n  //   if (tempParams.nType === 'time-series' && tempParams.dType === 'time-series') {\r\n  //     tempParams.dIndex = dataParams.nIndex;\r\n  //     tempParams.dRange = tempParams.nRange || dataParams.nRange;\r\n  //   }\r\n    \r\n  //   dispatch(variableChangeZ(variable, tempParams))\r\n  // };\r\n\r\n  // const handleDataSource = (event) => {\r\n  //   let newDataSet = event.target.value\r\n  //   if ((newDataSet.includes(\"state\") && CountyVariables.hasOwnProperty(currentVariable))||(newDataSet.includes(\"county\") && StateVariables.hasOwnProperty(currentVariable))) {\r\n\r\n  //     // dispatch(resetVariable({\r\n  //     //   mapParams: {\r\n  //     //     customScale: '', \r\n  //     //     fixedScale: null\r\n  //     //   },\r\n  //     //   variableParams: {\r\n  //     //     ...PresetVariables[\"Confirmed Count per 100K Population\"]\r\n  //     //   },\r\n  //     //   variable: \"Confirmed Count per 100K Population\",\r\n  //     //   notification: `${dataPresets[newDataSet].plainName} data do not have ${currentVariable}. The Atlas will default to Confirmed Cases Per 100k People.`\r\n  //     // }))\r\n\r\n  //     dispatch(setMapParams({customScale: '', fixedScale: null}))\r\n  //     dispatch(setVariableParams({...PresetVariables[\"Confirmed Count per 100K Population\"]}))\r\n  //     dispatch(setVariableName(\"Confirmed Count per 100K Population\"))\r\n  //     dispatch(setNotification(`${dataPresets[newDataSet].plainName} data do not have ${currentVariable}. The Atlas will default to Confirmed Cases Per 100k People.`))  \r\n\r\n  //     setTimeout(() => {dispatch(setCurrentData(newDataSet))}, 250);\r\n  //     setTimeout(() => {dispatch(setNotification(null))},10000);\r\n  //   } else if (newDataSet.includes(\"cdc\")) {\r\n  //     dispatch(setVariableParams({...CDCVariables[\"7-Day Confirmed Count per 100K Population\"]}))\r\n  //     dispatch(setVariableName(\"7-Day Confirmed Count per 100K Population\"))\r\n  //     dispatch(setNotification(`CDC County Data is aggregated to 7-Day rolling averages. The Atlas will default to 7-Day rolling average Confirmed Cases Per 100k People.`))  \r\n  //     setTimeout(() => {dispatch(setCurrentData(newDataSet))}, 250);\r\n  //     setTimeout(() => {dispatch(setNotification(null))},10000);\r\n  //   } else if (currentData.includes('cdc')) {\r\n  //     dispatch(setMapParams({customScale: '', fixedScale: null}))\r\n  //     dispatch(setVariableParams({...PresetVariables[\"Confirmed Count per 100K Population\"]}))\r\n  //     dispatch(setVariableName(\"Confirmed Count per 100K Population\"))\r\n  //     dispatch(setNotification(`Changing to ${dataPresets[newDataSet].plainName} data. CDC County Data is aggregated to 7-Day rolling averages. The Atlas will default to Confirmed Cases Per 100k People.`))  \r\n\r\n  //     setTimeout(() => {dispatch(setCurrentData(newDataSet))}, 250);\r\n  //     setTimeout(() => {dispatch(setNotification(null))},10000);\r\n  //   }\r\n    \r\n  //     else {\r\n  //     dispatch(setCurrentData(newDataSet)); \r\n  //   }\r\n  // };\r\n\r\n\r\n  const handleMapType = (event, newValue) => {\r\n    let nBins = newValue === 'hinge15_breaks' ? 6 : 8\r\n    if (newValue === 'lisa') {\r\n      dispatch(\r\n        setMapParams(\r\n          {\r\n            mapType: newValue,\r\n            nBins: 4,\r\n            bins: fixedScales[newValue],\r\n            colorScale: colorScales[newValue]\r\n            \r\n          }\r\n        )\r\n      )\r\n    } else {\r\n      dispatch(\r\n        setMapParams(\r\n          {\r\n            nBins,\r\n            mapType: newValue,\r\n            binMode: newValue === 'hinge15_breaks' ? 'dynamic' : ''\r\n          }\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  const handleMapOverlay = (event) =>{\r\n    dispatch(\r\n      setMapParams(\r\n        {\r\n          overlay: event.target.value\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  const handleMapResource = (event) =>{\r\n    dispatch(\r\n      setMapParams(\r\n        {\r\n          resource: event.target.value\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  const handleOpenClose = () => {\r\n    if (panelState.variables) {\r\n      dispatch(setPanelState({variables:false}))\r\n    } else {\r\n      dispatch(setPanelState({variables:true}))\r\n    }\r\n  }\r\n\r\n  const handleVizTypeButton = (vizType) => {\r\n    setBivariateZ(false)\r\n    if (mapParams.vizType !== vizType) {\r\n      dispatch(setMapParams({vizType}))\r\n    }\r\n  }\r\n\r\n  // const handleZSwitch = () => {\r\n  //   setBivariateZ(prev => !prev )\r\n  // }\r\n  \r\n  const datasetTree = {\r\n    'County': {\r\n      '1point3acres':'county_1p3a.geojson',\r\n      'New York Times':'county_nyt.geojson',\r\n      'USA Facts':'county_usfacts.geojson',\r\n      'CDC':'cdc.geojson',\r\n      'Yu Group at Berkeley':'county_usfacts.geojson',\r\n      'County Health Rankings':'county_usfacts.geojson',\r\n    }, \r\n    'State': {\r\n      '1point3acres':'state_1p3a.geojson',\r\n      'New York Times':'state_nyt.geojson',\r\n      'CDC':'state_1p3a.geojson',\r\n      'County Health Rankings':'state_1p3a.geojson',\r\n    }\r\n  }\r\n\r\n  const urlParamsTree = {\r\n    'county_usfacts.geojson': {\r\n      name: 'USA Facts',\r\n      geography: 'County'\r\n    },\r\n    'county_1p3a.geojson': {\r\n      name: '1point3acres',\r\n      geography: 'County'\r\n    },\r\n    'county_nyt.geojson': {\r\n      name: 'New York Times',\r\n      geography: 'County'\r\n    },\r\n    'state_1p3a.geojson': {\r\n      name: '1point3acres',\r\n      geography: 'State'\r\n    },\r\n    'state_usafacts.geojson': {\r\n      name: 'USA Facts',\r\n      geography: 'State'\r\n    }, \r\n    'state_nyt.geojson': {\r\n      name: 'New York Times',\r\n      geography: 'State'\r\n    },\r\n    'global_jhu.geojson': {\r\n      name: 'John Hopkins University',\r\n      geography: 'Global'\r\n    },\r\n    'cdc.geojson': {\r\n      name: 'CDC',\r\n      geography: 'County'\r\n    }\r\n  }\r\n\r\n  const [newVariable, setNewVariable] = useState(\"Confirmed Count per 100K Population\");\r\n  const [currentGeography, setCurrentGeography] = useState('County');\r\n  const [currentDataset, setCurrentDataset] = useState('1point3acres');\r\n\r\n  useEffect(() => {\r\n    if (newVariable !== dataParams.variableName) {\r\n      setNewVariable(dataParams.variableName)\r\n      setCurrentGeography(urlParamsTree[currentData]['geography'])\r\n      if (dataParams.variableName.indexOf('Vaccin') !== -1 || (dataParams.variableName.indexOf('Test') !== -1 && currentData.indexOf('state') === -1)) {\r\n        setCurrentDataset('CDC')\r\n      } else {\r\n        setCurrentDataset(urlParamsTree[currentData]['name'])\r\n      }\r\n    }\r\n  }, [urlParams])\r\n  \r\n\r\n  const handleNewVariable = (e) => {\r\n    let tempGeography = currentGeography;\r\n    let tempDataset = currentDataset;\r\n\r\n    let resetDateRange = \r\n    VariablePresets[e.target.value].nType === 'time-series' && \r\n    (dataParams.nType === 'characteristic' || dataParams.variableName.indexOf(\"Testing\") !== -1) && \r\n    dataParams.nRange === null &&\r\n    VariablePresets[e.target.value].variableName.indexOf(\"Testing\") === -1 && VariablePresets[e.target.value].nType !== 'characteristic';\r\n\r\n    let nIndex = resetDateRange ? 'nRange' : null;\r\n    \r\n    let dIndex = (VariablePresets[e.target.value].dType === 'time-series') ? 'dIndex' : null;\r\n    let dRange = (VariablePresets[e.target.value].dType === 'time-series') ? 'dRange' : null;\r\n    // check if valid combination based on variable tree\r\n    if (!variableTree[e.target.value].hasOwnProperty(tempGeography) || !variableTree[e.target.value][tempGeography].hasOwnProperty(tempDataset)) {\r\n      tempGeography = Object.keys(variableTree[e.target.value])[0]\r\n      tempDataset = Object.keys(variableTree[e.target.value][tempGeography])[0];\r\n\r\n      \r\n      dispatch(setParametersAndData({\r\n        params: {\r\n          ...VariablePresets[e.target.value],\r\n          [nIndex]: 7,\r\n          [dIndex]: dataParams.nIndex,\r\n          [dRange]: dataParams.nRange,\r\n        },\r\n        dataset: datasetTree[tempGeography][tempDataset],\r\n        mapParams: {\r\n          customScale: VariablePresets[e.target.value].colorScale || null\r\n        }\r\n      }))\r\n      setCurrentGeography(tempGeography)\r\n      setCurrentDataset(tempDataset)\r\n    } else {\r\n      dispatch(setVariableParams({\r\n        ...VariablePresets[e.target.value],\r\n        [nIndex]: 7,\r\n        [dIndex]: dataParams.nIndex,\r\n        [dRange]: dataParams.nRange,\r\n      }))\r\n\r\n    }\r\n    \r\n    setNewVariable(e.target.value)\r\n  }\r\n\r\n  const handleGeography = (e) => {\r\n    setCurrentGeography(e.target.value)\r\n    if (!variableTree[newVariable][e.target.value].hasOwnProperty(currentDataset)) {\r\n      let datasetWithGeography = Object.keys(variableTree[newVariable][e.target.value])[0]\r\n      setCurrentDataset(datasetWithGeography)\r\n      dispatch(setCurrentData(datasetTree[e.target.value][datasetWithGeography]))\r\n    } else {\r\n      dispatch(setCurrentData(datasetTree[e.target.value][currentDataset]))\r\n    }\r\n\r\n  }\r\n\r\n  const handleDataset = (e) => {\r\n    setCurrentDataset(e.target.value)\r\n    dispatch(setCurrentData(datasetTree[currentGeography][e.target.value]))\r\n  }\r\n\r\n  \r\n  const handleRangeButton = (event) => {\r\n    let val = event.target.value;\r\n\r\n    if (val === 'custom') { // if swapping over to a custom range, which will use a 2-part slider to scrub the range\r\n        if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({nRange: 30, dRange: 30, rangeType: 'custom'}))\r\n        } else if (dataParams.nType === \"time-series\") {\r\n            dispatch(setVariableParams({nRange: 30, rangeType: 'custom'}))\r\n        } else if (dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({dRange: 30, rangeType: 'custom'}))\r\n        } \r\n    } else { // use the new value -- null for cumulative, 1 for daily, 7 for weekly\r\n        if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({nRange: val, dRange: val, rangeType: 'fixed'}))\r\n        } else if (dataParams.nType === \"time-series\") {\r\n            dispatch(setVariableParams({nRange: val, rangeType: 'fixed'}))\r\n        } else if (dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({dRange: val, rangeType: 'fixed'}))\r\n        }    \r\n    }\r\n  }\r\n\r\n  const handleSwitch = () => {\r\n    if (mapParams.binMode === 'dynamic') {\r\n        dispatch(setMapParams({binMode:''}))\r\n    } else {\r\n        dispatch(setMapParams({binMode:'dynamic'}))\r\n    }\r\n  }\r\n\r\n  const allGeographies = ['County', 'State']\r\n  const allDatasets = ['1point3acres', 'USA Facts', 'New York Times', 'CDC', 'County Health Rankings', 'Yu Group at Berkeley'] //\r\n\r\n  return (\r\n    <VariablePanelContainer className={panelState.variables ? '' : 'hidden'} otherPanels={panelState.info} id=\"variablePanel\">\r\n      <ControlsContainer>\r\n        <h2>Data Sources &amp;<br/> Map Variables</h2>\r\n        <StyledDropDown id=\"newVariableSelect\">\r\n          <InputLabel htmlFor=\"newVariableSelect\">Variable</InputLabel>\r\n          <Select\r\n            value={newVariable}\r\n            onChange={handleNewVariable}\r\n            >\r\n            {Object.keys(variableTree).map(variable => {\r\n              if (variable.split(':')[0]===\"HEADER\") {\r\n                return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n              } else {\r\n                return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n              }\r\n            })\r\n          }\r\n          </Select>\r\n        </StyledDropDown>\r\n        <br/>\r\n        <DateSelectorContainer disabled={dataParams.nType === \"characteristic\"}>\r\n          <StyledDropDown id=\"dateSelector\">\r\n              <InputLabel htmlFor=\"date-select\">Date Range</InputLabel>\r\n              <Select  \r\n                  id=\"date-select\"\r\n                  value={(dataParams.nRange === null || dataParams.rangeType === 'custom' || dataParams.variableName.indexOf('Testing') !== -1) ? 'x' : dataParams.nRange}\r\n                  onChange={handleRangeButton}\r\n                  displayEmpty\r\n                  inputProps={{ 'aria-label': 'Without label' }}\r\n              >\r\n                  <MenuItem value=\"x\" disabled style={{display:'none'}}>\r\n                      {dataParams.rangeType === 'custom' && <span>Custom Range</span>}\r\n                      {(dataParams.nRange === null && dataParams.variableName.indexOf('Testing') === -1) && <span>Cumulative</span>}\r\n                      {dataParams.variableName.indexOf('Testing') !== -1 && <span>7-Day Average</span>}\r\n                  </MenuItem>\r\n                  <MenuItem value={null} key={'cumulative'} disabled={dataParams.variableName.indexOf('Testing') !== -1}>Cumulative</MenuItem>\r\n                  <MenuItem value={1} key={'daily'} disabled={dataParams.variableName.indexOf('Testing') !== -1}>Daily New</MenuItem>\r\n                  <MenuItem value={7} key={'7-day-ave'} disabled={dataParams.variableName.indexOf('Testing') !== -1}>7-Day Average</MenuItem>\r\n                  <MenuItem value={'custom'} key={'customRange'} disabled={dataParams.variableName.indexOf('Testing') !== -1}>Custom Range</MenuItem>\r\n              </Select>\r\n          </StyledDropDown>\r\n          <BinsContainer id=\"binModeSwitch\" disabled={dataParams.variableName.indexOf('Testing') !== -1 || dataParams.nType === \"characteristic\"}>\r\n            <Switch\r\n                checked={mapParams.binMode === 'dynamic'}\r\n                onChange={handleSwitch}\r\n                name=\"bin chart switch\"\r\n            />\r\n            <p>{mapParams.binMode === 'dynamic' ? 'Dynamic' : 'Fixed Bins'}<Tooltip id=\"BinModes\"/></p>\r\n          </BinsContainer> \r\n        </DateSelectorContainer> \r\n        <br/>\r\n        \r\n        <StyledDropDown id=\"geographySelect\">\r\n          <InputLabel htmlFor=\"geographySelect\">Geography</InputLabel>\r\n          <Select\r\n            value={currentGeography}\r\n            onChange={handleGeography}\r\n            >\r\n            {allGeographies.map(geography => \r\n              <MenuItem \r\n              value={geography} \r\n              key={geography} \r\n              disabled={!variableTree[newVariable].hasOwnProperty(geography)}\r\n              >\r\n                {geography}\r\n              </MenuItem>\r\n            )}\r\n          </Select>\r\n        </StyledDropDown>\r\n        <StyledDropDown id=\"datasetSelect\">\r\n          <InputLabel htmlFor=\"datasetSelect\">Data Source</InputLabel>\r\n          <Select\r\n            value={currentDataset}\r\n            onChange={handleDataset}\r\n            >\r\n            {allDatasets.map(dataset => \r\n              <MenuItem \r\n              value={dataset}\r\n              key={dataset} \r\n              disabled={variableTree[newVariable][currentGeography] === undefined || !variableTree[newVariable][currentGeography].hasOwnProperty(dataset)}\r\n              >\r\n                {dataset}\r\n              </MenuItem>\r\n            )}\r\n          </Select>\r\n        </StyledDropDown>\r\n        <br/>\r\n        {/* <StyledDropDown id=\"dataSource\">\r\n          <InputLabel htmlFor=\"data-select\">Data Source</InputLabel>\r\n          <Select  \r\n            value={currentData}\r\n            onChange={handleDataSource}\r\n          >\r\n            \r\n          <ListSubheader disabled>county data</ListSubheader>\r\n            <MenuItem value={'county_1p3a.geojson'} key={'county_1p3a.geojson'}>1point3acres (County)</MenuItem>\r\n            <MenuItem value={'county_nyt.geojson'} key={'county_nyt.geojson'}>New York Times (County)</MenuItem>\r\n            <MenuItem value={'county_usfacts.geojson'} key={'county_usfacts.geojson'}>USA Facts (County)</MenuItem>\r\n            <MenuItem value={'cdc.geojson'} key={'cdc.geojson'}>CDC (County)</MenuItem>\r\n          <ListSubheader disabled>state data</ListSubheader>\r\n            <MenuItem value={'state_1p3a.geojson'} key={'state_1p3a.geojson'}>1point3acres (State)</MenuItem>\r\n            <MenuItem value={'state_nyt.geojson'} key={'state_nyt.geojson'}>New York Times (State)</MenuItem>\r\n          </Select>\r\n        </StyledDropDown>\r\n        <br />\r\n        <StyledDropDown id=\"variableSelect\">\r\n          <InputLabel htmlFor=\"numerator-select\">Select Variable</InputLabel>\r\n          <Select \r\n            value={currentVariable} \r\n            id=\"numerator-select\"\r\n            onChange={handleVariable}\r\n          >\r\n            {\r\n              !currentData.includes('cdc') && Object.keys(PresetVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            \r\n            {\r\n              currentData.includes('county') && Object.keys(CountyVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            \r\n            {\r\n              (currentData.includes(\"state\")) && Object.keys(StateVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            {\r\n              currentData.includes(\"1p3a\") && Object.keys(OneP3AVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            {\r\n              currentData.includes(\"cdc\") && Object.keys(CDCVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n          </Select>\r\n        </StyledDropDown> */}\r\n        <StyledDropDown component=\"Radio\" id=\"mapType\">\r\n          <FormLabel component=\"legend\">Map Type</FormLabel>\r\n          <RadioGroup \r\n            aria-label=\"maptype\" \r\n            name=\"maptype1\" \r\n            onChange={handleMapType} \r\n            value={mapParams.mapType}\r\n            className=\"radioContainer\"\r\n            >\r\n            <FormControlLabel \r\n              value=\"natural_breaks\" \r\n              key=\"natural_breaks\" \r\n              control={<Radio />} \r\n              label=\"Natural Breaks\"\r\n            /><Tooltip id=\"NaturalBreaks\"/>\r\n            <br/>\r\n            <FormControlLabel \r\n              value=\"hinge15_breaks\" \r\n              key=\"hinge15_breaks\" \r\n              control={<Radio />} \r\n              label=\"Box Map\" \r\n            /><Tooltip id=\"BoxMap\"/>\r\n            <br/>\r\n            <FormControlLabel \r\n              value=\"lisa\" \r\n              key=\"lisa\" \r\n              control={<Radio />} \r\n              label=\"Hotspot\" \r\n            /><Tooltip id=\"Hotspot\"/>\r\n            <br/>\r\n          </RadioGroup>\r\n        </StyledDropDown>\r\n        <p>Visualization Type</p>\r\n        <StyledButtonGroup color=\"primary\" aria-label=\"text button group\" id=\"visualizationType\">\r\n          <Button className={mapParams.vizType === '2D' ? 'active' : ''} data-val=\"2D\" key=\"2D-btn\" onClick={() => handleVizTypeButton('2D')}>2D</Button>\r\n          <Button className={mapParams.vizType === '3D' ? 'active' : ''} data-val=\"3D\" key=\"3D-btn\" onClick={() => handleVizTypeButton('3D')}>3D</Button>\r\n          <Button className={mapParams.vizType === 'cartogram' ? 'active' : ''} data-val=\"cartogram\" key=\"cartogram-btn\" onClick={() => handleVizTypeButton('cartogram')}>Cartogram</Button>\r\n        </StyledButtonGroup>\r\n        <br/>\r\n        <br />\r\n        {/* {\r\n          mapParams.vizType === '3D' && \r\n            <BinsContainer item xs={12} >\r\n                <Switch\r\n                    checked={bivariateZ}\r\n                    onChange={handleZSwitch}\r\n                    name=\"chart switch z chart switch\"\r\n                />\r\n                <p>{bivariateZ ? 'Bivariate Z-Axis' : 'Single Variable Z-Axis'}<Tooltip id=\"BinModes\"/></p>\r\n            </BinsContainer>\r\n        }\r\n        {\r\n          bivariateZ &&           \r\n            <StyledDropDown id=\"3d-variable-select\" style={{minWidth: '125px'}}>\r\n              <InputLabel htmlFor=\"3d-numerator-select\">Z-Axis Variable</InputLabel>\r\n              <Select \r\n                value={currentZVariable} \r\n                id=\"3d-numerator-select\"\r\n                onChange={handleZVariable}\r\n              >\r\n                {\r\n                  !currentData.includes('cdc') && Object.keys(PresetVariables).map((variable) => {\r\n                    if (variable.split(':')[0]===\"HEADER\") {\r\n                      return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                    } else {\r\n                      return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                    }\r\n                  })\r\n                }\r\n                \r\n                {\r\n                  currentData.includes('county') && Object.keys(CountyVariables).map((variable) => {\r\n                    if (variable.split(':')[0]===\"HEADER\") {\r\n                      return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                    } else {\r\n                      return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                    }\r\n                  })\r\n                }\r\n                \r\n                {\r\n                  (currentData.includes(\"state\")) && Object.keys(StateVariables).map((variable) => {\r\n                    if (variable.split(':')[0]===\"HEADER\") {\r\n                      return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                    } else {\r\n                      return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                    }\r\n                  })\r\n                }\r\n                {\r\n                  currentData.includes(\"1p3a\") && Object.keys(OneP3AVariables).map((variable) => {\r\n                    if (variable.split(':')[0]===\"HEADER\") {\r\n                      return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                    } else {\r\n                      return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                    }\r\n                  })\r\n                }\r\n                {\r\n                  currentData.includes(\"cdc\") && Object.keys(CDCVariables).map((variable) => {\r\n                    if (variable.split(':')[0]===\"HEADER\") {\r\n                      return <ListSubheader key={variable.split(':')[1]} disabled>{variable.split(':')[1]}</ListSubheader>\r\n                    } else {\r\n                      return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                    }\r\n                  })\r\n                }\r\n              </Select>\r\n            </StyledDropDown>\r\n        } */}\r\n        <br/>\r\n        <TwoUp id=\"overlaysResources\">\r\n          <StyledDropDown>\r\n            <InputLabel htmlFor=\"overlay-select\">Overlay</InputLabel>\r\n            <Select  \r\n              id=\"overlay-select\"\r\n              value={mapParams.overlay}\r\n              onChange={handleMapOverlay}\r\n            >\r\n              <MenuItem value=\"\" key={'None'}>None</MenuItem> \r\n              <MenuItem value={'native_american_reservations'} key={'native_american_reservations'}>Native American Reservations</MenuItem>\r\n              <MenuItem value={'segregated_cities'} key={'segregated_cities'}>Hypersegregated Cities<Tooltip id=\"Hypersegregated\"/></MenuItem>\r\n              <MenuItem value={'blackbelt'} key={'blackbelt'}>Black Belt Counties<Tooltip id=\"BlackBelt\" /></MenuItem>\r\n              <MenuItem value={'uscongress-districts'} key={'uscongress-districts'}>US Congressional Districts <Tooltip id=\"USCongress\" /></MenuItem>\r\n              {/* <MenuItem value={'mobility-county'} key={'mobility-county'}>Mobility Flows (County) WARNING BIG DATA</MenuItem> */}\r\n            </Select>\r\n          </StyledDropDown>\r\n          <StyledDropDown>\r\n            <InputLabel htmlFor=\"resource-select\">Resource</InputLabel>\r\n            <Select  \r\n              id=\"resource-select\"\r\n              value={mapParams.resource}\r\n              onChange={handleMapResource}\r\n            >\r\n              <MenuItem value=\"\" key='None'>None</MenuItem> \r\n              <MenuItem value={'clinics_hospitals'} key={'variable1'}>Clinics and Hospitals<Tooltip id=\"ClinicsAndHospitals\"/></MenuItem>\r\n              <MenuItem value={'clinics'} key={'variable2'}>Clinics<Tooltip id=\"Clinics\"/></MenuItem>\r\n              <MenuItem value={'hospitals'} key={'variable3'}>Hospitals<Tooltip id=\"Hospitals\"/></MenuItem>\r\n            </Select>\r\n          </StyledDropDown>\r\n        </TwoUp>        \r\n      </ControlsContainer>\r\n      <div className=\"noteContainer\">\r\n        <h3>Help us improve the Atlas!</h3>\r\n        <p>\r\n          <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSf0KdYeVyvwnz0RLnZijY3kdyFe1SwXukPc--a1HFPE1NRxyw/viewform?usp=sf_link\" target=\"_blank\" rel=\"noopener noreferrer\">Take the Atlas v2 survey here </a>\r\n          or share your thoughts at <a href=\"mailto:contact@theuscovidatlas.org\" target=\"_blank\" rel=\"noopener noreferrer\">contact@theuscovidatlas.org.</a>\r\n        </p>\r\n        <hr></hr>\r\n        <p className=\"note\">\r\n          Data is updated with freshest available data at 3pm CST daily, at minimum. \r\n          In case of data discrepancy, local health departments are considered most accurate as per CDC recommendations. \r\n          More information on <a href=\"data.html\">data</a>, <a href=\"methods.html\">methods</a>, \r\n          and <a href=\"FAQ.html\">FAQ</a> at main site.\r\n        </p>\r\n        <div className=\"poweredByGeoda\">\r\n            <a href=\"https://geodacenter.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <img src={`${process.env.PUBLIC_URL}/assets/img/geoda-logo.png`} alt=\"Geoda Logo\"/>\r\n              POWERED BY GEODA\r\n            </a>\r\n        </div> \r\n      </div>\r\n      <button onClick={handleOpenClose} id=\"showHideLeft\" className={panelState.variables ? 'active' : 'hidden'}>{settings}</button>\r\n\r\n    </VariablePanelContainer>\r\n  );\r\n}\r\n\r\nexport default VariablePanel;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\nimport Popper from '@material-ui/core/Popper';\r\n\r\nimport { tooltipInfo, colors } from '../config';\r\nimport { setAnchorEl } from '../actions';\r\n\r\nconst TooltipContentDiv = styled(Popper)`\r\n    z-index:10000;\r\n    max-width:200px;\r\n    background:none;\r\n    padding:0;\r\n    margin:0;\r\n    pointer-events: none;\r\n    div.tooltipContentContainer {\r\n        background:black;\r\n        padding:1px 10px;\r\n        margin:0;\r\n        borderRadius: 4px;\r\n        color:white;\r\n        // transform:translateX(65%);\r\n        box-shadow: 0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12);\r\n        pointer-events: all;\r\n        a {\r\n            color: ${colors.yellow};\r\n            text-decoration:none;\r\n        }\r\n    }\r\n`\r\n\r\nconst Popover = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const anchorEl = useSelector(state => state.anchorEl);\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popper' : undefined;\r\n    \r\n    const handleMouseOver = (event) => {\r\n        dispatch(setAnchorEl(anchorEl))\r\n    }\r\n\r\n    const handleMouseLeave = () => {\r\n        dispatch(setAnchorEl(null))\r\n    }\r\n    \r\n    return (\r\n        <TooltipContentDiv \r\n            id={id} \r\n            open={open} \r\n            anchorEl={anchorEl}\r\n            disablePortal={false}\r\n            modifiers={{\r\n                flip: {\r\n                enabled: true,\r\n                },\r\n                preventOverflow: {\r\n                enabled: true,\r\n                boundariesElement: 'window',\r\n                }\r\n            }}\r\n            onMouseEnter={handleMouseOver} \r\n            onMouseLeave={handleMouseLeave}\r\n            >\r\n            <div className=\"tooltipContentContainer\">\r\n                {anchorEl && tooltipInfo[anchorEl.id]}\r\n            </div>\r\n        </TooltipContentDiv>\r\n    )\r\n}\r\n\r\nexport default Popover","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../config';\r\n\r\nconst PreloaderContainer = styled.div`\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    z-index:500;\r\n    top:0;\r\n    left:0;\r\n    background:${colors.gray};\r\n    transition: 500ms opacity;\r\n    img {\r\n        width:100px;\r\n        height:86px;\r\n        position:fixed;\r\n        left:50%;\r\n        top:50%;\r\n        transform:translate(-50%, -50%);\r\n    }\r\n    @keyframes fade {\r\n        0% {fill-opacity:1};\r\n        50% {fill-opacity:0.25};\r\n        100% {fill-opacity:1};\r\n    }\r\n    &.fadeOut {\r\n        opacity:0;\r\n        pointer-events:none;\r\n    }\r\n`;\r\n\r\nconst Preloader = ( props ) => {\r\n    const [isHidden, setIsHidden] = useState(false);\r\n\r\n    if (props.loaded) {\r\n        setTimeout(() => {\r\n            setIsHidden(true)\r\n        }, 500)\r\n    }\r\n\r\n    return (\r\n        <PreloaderContainer className={props.loaded ? 'fadeOut' : ''} style={{display: (isHidden ? 'none' : 'initial')}} id=\"preloaderContainer\">\r\n            <img src={`${process.env.PUBLIC_URL}/assets/img/preloader.gif`} alt=\"Preloader\" />\r\n        </PreloaderContainer>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, { useState, useEffect } from 'react';\r\nimport {useSelector} from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nconst ResizeButton = styled.button`\r\n    position:absolute;\r\n    right:5px;\r\n    bottom:10px;\r\n    background:none;\r\n    outline:none;\r\n    border:none;\r\n    transform: rotate(90deg);\r\n    cursor:nw-resize;\r\n    display:${props => props.notScaleable ? 'none' : 'initial'};\r\n`\r\n\r\nconst Scaleable = (props) => {\r\n    \r\n    const [width, setWidth] = useState(props.defaultWidth);\r\n    const [height, setHeight] = useState(props.defaultHeight);\r\n    const [currXYPos, setCurrXYPos] = useState(false);\r\n\r\n    const listener = (e) => {\r\n        setWidth(prevWidth => prevWidth+e.movementX)\r\n        setHeight(prevHeight => prevHeight+e.movementY)\r\n    }\r\n\r\n    const touchListener = (e) => {\r\n        setWidth(prev => (e?.targetTouches[0]?.clientX-currXYPos[0]) || prev)\r\n        setHeight(prev => (e?.targetTouches[0]?.clientY-currXYPos[1]) || prev)\r\n    }\r\n\r\n    const removeListener = () => {\r\n        window.removeEventListener('mousemove', listener)\r\n        window.removeEventListener('mouseup', removeListener)\r\n    }\r\n\r\n    const removeTouchListener = () => {\r\n        window.removeEventListener('touchmove', touchListener);\r\n        window.removeEventListener('touchend', removeTouchListener);\r\n    }\r\n    \r\n    const handleDown = () => {\r\n        window.addEventListener('mousemove', listener)\r\n        window.addEventListener('mouseup', removeListener)\r\n    }\r\n\r\n    const handleTouch = (e) => {\r\n        setCurrXYPos([+e.target.parentNode.parentNode.parentNode.style.left.slice(0,-2), +e.target.parentNode.parentNode.parentNode.style.top.slice(0,-2)])\r\n        window.addEventListener('touchmove', touchListener)\r\n        window.addEventListener('touchend', removeTouchListener)\r\n    }\r\n    \r\n    const open = useSelector(state => state.panelState[props.title]);\r\n\r\n    useEffect(() => {\r\n        setWidth(props.defaultWidth)\r\n        setHeight(props.defaultHeight)\r\n    }, [open, props.defaultHeight, props.defaultWidth])\r\n\r\n    return (\r\n        <div style={{width: width, height: height, minHeight: props.minHeight, minWidth: props.minWidth}}>\r\n            {props.content}\r\n            <ResizeButton \r\n                id=\"resize\"\r\n                notScaleable={props.notScaleable}\r\n                onMouseDown={handleDown}\r\n                onTouchStart={handleTouch}\r\n                style={{zIndex:10}}\r\n            >\r\n                <svg height='20px' width='20px'  fill=\"white\" viewBox=\"0 0 8.4666667 8.4666667\" x=\"0px\" y=\"0px\"><g transform=\"translate(0,-288.53333)\"><path d=\"m 5.5562495,289.59166 v 0.52916 h 0.94878 l -1.665015,1.66502 0.3741367,0.37414 1.665015,-1.66502 v 0.94878 h 0.5291667 v -1.85208 z m -2.303735,3.78168 -1.665015,1.66501 v -0.94878 H 1.0583328 v 1.85209 h 1.8520834 v -0.52917 h -0.94878 l 1.665015,-1.66501 z\"></path></g></svg>\r\n            </ResizeButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scaleable;","// this components houses the slider, legend, and bottom dock chart\r\nimport React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { DateSlider, Dock } from '../components';\r\nimport { colors } from '../config';\r\n\r\n// Styled components\r\nconst TopDrawer = styled.div`\r\n    position: fixed;\r\n    top:50px;\r\n    left:calc(50vw - 225px);\r\n    background:${colors.gray};\r\n    width:90vw;\r\n    max-width: 450px;\r\n    box-sizing: border-box;\r\n    padding:0;\r\n    margin:0;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0 0 0.5vh 0.5vh ;\r\n    transition:250ms all;\r\n    hr {\r\n        opacity:0.5;\r\n    }\r\n    div.MuiGrid-item {\r\n        padding:0;\r\n    }\r\n    \r\n    @media (max-width:768px){\r\n        width:100%;\r\n        max-width:100%;\r\n        left:0;\r\n        transform:none;\r\n    }\r\n    @media (max-width:750px) and (orientation: landscape) {\r\n        // bottom all the way down for landscape phone\r\n    }\r\n`\r\nconst TopPanel = () => {\r\n    \r\n    return (\r\n        <TopDrawer id=\"timelinePanel\">\r\n            <DateSlider />\r\n            <Dock />\r\n        </TopDrawer>\r\n    )\r\n\r\n}\r\n\r\nexport default TopPanel","import React, { useEffect, useState, useMemo, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as jsgeoda from 'jsgeoda';\r\n\r\n// Helper and Utility functions //\r\n// first row: data loading\r\n// second row: data parsing for specific outputs\r\n// third row: data accessing\r\nimport { \r\n  getParseCSV, mergeData, getColumns, loadJson,\r\n  getDataForBins, getDataForCharts, getDataForLisa, getDateLists,\r\n  getLisaValues, getVarId, getCartogramValues, getDateIndices, parseBinPairs } from './utils';\r\n\r\n// Actions -- Redux state manipulation following Flux architecture //\r\n// first row: data storage\r\n// second row: data and metadata handling \r\n// third row: map and variable parameters\r\nimport { \r\n  dataLoad, dataLoadExisting, storeLisaValues, storeCartogramData, setDates, setNotification,\r\n  setMapParams, setUrlParams, setPanelState } from './actions';\r\n\r\nimport { Map, NavBar, VariablePanel, BottomPanel,  TopPanel, Preloader,\r\n  DataPanel, MainLineChart, Scaleable, Draggable, InfoBox,\r\n  NotificationBox, Popover } from './components';  \r\n\r\nimport { colorScales, fixedScales, dataPresets, variablePresets, colors } from './config';\r\n\r\n// Main function, App. This function does 2 things:\r\n// 1: App manages the majority of the side effects when the state changes.\r\n//    This takes the form of React's UseEffect hook, which listens\r\n//    for changes in the state and then performs the functions in the hook.\r\n//    App listens for different state changes and then calculates the relevant\r\n//    side effects (such as binning calculations and GeoDa functions, column parsing)\r\n//    and then dispatches new data to the store.\r\n// 2: App assembles all of the components together and sends Props down\r\n//    (as of 12/1 only Preloader uses props and is a higher order component)\r\n\r\n\r\nfunction App() {\r\n\r\n  const dateLists = useMemo(() => getDateLists())\r\n  // static variables for floating panel sizing\r\n  let [ \r\n    defaultX, \r\n    defaultXLong, \r\n    defaultY, \r\n    defaultWidth, \r\n    defaultWidthLong, \r\n    defaultHeight,\r\n    defaultHeightManual,\r\n    defaultWidthManual,\r\n    defaultXManual,\r\n    defaultYManual,\r\n    minHeight, \r\n    minWidth\r\n  ] = window.innerWidth <= 1024 ? \r\n    [\r\n      window.innerWidth*.1, // defaultX\r\n      window.innerWidth*.1, // defaultXLong\r\n      window.innerHeight*.25, // defaultY\r\n      window.innerWidth*.8, // defaultWidth\r\n      window.innerWidth*.8,  // defaultWidthLong\r\n      window.innerHeight*.4, // height\r\n      window.innerHeight*.7, // heightManual\r\n      window.innerWidth*.5,  // width manual\r\n      window.innerWidth*.25, // x manual\r\n      window.innerHeight*.15, // y manual\r\n      window.innerHeight*.5, // min height\r\n      window.innerWidth*.5 // min width\r\n    ] : \r\n    [\r\n      window.innerWidth-400, \r\n      window.innerWidth-575, \r\n      75, \r\n      300, \r\n      450, \r\n      300, \r\n      window.innerHeight*.5, \r\n      window.innerWidth*.35, \r\n      window.innerWidth*.25, // x manual\r\n      window.innerHeight*.325, // y manual\r\n      200, \r\n      200\r\n  ]\r\n\r\n\r\n  // These selectors access different pieces of the store. While App mainly\r\n  // dispatches to the store, we need checks to make sure side effects\r\n  // are OK to trigger. Issues arise with missing data, columns, etc.\r\n  const {storedData, storedGeojson, storedLisaData, storedCartogramData,\r\n    currentData, mapParams, dataParams, dateIndices, mapLoaded } = useSelector(state => state);\r\n  \r\n  // gda_proxy is the WebGeoda proxy class. Generally, having a non-serializable\r\n  // data in the state is poor for performance, but the App component state only\r\n  // contains gda_proxy.\r\n  const [gda_proxy, set_gda_proxy] = useState(null);\r\n  const dispatch = useDispatch();  \r\n  \r\n  // // Dispatch helper functions for side effects and data handling\r\n  // Get centroid data for cartogram\r\n  // const getCentroids = (geojson, gda_proxy) =>  dispatch(setCentroids(gda_proxy.GetCentroids(geojson), geojson))\r\n  \r\n  // Main data loader\r\n  // This functions asynchronously accesses the Geojson data and CSVs\r\n  //   then performs a join and loads the data into the store\r\n  const loadData = async (params, gda_proxy) => {\r\n    // destructure parameters\r\n    const { geojson, csvs, joinCols, tableNames, accumulate, dateList } = params\r\n    // promise all data fetching - CSV and Json\r\n    const csvPromises = csvs.map(csv => \r\n      getParseCSV(\r\n        `${process.env.PUBLIC_URL}/csv/${csv}.csv`, \r\n        joinCols[1], \r\n        accumulate.includes(csv),\r\n        dateLists[dateList[csv]]\r\n      ).then(result => {return result}))\r\n\r\n    Promise.all([\r\n      loadJson(`${process.env.PUBLIC_URL}/geojson/${geojson}`, gda_proxy).then(result => {return result}),\r\n      ...csvPromises\r\n    ]).then(values => {\r\n      // store geojson lookup table\r\n      // merge data and get results\r\n      let tempData = mergeData(values[0]['data'], joinCols[0], values.slice(1,), tableNames, joinCols[1]);\r\n      let ColNames = getColumns(values.slice(1,), tableNames);\r\n      let DateIndices = getDateIndices(values.slice(1,), tableNames);\r\n      let denomIndices = DateIndices[dataParams.numerator]\r\n      let lastIndex = denomIndices !== null ? denomIndices.slice(-1,)[0] : null;\r\n      let chartData = getDataForCharts(tempData, 'cases', DateIndices['cases'], dateLists.isoDateList);\r\n      let binData = getDataForBins(tempData, {...dataParams, nIndex: lastIndex || dataParams.nIndex, binIndex: lastIndex || dataParams.binIndex});\r\n      let bins;\r\n\r\n      if (dataParams.fixedScale === null || dataParams.fixedScale === undefined){\r\n        // calculate breaks\r\n        let nb = gda_proxy.custom_breaks(\r\n          geojson, \r\n          mapParams.mapType,\r\n          mapParams.nBins,\r\n          null,\r\n          binData\r\n        );        \r\n\r\n        bins = {\r\n          bins: mapParams.mapType === \"natural_breaks\" ? nb.bins : ['Lower Outlier','< 25%','25-50%','50-75%','>75%','Upper Outlier'],\r\n          breaks: [-Math.pow(10, 12), ...nb.breaks.slice(1,-1), Math.pow(10, 12)]\r\n        }\r\n      } else {\r\n        bins = fixedScales[dataParams.fixedScale]\r\n      }\r\n\r\n      // store data, data name, and column names\r\n      dispatch(\r\n        dataLoad({\r\n          storeData: {\r\n            data: tempData, \r\n            name: geojson\r\n          },\r\n          currentData: geojson,\r\n          columnNames: {\r\n            data: ColNames,\r\n            name: geojson\r\n          },\r\n          dateIndices: {\r\n            data: DateIndices,\r\n            name: geojson\r\n          },\r\n          storeGeojson: {\r\n            data: values[0]['geoidIndex'],\r\n            name: geojson\r\n          },\r\n          chartData: chartData,\r\n          mapParams: {\r\n            bins,\r\n            colorScale: colorScales[dataParams.colorScale || mapParams.mapType]\r\n          },\r\n          variableParams: {\r\n            nIndex: lastIndex || dataParams.nIndex,\r\n            binIndex: lastIndex || dataParams.binIndex\r\n          },\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  const updateBins = useCallback((params) => {\r\n    const { storedData, currentData, dataParams, mapParams, gda_proxy, colorScales } = params;\r\n    if (\r\n      !storedData.hasOwnProperty(currentData) || \r\n      !storedData[currentData][0].hasOwnProperty(dataParams.numerator)\r\n    ) { return };\r\n\r\n    if (gda_proxy !== null && storedData.hasOwnProperty(currentData) && mapParams.mapType !== \"lisa\"){\r\n      if (dataParams.fixedScale === null || mapParams.mapType !== 'natural_breaks') {\r\n        let binData = getDataForBins( storedData[currentData], dataParams )\r\n        let nb = gda_proxy.custom_breaks(\r\n          currentData, \r\n          mapParams.mapType, \r\n          mapParams.nBins, \r\n          null, \r\n          binData\r\n        )\r\n\r\n        dispatch(\r\n          setMapParams({\r\n            bins: {\r\n              bins: mapParams.mapType === 'natural_breaks' ? nb.bins : ['Lower Outlier','< 25%','25-50%','50-75%','>75%','Upper Outlier'],\r\n              breaks: [-Math.pow(10, 12), ...nb.breaks.slice(1,-1), Math.pow(10, 12)]\r\n            },\r\n            colorScale: mapParams.mapType === 'natural_breaks' ? colorScales[dataParams.colorScale || mapParams.mapType] : colorScales[mapParams.mapType || dataParams.colorScale]\r\n          })\r\n        )\r\n      } else {\r\n        dispatch(\r\n          setMapParams({\r\n            bins: fixedScales[dataParams.fixedScale],\r\n            colorScale: colorScales[dataParams.fixedScale]\r\n          })\r\n        )\r\n      }\r\n    }\r\n  });\r\n\r\n  // After runtime is initialized, this loads in gda_proxy to the state\r\n  // TODO: Recompile WebGeoda and load it into a worker\r\n  useEffect(() => {\r\n    \r\n    let paramsDict = {}; \r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    for (const [key, value] of urlParams ) { paramsDict[key] = value; }\r\n\r\n    if (!paramsDict.hasOwnProperty('v')) {\r\n      // do nothing, most of the time\r\n    } else if (paramsDict['v'] === '2') {\r\n      dispatch(\r\n        setUrlParams(paramsDict, variablePresets)\r\n      );\r\n    } else if (paramsDict['v'] === '1') {\r\n      dispatch(setNotification(`\r\n          <h2>Welcome to the Atlas v2!</h2>\r\n          <p>\r\n          The share link you have entered is for an earlier release of the US Covid Atlas. \r\n          Explore the new version here, or continue using your current share link by click below.\r\n          <a href=\"./vintage/map.html${window.location.search}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color:${colors.yellow}; text-align:center;\">\r\n            <h3 style=\"text-align:center\">\r\n              US Covid Atlas v1\r\n            </h3>  \r\n          </a>\r\n          </p>\r\n        `))\r\n    }\r\n\r\n    if (window.innerWidth <= 1024) {\r\n      dispatch(setPanelState({\r\n        variables:false,\r\n        info:false,\r\n        tutorial:false,\r\n        lineChart: false\r\n      }))\r\n    }\r\n\r\n    const newGeoda = async () => {\r\n      let geoda = await jsgeoda.New();\r\n      set_gda_proxy(geoda);\r\n    }\r\n\r\n    newGeoda()\r\n    dispatch(setDates(dateLists.isoDateList))\r\n  },[])\r\n\r\n\r\n  // On initial load and after gda_proxy has been initialized, this loads in the default data sets (USA Facts)\r\n  // Otherwise, this side-effect loads the selected data.\r\n  // Each conditions checks to make sure gda_proxy is working.\r\n  useEffect(() => {\r\n    if (gda_proxy === null) {\r\n      return;\r\n    } else if (storedData === {}) {\r\n      loadData(\r\n        dataPresets[currentData],\r\n        gda_proxy\r\n      )\r\n    } else if (storedData[currentData] === undefined) {\r\n      loadData(\r\n        dataPresets[currentData],\r\n        gda_proxy\r\n      )\r\n    } else if (dateIndices[currentData] !== undefined) {\r\n      \r\n      let denomIndices = dateIndices[currentData][dataParams.numerator]\r\n      let lastIndex = denomIndices !== null ? denomIndices.slice(-1,)[0] : null;\r\n      dispatch(\r\n        dataLoadExisting({\r\n          variableParams: {\r\n            nIndex: lastIndex || dataParams.nIndex,\r\n            dIndex: dataParams.dType === 'time-series' ? lastIndex : dataParams.dType,\r\n            dRange: dataParams.dType === 'time-series' ? dataParams.nRange : dataParams.dRange,\r\n            binIndex: lastIndex || dataParams.nIndex,\r\n          },\r\n          chartData: getDataForCharts(storedData[currentData],'cases', dateIndices[currentData]['cases'], dateLists.isoDateList)\r\n        })\r\n      )\r\n      updateBins( { storedData, currentData, mapParams, gda_proxy, colorScales,\r\n        dataParams: { \r\n          ...dataParams,  \r\n          nIndex: lastIndex || dataParams.nIndex,\r\n          binIndex: lastIndex || dataParams.nIndex,\r\n        }, \r\n      })\r\n      \r\n      // updateBins();\r\n    }\r\n  },[gda_proxy, currentData])\r\n\r\n  // This listens for gda_proxy events for LISA and Cartogram calculations\r\n  // Both of these are computationally heavy.\r\n  useEffect(() => {\r\n    if (gda_proxy !== null && mapParams.mapType === \"lisa\"){\r\n      let tempId = getVarId(currentData, dataParams)\r\n      if (!(storedLisaData.hasOwnProperty(tempId))) {\r\n        dispatch(\r\n          storeLisaValues(\r\n            getLisaValues(\r\n              gda_proxy, \r\n              currentData, \r\n              getDataForLisa(\r\n                storedData[currentData], \r\n                dataParams,\r\n                storedGeojson[currentData].indexOrder\r\n              )\r\n            ),\r\n            tempId\r\n          )\r\n        )\r\n      }\r\n    }\r\n    if (gda_proxy !== null && mapParams.vizType === 'cartogram'){\r\n      let tempId = getVarId(currentData, dataParams)\r\n      if (!(storedCartogramData.hasOwnProperty(tempId))) {\r\n        dispatch(\r\n          storeCartogramData(\r\n            getCartogramValues(\r\n              gda_proxy, \r\n              currentData, \r\n              getDataForLisa( storedData[currentData], dataParams, storedGeojson[currentData].indexOrder )\r\n            ),\r\n            tempId\r\n          )\r\n        )\r\n      }\r\n    }\r\n  }, [dataParams.numerator, dataParams.nProperty, dataParams.nRange, dataParams.denominator, dataParams.dProperty, dataParams.nIndex, dataParams.dIndex, mapParams.binMode, dataParams.variableName, mapParams.mapType])\r\n\r\n  // Trigger on parameter change for metric values\r\n  // Gets bins and sets map parameters\r\n  useEffect(() => {\r\n    if (storedData.hasOwnProperty(currentData) && gda_proxy !== null && mapParams.binMode !== 'dynamic' && mapParams.mapType !== 'lisa') {\r\n      updateBins( { storedData, currentData, dataParams, mapParams, gda_proxy, colorScales } );\r\n    }\r\n  }, [dataParams.numerator, dataParams.nProperty, dataParams.nRange, dataParams.denominator, dataParams.dProperty, dataParams.dRange, mapParams.mapType] );\r\n\r\n  // Trigger on index change while dynamic bin mode\r\n  useEffect(() => {\r\n    if (storedData.hasOwnProperty(currentData) && gda_proxy !== null && mapParams.binMode === 'dynamic' && mapParams.mapType !== 'lisa') {\r\n      updateBins( { storedData, currentData, dataParams: { ...dataParams, binIndex: dataParams.nIndex }, mapParams, gda_proxy, colorScales } );\r\n    }\r\n  }, [dataParams.nIndex, dataParams.dIndex, mapParams.binMode, dataParams.variableName, dataParams.nRange, mapParams.mapType] ); \r\n\r\n  // default width handlers on resize\r\n  useEffect(() => {\r\n  // static variables for floating panel sizing\r\n  [ \r\n    defaultX, \r\n    defaultXLong, \r\n    defaultY, \r\n    defaultWidth, \r\n    defaultWidthLong, \r\n    defaultHeight,\r\n    defaultHeightManual,\r\n    defaultWidthManual,\r\n    defaultXManual,\r\n    defaultYManual,\r\n    minHeight, \r\n    minWidth\r\n  ] = window.innerWidth <= 1024 ? \r\n    [\r\n      window.innerWidth*.1, // defaultX\r\n      window.innerWidth*.1, // defaultXLong\r\n      window.innerHeight*.25, // defaultY\r\n      window.innerWidth*.8, // defaultWidth\r\n      window.innerWidth*.8,  // defaultWidthLong\r\n      window.innerHeight*.4, // height\r\n      window.innerHeight*.7, // heightManual\r\n      window.innerWidth*.5,  // width manual\r\n      window.innerWidth*.25, // x manual\r\n      window.innerHeight*.15, // y manual\r\n      window.innerHeight*.5, // min height\r\n      window.innerWidth*.5 // min width\r\n    ] : \r\n    [\r\n      window.innerWidth-400, \r\n      window.innerWidth-575, \r\n      75, \r\n      300, \r\n      450, \r\n      300, \r\n      window.innerHeight*.5, \r\n      window.innerWidth*.35, \r\n      window.innerWidth*.25, // x manual\r\n      window.innerHeight*.325, // y manual\r\n      200, \r\n      200\r\n  ]\r\n  }, [window.innerHeight, window.innerWidth])\r\n  // const dragHandlers = {onStart: this.onStart, onStop: this.onStop};\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Preloader loaded={mapLoaded} />\r\n      <NavBar />\r\n      <header className=\"App-header\" style={{position:'fixed', left: '20vw', top:'100px', zIndex:10}}>\r\n        {/* <button onClick={() => console.log(getDataForBins( storedData[currentData], {...dataParams, nIndex: null} ))}>data for bins</button> */}\r\n        {/* <button onClick={() => console.log(dataParams)}>data params</button>\r\n        <button onClick={() => console.log(mapParams)}>map params</button> */}\r\n      </header>\r\n      <div id=\"mainContainer\">\r\n        <Map />\r\n        <TopPanel />\r\n        <BottomPanel />\r\n        <VariablePanel />\r\n        <DataPanel />\r\n        <Popover /> \r\n        <NotificationBox />  \r\n        <Draggable \r\n          z={9}\r\n          defaultX={defaultXLong}\r\n          defaultY={defaultY}\r\n          title=\"lineChart\"\r\n          content={\r\n          <Scaleable \r\n            content={\r\n              <MainLineChart />\r\n            } \r\n            title=\"lineChart\"\r\n            defaultWidth={defaultWidthLong}\r\n            defaultHeight={defaultHeight}\r\n            minHeight={minHeight}\r\n            minWidth={minWidth} />\r\n        }/>      \r\n        <Draggable \r\n          z={10}\r\n          defaultX={defaultXManual}\r\n          defaultY={defaultYManual}\r\n          title=\"tutorial\"\r\n          content={\r\n          <Scaleable \r\n            content={\r\n              <InfoBox />\r\n            } \r\n            title=\"tutorial\"\r\n            defaultWidth={defaultWidthManual}\r\n            defaultHeight={defaultHeightManual}\r\n            minHeight={minHeight}\r\n            minWidth={minWidth} />\r\n        }/>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","export const getDateLists = () => {\r\n    const stripLeadingZero = ( str ) => str[0] !== '0' ? str : str.slice(1,)\r\n    const isoToUsDate = (date) => stripLeadingZero(date.slice(5,7)) + '/'+ stripLeadingZero(date.slice(8,10)) + '/' + date.slice(2,4)\r\n\r\n    Date.prototype.addDays = function(days) {\r\n        var date = new Date(this.valueOf());\r\n        date.setDate(date.getDate() + days);\r\n        return date;\r\n    }\r\n\r\n    let todayDate = new Date()\r\n    let initialDate = new Date('01/21/2020')\r\n    let dateList = []\r\n    let isoDateList = []\r\n    let usDateList = []\r\n\r\n    while (initialDate < todayDate) {\r\n        dateList.push(initialDate)\r\n        let isoDate = initialDate.toISOString().slice(0,10);\r\n        isoDateList.push(isoDate)\r\n        usDateList.push(isoToUsDate(isoDate))\r\n        initialDate = initialDate.addDays(1)\r\n    }\r\n\r\n    return { isoDateList, usDateList }\r\n}","export const INITIAL_STATE = {\r\n  geodaProxy: null,\r\n  storedData: {},\r\n  storedGeojson: {},\r\n  storedLisaData: {},\r\n  storedCartogramData: {},\r\n  storedCSV: {},\r\n  storedMobilityData: {},\r\n  cols: {},\r\n  dateIndices: {},\r\n  currentData: 'county_1p3a.geojson',\r\n  chartData: [{}],\r\n  selectionKeys: [],\r\n  selectionIndex: [],\r\n  centroids: {},\r\n  dates: {},\r\n  currDate: '',\r\n  currDateIndex: '',\r\n  startDateIndex: '',\r\n  currentZVariable: null,\r\n  currentMethod: 'natural_breaks',\r\n  currentOverlay: '',\r\n  currentResource: '',\r\n  dataParams: {\r\n    variableName: 'Confirmed Count per 100K Population',\r\n    numerator: 'cases',\r\n    nType: 'time-series',\r\n    nProperty: null,\r\n    nRange: 7,\r\n    nIndex:null,\r\n    denominator: 'properties',\r\n    dType: 'characteristic',\r\n    dProperty: 'population',\r\n    dRange:null,\r\n    dIndex:null,\r\n    scale:100000,\r\n    binIndex: '',\r\n    scale3D: 1000,\r\n    zAxisParams: null,\r\n    fixedScale: null,\r\n    colorScale: null,\r\n    storedRange: null\r\n  },\r\n  mapParams: {\r\n    mapType: 'natural_breaks',\r\n    bins: {\r\n      bins: [],\r\n      breaks: []\r\n    },\r\n    binMode: '',\r\n    fixedScale: null,\r\n    nBins: 8,\r\n    vizType: '2D',\r\n    activeGeoid: '',\r\n    overlay: '',\r\n    resource: '',\r\n    colorScale: [\r\n      [240,240,240],\r\n      [255,255,204],\r\n      [255,237,160],\r\n      [254,217,118],\r\n      [254,178,76],\r\n      [253,141,60],\r\n      [252,78,42],\r\n      [227,26,28],\r\n      [177,0,38],\r\n    ],\r\n  },\r\n  panelState: {\r\n    variables:true,\r\n    info:false,\r\n    tutorial:false,\r\n    lineChart:true,\r\n  },\r\n  storedRange: null,\r\n  currentGeoid: '',\r\n  sidebarData: {},\r\n  anchorEl: null,\r\n  mapLoaded: false,\r\n  notification: null,\r\n  urlParams: {}\r\n};","import { INITIAL_STATE } from '../constants/defaults';\r\n\r\nvar reducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case 'DATA_LOAD':\r\n            // main new data loading reducer\r\n            // I: Destructure payload (load) object\r\n            let { storeData, currentData, columnNames, dateIndices,\r\n                storeGeojson, chartData, mapParams, \r\n                variableParams} = action.payload.load;\r\n\r\n            // II: Create copies of existing state objects.\r\n            // This is necessary to avoid mutating the state\r\n            let [\r\n                    dataObj, colDataObj, dateIndexObj, geoDataObj, \r\n                    mapParamsDataObj, variableParamsDataObj, panelsDataObj\r\n                ] = [\r\n                    {\r\n                    ...state.storedData\r\n                }, {\r\n                    ...state.cols\r\n                }, {\r\n                    ...state.dateIndices\r\n                }, {\r\n                    ...state.storedGeojson,\r\n                }, {\r\n                    ...state.mapParams,\r\n                    ...mapParams\r\n                }, {\r\n                    ...state.dataParams,\r\n                    ...variableParams\r\n                }, {\r\n                    ...state.panelState,\r\n                    info: false\r\n                }];\r\n\r\n                dataObj[storeData.name] = storeData.data;\r\n                colDataObj[columnNames.name] = columnNames.data;\r\n                dateIndexObj[dateIndices.name] = dateIndices.data;\r\n                geoDataObj[storeGeojson.name] = storeGeojson.data;\r\n            return {\r\n                ...state,\r\n                storedData: dataObj,\r\n                cols: colDataObj,\r\n                dateIndices: dateIndexObj,\r\n                storedGeojson: geoDataObj,\r\n                mapParams: mapParamsDataObj,\r\n                dataParams: variableParamsDataObj,\r\n                currentData,\r\n                selectionKeys: [],\r\n                selectionIndex: [],\r\n                chartData,\r\n                sidebarData: {},\r\n                panelState: panelsDataObj\r\n\r\n            };\r\n        case 'DATA_LOAD_EXISTING':\r\n            \r\n            let [ variableParamsExDataObj, panelsExDataObj ] \r\n                = [\r\n                    {\r\n                    ...state.dataParams,\r\n                    ...action.payload.load.variableParams\r\n                }, {\r\n                    ...state.panelState,\r\n                    info: false\r\n                }];\r\n\r\n            return {\r\n                ...state,\r\n                dataParams: variableParamsExDataObj,\r\n                chartData: action.payload.load.chartData,\r\n                sidebarData: {},\r\n                selectionKeys: [],\r\n                selectionIndex: [],\r\n                panelState: panelsExDataObj\r\n\r\n            };\r\n        case 'SET_NEW_BINS':\r\n            let [ binsVariableParams, binsMapParams] \r\n                = [{\r\n                    ...state.dataParams,\r\n                    ...action.payload.load.variableParams\r\n                },{\r\n                    ...state.mapParams,\r\n                    ...action.payload.load.mapParams\r\n                }]\r\n            return {\r\n                ...state,\r\n                dataParams: binsVariableParams,\r\n                mapParams: binsMapParams\r\n            }\r\n        case 'SET_GEOID': \r\n            return {\r\n                ...state,\r\n                currentGeoid: action.payload.geoid\r\n            };\r\n        case 'SET_STORED_DATA':\r\n            let obj = {\r\n                ...state.storedData,\r\n            }\r\n            obj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedData: obj\r\n            };\r\n        case 'SET_STORED_GEOJSON':\r\n            let geojsonObj = {\r\n                ...state.storedGeojson,\r\n            }\r\n            geojsonObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedGeojson: geojsonObj\r\n            };\r\n        case 'SET_STORED_LISA_DATA':\r\n            let lisaObj = {\r\n                ...state.storedLisaData,\r\n            }\r\n            lisaObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedLisaData: lisaObj\r\n            };\r\n        case 'SET_STORED_CARTOGRAM_DATA':\r\n            let cartoObj = {\r\n                ...state.storedCartogramData,\r\n            }\r\n            cartoObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedCartogramData: cartoObj\r\n            };\r\n        case 'SET_STORED_MOBILITY_DATA':\r\n            return {\r\n                ...state,\r\n                storedMobilityData: action.payload.data\r\n            }\r\n        case 'SET_CENTROIDS':\r\n            let centroidsObj = {\r\n                ...state.centroids,\r\n            }\r\n            centroidsObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                centroids: centroidsObj\r\n            };\r\n        case 'SET_CURRENT_DATA':\r\n            return {\r\n                ...state,\r\n                currentData: action.payload.data\r\n            }\r\n        case 'SET_GEODA_PROXY':\r\n            return {\r\n                ...state,\r\n                geodaProxy: action.payload.proxy\r\n            }\r\n        case 'SET_DATES':\r\n            return {\r\n                ...state,\r\n                dates: action.payload.data\r\n            }\r\n        case 'SET_DATA_FUNCTION':\r\n            return {\r\n                ...state,\r\n                currentDataFn: action.payload.fn\r\n            }\r\n        case 'SET_COLUMN_NAMES':\r\n            let colObj = {\r\n                ...state.cols\r\n            }\r\n            colObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                cols: colObj\r\n            }\r\n        case 'SET_CURR_DATE':\r\n            return {\r\n                ...state,\r\n                currDate: action.payload.date\r\n            }\r\n        case 'SET_DATE_INDEX':\r\n            return {\r\n                ...state,\r\n                currDateIndex: action.payload.index\r\n            }\r\n        case 'SET_START_DATE_INDEX':\r\n            return {\r\n                ...state,\r\n                startDateIndex: action.payload.index\r\n            }\r\n        case 'SET_BINS':\r\n            let binsObj = {};\r\n            binsObj['bins'] =  action.payload.bins;\r\n            binsObj['breaks'] =  action.payload.breaks;\r\n            return {\r\n                ...state,\r\n                bins: binsObj\r\n            }\r\n        case 'SET_3D':\r\n            return {\r\n                ...state,\r\n                use3D: !state.use3D\r\n            }\r\n        case 'SET_DATA_SIDEBAR':\r\n            return {\r\n                ...state,\r\n                sidebarData: action.payload.data\r\n            }\r\n        case 'INCREMENT_DATE':\r\n            let dateObj = {\r\n                ...state.dataParams\r\n            }\r\n            let currIndices = state.dateIndices[state.currentData][state.dataParams.numerator]\r\n            let nextIndex = currIndices[currIndices.indexOf(state.dataParams.nIndex)+action.payload.index]\r\n\r\n            if (nextIndex === undefined) {\r\n                dateObj.nIndex = currIndices[0]\r\n                dateObj.dIndex = currIndices[0]\r\n                return {\r\n                    ...state,\r\n                    dataParams:dateObj\r\n                }\r\n            } else {\r\n                dateObj.nIndex = nextIndex;\r\n                dateObj.dIndex = nextIndex;\r\n                return {\r\n                    ...state,\r\n                    dataParams:dateObj\r\n                }\r\n            }\r\n        case 'SET_VARIABLE_PARAMS':\r\n            let paramObj = {\r\n                ...state.dataParams,\r\n                ...action.payload.params\r\n            }\r\n\r\n            if (state.dataParams.zAxisParams !== null) {\r\n                paramObj.zAxisParams.nIndex = paramObj.nIndex;\r\n                paramObj.zAxisParams.dIndex = paramObj.dIndex;\r\n            }\r\n\r\n            if (paramObj.nType === 'time-series' && paramObj.nIndex === null) {\r\n                paramObj.nIndex = state.storedIndex;\r\n                paramObj.nRange = state.storedRange;\r\n            }\r\n            if (paramObj.dType === 'time-series' && paramObj.dIndex === null) {\r\n                paramObj.dIndex = state.storedIndex;\r\n                paramObj.dRange = state.storedRange;\r\n            }\r\n            if (paramObj.nType === 'characteristic' && state.dataParams.nType === 'time-series') {\r\n                return {\r\n                    ...state,\r\n                    storedIndex: state.dataParams.nIndex,\r\n                    storedRange: state.dataParams.nRange,\r\n                    dataParams: paramObj,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    dataParams: paramObj \r\n                }\r\n            }\r\n        case 'SET_VARIABLE_PARAMS_AND_DATASET':\r\n            const { params, dataset, dataMapParams } = action.payload.params;\r\n\r\n            let dataAndParamsObj = {\r\n                ...state.dataParams,\r\n                ...params\r\n            };\r\n\r\n            let dataAndMapParamsObj = {\r\n                ...state.mapParams,\r\n                ...dataMapParams\r\n            }\r\n            \r\n            return {\r\n                ...state,\r\n                dataParams: dataAndParamsObj,\r\n                mapParams: dataAndMapParamsObj,\r\n                selectionKeys: [],\r\n                selectionIndex: [],\r\n                currentData: dataset\r\n            };\r\n        case 'SET_Z_VARIABLE_PARAMS':\r\n            let paramObjZ = {\r\n                ...state.dataParams,\r\n                zAxisParams: action.payload.params\r\n            }\r\n            \r\n            return {\r\n                ...state,\r\n                currentZVariable: action.payload.variable,\r\n                dataParams: paramObjZ \r\n            }\r\n\r\n        case 'SET_MAP_PARAMS':\r\n            let mapParamObj = {\r\n                ...state.mapParams,\r\n                ...action.payload.params\r\n            }\r\n\r\n            let zAxisReset = {\r\n                ...state.dataParams\r\n            }\r\n            let zAxisVariableReset = state.currentZVariable\r\n\r\n            if (action.payload.params.vizType !== '3D') {\r\n                zAxisReset.zAxisParams = null\r\n                zAxisVariableReset = null\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                mapParams: mapParamObj,\r\n                dataParams: zAxisReset,\r\n                currentZVariable: zAxisVariableReset\r\n            }\r\n        case 'SET_PANELS':\r\n            let panelsObj = {\r\n                ...state.panelState,\r\n                ...action.payload.params\r\n            }\r\n            return {\r\n                ...state,\r\n                panelState: panelsObj \r\n            }\r\n        case 'SET_VARIABLE_NAME':\r\n            return {\r\n                ...state,\r\n                currentVariable: action.payload.name\r\n            }\r\n        case 'SET_SELECTION_DATA':\r\n            return {\r\n                ...state,\r\n                chartData: action.payload.data.values,\r\n                selectionKeys: [action.payload.data.name],\r\n                selectionIndex: [action.payload.data.index]\r\n            }\r\n        case 'APPEND_SELECTION_DATA':\r\n            let appendedChartData = state.chartData;\r\n            let countCol = action.payload.data.name + ' Daily Count'\r\n            let sumCol = action.payload.data.name + ' Total Cases'\r\n\r\n            for (let i=0; i<appendedChartData.length;i++) {\r\n                appendedChartData[i][countCol] = action.payload.data.values[i][countCol]\r\n                appendedChartData[i][sumCol] = action.payload.data.values[i][sumCol]\r\n            }\r\n\r\n            let appendedSelectionNames = [action.payload.data.name, ...state.selectionKeys];\r\n            let appendedSelectionIndex = [action.payload.data.index, ...state.selectionIndex];\r\n\r\n            return {\r\n                ...state,\r\n                chartData: appendedChartData,\r\n                selectionKeys: appendedSelectionNames,\r\n                selectionIndex: appendedSelectionIndex,\r\n            }\r\n        case 'REMOVE_SELECTION_DATA':\r\n            let removedSelectionNames = [...state.selectionKeys]\r\n            let tempRemoveIndex = removedSelectionNames.indexOf(action.payload.data.name)\r\n            removedSelectionNames.splice(tempRemoveIndex, 1)\r\n\r\n            let removedSelectionIndex = [...state.selectionIndex]\r\n            tempRemoveIndex = removedSelectionIndex.indexOf(action.payload.data.index)\r\n            removedSelectionIndex.splice(tempRemoveIndex, 1)\r\n\r\n\r\n            return {\r\n                ...state,\r\n                selectionKeys: removedSelectionNames,\r\n                selectionIndex: removedSelectionIndex,\r\n            }\r\n        case 'SET_ANCHOR_EL':\r\n            return {\r\n                ...state,\r\n                anchorEl: action.payload.anchorEl\r\n            }\r\n        case 'SET_MAP_LOADED':\r\n            return {\r\n                ...state,\r\n                mapLoaded: action.payload.loaded\r\n            }\r\n        case 'SET_NOTIFICATION':\r\n            return {\r\n                ...state,\r\n                notification: action.payload.info\r\n            }\r\n        case 'SET_URL_PARAMS':\r\n            const { urlParams, presets } = action.payload;\r\n\r\n            let preset = urlParams.var ? presets[urlParams.var.replace(/_/g, ' ')] : {};\r\n\r\n            let urlMapParamsObj = {\r\n                ...state.mapParams,\r\n                binMode: urlParams.dbin ? 'dynamic' : '',\r\n                mapType: urlParams.mthd || state.mapParams.mapType,\r\n                overlay: urlParams.ovr ||  state.mapParams.overlay,\r\n                resource: urlParams.res || state.mapParams.resource,\r\n                vizType: urlParams.viz || state.mapParams.vizType\r\n            };\r\n\r\n            let urlDataParamsObj = {\r\n                ...state.dataParams,\r\n                ...preset,\r\n                nIndex: urlParams.date || state.dataParams.nIndex,\r\n                nRange: urlParams.hasOwnProperty('range') ? urlParams.range === 'null' ? null : urlParams.range : state.dataParams.nRange,\r\n                nProperty: urlParams.prop || state.dataParams.nProperty\r\n            };\r\n            \r\n            let urlCoordObj = {\r\n                lat: urlParams.lat || '',\r\n                lon: urlParams.lon || '',\r\n                z: urlParams.z || ''\r\n            }\r\n\r\n            let urlParamsSource = urlParams.src ? \r\n                `${urlParams.src}.geojson` : \r\n                state.currentData \r\n\r\n            return {\r\n                ...state,\r\n                currentData: urlParamsSource,\r\n                urlParams: urlCoordObj,\r\n                mapParams: urlMapParamsObj,\r\n                dataParams: urlDataParamsObj\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { createStore} from 'redux';\r\nimport reducer from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport './mapbox.css';\r\nimport WebFont from 'webfontloader';\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nconst store = createStore(\r\n  reducer\r\n  // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\n\r\nWebFont.load({\r\n  google: {\r\n    families: ['Lato:300,400,700,900', 'Playfair Display:ital', 'sans-serif']\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nregisterServiceWorker();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}